'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:2.0.50727.5420
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'此源代码是由 Microsoft.VSDesigner 2.0.50727.5420 版自动生成。
'
Namespace htfServerPermission
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="PermissionSoap", [Namespace]:="http://iLOOK100.net/WebServices/Permission")>  _
    Partial Public Class Permission
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private authenticationHeaderValueField As AuthenticationHeader
        
        Private LoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Login1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Login2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsFixedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsFixed1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsFixed2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsFixed3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsFixed4OperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsFixed5OperationCompleted As System.Threading.SendOrPostCallback
        
        Private VerifyLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VerifyLogin1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMember1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFixedIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFixedID1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFixedID2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFixedID3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserID1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserInfo1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRolesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRoles1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsers1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermission1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermission2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermission3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermission4OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermission5OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermission6OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermission7OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermission8OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermission9OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermission10OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPermission11OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPermissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPermission1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPermission2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPermission3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPermissionSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPermissionSet1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPermissionSet2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPermissionSet3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPermissionSet4OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTopmostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveMember1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetPassword1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetPermissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetPermission1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetPermission2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserInfo1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchForm1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://localhost/webservice_cgmis/permission.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property AuthenticationHeaderValue() As AuthenticationHeader
            Get
                Return Me.authenticationHeaderValueField
            End Get
            Set
                Me.authenticationHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event LoginCompleted As LoginCompletedEventHandler
        
        '''<remarks/>
        Public Event Login1Completed As Login1CompletedEventHandler
        
        '''<remarks/>
        Public Event Login2Completed As Login2CompletedEventHandler
        
        '''<remarks/>
        Public Event LogoutCompleted As LogoutCompletedEventHandler
        
        '''<remarks/>
        Public Event ExistsCompleted As ExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event IsLoginCompleted As IsLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event IsFixedCompleted As IsFixedCompletedEventHandler
        
        '''<remarks/>
        Public Event IsFixed1Completed As IsFixed1CompletedEventHandler
        
        '''<remarks/>
        Public Event IsFixed2Completed As IsFixed2CompletedEventHandler
        
        '''<remarks/>
        Public Event IsFixed3Completed As IsFixed3CompletedEventHandler
        
        '''<remarks/>
        Public Event IsFixed4Completed As IsFixed4CompletedEventHandler
        
        '''<remarks/>
        Public Event IsFixed5Completed As IsFixed5CompletedEventHandler
        
        '''<remarks/>
        Public Event VerifyLoginCompleted As VerifyLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event VerifyLogin1Completed As VerifyLogin1CompletedEventHandler
        
        '''<remarks/>
        Public Event AddMemberCompleted As AddMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMember1Completed As AddMember1CompletedEventHandler
        
        '''<remarks/>
        Public Event AddRoleCompleted As AddRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUserCompleted As AddUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFixedIDCompleted As GetFixedIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFixedID1Completed As GetFixedID1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetFixedID2Completed As GetFixedID2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetFixedID3Completed As GetFixedID3CompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserIDCompleted As GetUserIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserID1Completed As GetUserID1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserNameCompleted As GetUserNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserInfoCompleted As GetUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserInfo1Completed As GetUserInfo1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetMemberCompleted As GetMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRolesCompleted As GetRolesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRoles1Completed As GetRoles1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsersCompleted As GetUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsers1Completed As GetUsers1CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermissionCompleted As FetchPermissionCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermission1Completed As FetchPermission1CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermission2Completed As FetchPermission2CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermission3Completed As FetchPermission3CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermission4Completed As FetchPermission4CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermission5Completed As FetchPermission5CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermission6Completed As FetchPermission6CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermission7Completed As FetchPermission7CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermission8Completed As FetchPermission8CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermission9Completed As FetchPermission9CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermission10Completed As FetchPermission10CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPermission11Completed As FetchPermission11CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPermissionCompleted As GetPermissionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPermission1Completed As GetPermission1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPermission2Completed As GetPermission2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPermission3Completed As GetPermission3CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPermissionSetCompleted As GetPermissionSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPermissionSet1Completed As GetPermissionSet1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPermissionSet2Completed As GetPermissionSet2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPermissionSet3Completed As GetPermissionSet3CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPermissionSet4Completed As GetPermissionSet4CompletedEventHandler
        
        '''<remarks/>
        Public Event GetTopmostCompleted As GetTopmostCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveMemberCompleted As RemoveMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveMember1Completed As RemoveMember1CompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserCompleted As RemoveUserCompletedEventHandler
        
        '''<remarks/>
        Public Event SetPasswordCompleted As SetPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event SetPassword1Completed As SetPassword1CompletedEventHandler
        
        '''<remarks/>
        Public Event SetPermissionCompleted As SetPermissionCompletedEventHandler
        
        '''<remarks/>
        Public Event SetPermission1Completed As SetPermission1CompletedEventHandler
        
        '''<remarks/>
        Public Event SetPermission2Completed As SetPermission2CompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserInfoCompleted As SetUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserInfo1Completed As SetUserInfo1CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchFormCompleted As FetchFormCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchForm1Completed As FetchForm1CompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/LoginByAuthenticationHeader", RequestElementName:="LoginByAuthenticationHeader", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="LoginByAuthenticationHeaderResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function Login() As <System.Xml.Serialization.XmlElementAttribute("LoginByAuthenticationHeaderResult")> Boolean
            Dim results() As Object = Me.Invoke("Login", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginLogin(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Login", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLogin(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginAsync()
            Me.LoginAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal userState As Object)
            If (Me.LoginOperationCompleted Is Nothing) Then
                Me.LoginOperationCompleted = AddressOf Me.OnLoginOperationCompleted
            End If
            Me.InvokeAsync("Login", New Object(-1) {}, Me.LoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginCompleted(Me, New LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="Login1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/Login", RequestElementName:="Login", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="LoginResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function Login(ByVal userName As String, ByVal password As String) As <System.Xml.Serialization.XmlElementAttribute("LoginResult")> Boolean
            Dim results() As Object = Me.Invoke("Login1", New Object() {userName, password})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginLogin1(ByVal userName As String, ByVal password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Login1", New Object() {userName, password}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLogin1(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Login1Async(ByVal userName As String, ByVal password As String)
            Me.Login1Async(userName, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Login1Async(ByVal userName As String, ByVal password As String, ByVal userState As Object)
            If (Me.Login1OperationCompleted Is Nothing) Then
                Me.Login1OperationCompleted = AddressOf Me.OnLogin1OperationCompleted
            End If
            Me.InvokeAsync("Login1", New Object() {userName, password}, Me.Login1OperationCompleted, userState)
        End Sub
        
        Private Sub OnLogin1OperationCompleted(ByVal arg As Object)
            If (Not (Me.Login1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Login1Completed(Me, New Login1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="Login2"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/LoginEx", RequestElementName:="LoginEx", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="LoginExResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function Login(ByVal userName As String, ByVal password As String, ByVal system As String) As <System.Xml.Serialization.XmlElementAttribute("LoginExResult")> Boolean
            Dim results() As Object = Me.Invoke("Login2", New Object() {userName, password, system})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginLogin2(ByVal userName As String, ByVal password As String, ByVal system As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Login2", New Object() {userName, password, system}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLogin2(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Login2Async(ByVal userName As String, ByVal password As String, ByVal system As String)
            Me.Login2Async(userName, password, system, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Login2Async(ByVal userName As String, ByVal password As String, ByVal system As String, ByVal userState As Object)
            If (Me.Login2OperationCompleted Is Nothing) Then
                Me.Login2OperationCompleted = AddressOf Me.OnLogin2OperationCompleted
            End If
            Me.InvokeAsync("Login2", New Object() {userName, password, system}, Me.Login2OperationCompleted, userState)
        End Sub
        
        Private Sub OnLogin2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Login2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Login2Completed(Me, New Login2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/Logout", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Logout()
            Me.Invoke("Logout", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Function BeginLogout(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Logout", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndLogout(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync()
            Me.LogoutAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal userState As Object)
            If (Me.LogoutOperationCompleted Is Nothing) Then
                Me.LogoutOperationCompleted = AddressOf Me.OnLogoutOperationCompleted
            End If
            Me.InvokeAsync("Logout", New Object(-1) {}, Me.LogoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogoutCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/Exists", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Exists(ByVal userID As Object) As Boolean
            Dim results() As Object = Me.Invoke("Exists", New Object() {userID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginExists(ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Exists", New Object() {userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndExists(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExistsAsync(ByVal userID As Object)
            Me.ExistsAsync(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExistsAsync(ByVal userID As Object, ByVal userState As Object)
            If (Me.ExistsOperationCompleted Is Nothing) Then
                Me.ExistsOperationCompleted = AddressOf Me.OnExistsOperationCompleted
            End If
            Me.InvokeAsync("Exists", New Object() {userID}, Me.ExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExistsCompleted(Me, New ExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/IsLogin", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsLogin() As Boolean
            Dim results() As Object = Me.Invoke("IsLogin", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginIsLogin(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IsLogin", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIsLogin(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsLoginAsync()
            Me.IsLoginAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsLoginAsync(ByVal userState As Object)
            If (Me.IsLoginOperationCompleted Is Nothing) Then
                Me.IsLoginOperationCompleted = AddressOf Me.OnIsLoginOperationCompleted
            End If
            Me.InvokeAsync("IsLogin", New Object(-1) {}, Me.IsLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsLoginCompleted(Me, New IsLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/IsFixed", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function IsFixed() As Boolean
            Dim results() As Object = Me.Invoke("IsFixed", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginIsFixed(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IsFixed", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIsFixed(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsFixedAsync()
            Me.IsFixedAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsFixedAsync(ByVal userState As Object)
            If (Me.IsFixedOperationCompleted Is Nothing) Then
                Me.IsFixedOperationCompleted = AddressOf Me.OnIsFixedOperationCompleted
            End If
            Me.InvokeAsync("IsFixed", New Object(-1) {}, Me.IsFixedOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsFixedOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsFixedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsFixedCompleted(Me, New IsFixedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="IsFixed1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/IsFixed_1", RequestElementName:="IsFixed_1", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="IsFixed_1Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function IsFixed(ByVal userID As Object) As <System.Xml.Serialization.XmlElementAttribute("IsFixed_1Result")> Boolean
            Dim results() As Object = Me.Invoke("IsFixed1", New Object() {userID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginIsFixed1(ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IsFixed1", New Object() {userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIsFixed1(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsFixed1Async(ByVal userID As Object)
            Me.IsFixed1Async(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsFixed1Async(ByVal userID As Object, ByVal userState As Object)
            If (Me.IsFixed1OperationCompleted Is Nothing) Then
                Me.IsFixed1OperationCompleted = AddressOf Me.OnIsFixed1OperationCompleted
            End If
            Me.InvokeAsync("IsFixed1", New Object() {userID}, Me.IsFixed1OperationCompleted, userState)
        End Sub
        
        Private Sub OnIsFixed1OperationCompleted(ByVal arg As Object)
            If (Not (Me.IsFixed1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsFixed1Completed(Me, New IsFixed1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="IsFixed2"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/IsFixed_2", RequestElementName:="IsFixed_2", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="IsFixed_2Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function IsFixed(ByVal userID As Object, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("IsFixed_2Result")> Boolean
            Dim results() As Object = Me.Invoke("IsFixed2", New Object() {userID, level})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginIsFixed2(ByVal userID As Object, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IsFixed2", New Object() {userID, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIsFixed2(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsFixed2Async(ByVal userID As Object, ByVal level As Integer)
            Me.IsFixed2Async(userID, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsFixed2Async(ByVal userID As Object, ByVal level As Integer, ByVal userState As Object)
            If (Me.IsFixed2OperationCompleted Is Nothing) Then
                Me.IsFixed2OperationCompleted = AddressOf Me.OnIsFixed2OperationCompleted
            End If
            Me.InvokeAsync("IsFixed2", New Object() {userID, level}, Me.IsFixed2OperationCompleted, userState)
        End Sub
        
        Private Sub OnIsFixed2OperationCompleted(ByVal arg As Object)
            If (Not (Me.IsFixed2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsFixed2Completed(Me, New IsFixed2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="IsFixed3"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/IsFixed_3", RequestElementName:="IsFixed_3", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="IsFixed_3Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function IsFixed(ByVal fixedID As FixedRoleEnum) As <System.Xml.Serialization.XmlElementAttribute("IsFixed_3Result")> Boolean
            Dim results() As Object = Me.Invoke("IsFixed3", New Object() {fixedID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginIsFixed3(ByVal fixedID As FixedRoleEnum, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IsFixed3", New Object() {fixedID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIsFixed3(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsFixed3Async(ByVal fixedID As FixedRoleEnum)
            Me.IsFixed3Async(fixedID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsFixed3Async(ByVal fixedID As FixedRoleEnum, ByVal userState As Object)
            If (Me.IsFixed3OperationCompleted Is Nothing) Then
                Me.IsFixed3OperationCompleted = AddressOf Me.OnIsFixed3OperationCompleted
            End If
            Me.InvokeAsync("IsFixed3", New Object() {fixedID}, Me.IsFixed3OperationCompleted, userState)
        End Sub
        
        Private Sub OnIsFixed3OperationCompleted(ByVal arg As Object)
            If (Not (Me.IsFixed3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsFixed3Completed(Me, New IsFixed3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="IsFixed4"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/IsFixed_4", RequestElementName:="IsFixed_4", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="IsFixed_4Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function IsFixed(ByVal userID As Object, ByVal fixedID As FixedRoleEnum) As <System.Xml.Serialization.XmlElementAttribute("IsFixed_4Result")> Boolean
            Dim results() As Object = Me.Invoke("IsFixed4", New Object() {userID, fixedID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginIsFixed4(ByVal userID As Object, ByVal fixedID As FixedRoleEnum, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IsFixed4", New Object() {userID, fixedID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIsFixed4(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsFixed4Async(ByVal userID As Object, ByVal fixedID As FixedRoleEnum)
            Me.IsFixed4Async(userID, fixedID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsFixed4Async(ByVal userID As Object, ByVal fixedID As FixedRoleEnum, ByVal userState As Object)
            If (Me.IsFixed4OperationCompleted Is Nothing) Then
                Me.IsFixed4OperationCompleted = AddressOf Me.OnIsFixed4OperationCompleted
            End If
            Me.InvokeAsync("IsFixed4", New Object() {userID, fixedID}, Me.IsFixed4OperationCompleted, userState)
        End Sub
        
        Private Sub OnIsFixed4OperationCompleted(ByVal arg As Object)
            If (Not (Me.IsFixed4CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsFixed4Completed(Me, New IsFixed4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="IsFixed5"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/IsFixed_5", RequestElementName:="IsFixed_5", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="IsFixed_5Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function IsFixed(ByVal userID As Object, ByVal fixedID As FixedRoleEnum, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("IsFixed_5Result")> Boolean
            Dim results() As Object = Me.Invoke("IsFixed5", New Object() {userID, fixedID, level})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginIsFixed5(ByVal userID As Object, ByVal fixedID As FixedRoleEnum, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IsFixed5", New Object() {userID, fixedID, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIsFixed5(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsFixed5Async(ByVal userID As Object, ByVal fixedID As FixedRoleEnum, ByVal level As Integer)
            Me.IsFixed5Async(userID, fixedID, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsFixed5Async(ByVal userID As Object, ByVal fixedID As FixedRoleEnum, ByVal level As Integer, ByVal userState As Object)
            If (Me.IsFixed5OperationCompleted Is Nothing) Then
                Me.IsFixed5OperationCompleted = AddressOf Me.OnIsFixed5OperationCompleted
            End If
            Me.InvokeAsync("IsFixed5", New Object() {userID, fixedID, level}, Me.IsFixed5OperationCompleted, userState)
        End Sub
        
        Private Sub OnIsFixed5OperationCompleted(ByVal arg As Object)
            If (Not (Me.IsFixed5CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsFixed5Completed(Me, New IsFixed5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/VerifyLogin", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function VerifyLogin(ByVal userID As Object, ByVal password As String) As Boolean
            Dim results() As Object = Me.Invoke("VerifyLogin", New Object() {userID, password})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginVerifyLogin(ByVal userID As Object, ByVal password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("VerifyLogin", New Object() {userID, password}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndVerifyLogin(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VerifyLoginAsync(ByVal userID As Object, ByVal password As String)
            Me.VerifyLoginAsync(userID, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VerifyLoginAsync(ByVal userID As Object, ByVal password As String, ByVal userState As Object)
            If (Me.VerifyLoginOperationCompleted Is Nothing) Then
                Me.VerifyLoginOperationCompleted = AddressOf Me.OnVerifyLoginOperationCompleted
            End If
            Me.InvokeAsync("VerifyLogin", New Object() {userID, password}, Me.VerifyLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnVerifyLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.VerifyLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VerifyLoginCompleted(Me, New VerifyLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="VerifyLogin1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/VerifyLoginEx", RequestElementName:="VerifyLoginEx", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="VerifyLoginExResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function VerifyLogin(ByVal userID As Object, ByVal password As String, ByVal system As String) As <System.Xml.Serialization.XmlElementAttribute("VerifyLoginExResult")> Boolean
            Dim results() As Object = Me.Invoke("VerifyLogin1", New Object() {userID, password, system})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginVerifyLogin1(ByVal userID As Object, ByVal password As String, ByVal system As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("VerifyLogin1", New Object() {userID, password, system}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndVerifyLogin1(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VerifyLogin1Async(ByVal userID As Object, ByVal password As String, ByVal system As String)
            Me.VerifyLogin1Async(userID, password, system, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VerifyLogin1Async(ByVal userID As Object, ByVal password As String, ByVal system As String, ByVal userState As Object)
            If (Me.VerifyLogin1OperationCompleted Is Nothing) Then
                Me.VerifyLogin1OperationCompleted = AddressOf Me.OnVerifyLogin1OperationCompleted
            End If
            Me.InvokeAsync("VerifyLogin1", New Object() {userID, password, system}, Me.VerifyLogin1OperationCompleted, userState)
        End Sub
        
        Private Sub OnVerifyLogin1OperationCompleted(ByVal arg As Object)
            If (Not (Me.VerifyLogin1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VerifyLogin1Completed(Me, New VerifyLogin1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/AddMember", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function AddMember(ByVal roleID As Object, ByVal userID As Object, ByVal createDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("AddMember", New Object() {roleID, userID, createDate})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginAddMember(ByVal roleID As Object, ByVal userID As Object, ByVal createDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddMember", New Object() {roleID, userID, createDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddMember(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMemberAsync(ByVal roleID As Object, ByVal userID As Object, ByVal createDate As Date)
            Me.AddMemberAsync(roleID, userID, createDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMemberAsync(ByVal roleID As Object, ByVal userID As Object, ByVal createDate As Date, ByVal userState As Object)
            If (Me.AddMemberOperationCompleted Is Nothing) Then
                Me.AddMemberOperationCompleted = AddressOf Me.OnAddMemberOperationCompleted
            End If
            Me.InvokeAsync("AddMember", New Object() {roleID, userID, createDate}, Me.AddMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMemberCompleted(Me, New AddMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="AddMember1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/AddMember_1", RequestElementName:="AddMember_1", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="AddMember_1Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function AddMember(ByVal roleID As Object, ByVal userID As Object) As <System.Xml.Serialization.XmlElementAttribute("AddMember_1Result")> Boolean
            Dim results() As Object = Me.Invoke("AddMember1", New Object() {roleID, userID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginAddMember1(ByVal roleID As Object, ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddMember1", New Object() {roleID, userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddMember1(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMember1Async(ByVal roleID As Object, ByVal userID As Object)
            Me.AddMember1Async(roleID, userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMember1Async(ByVal roleID As Object, ByVal userID As Object, ByVal userState As Object)
            If (Me.AddMember1OperationCompleted Is Nothing) Then
                Me.AddMember1OperationCompleted = AddressOf Me.OnAddMember1OperationCompleted
            End If
            Me.InvokeAsync("AddMember1", New Object() {roleID, userID}, Me.AddMember1OperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMember1OperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMember1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMember1Completed(Me, New AddMember1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/AddRole", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddRole(ByVal name As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal createDate As Date) As Integer
            Dim results() As Object = Me.Invoke("AddRole", New Object() {name, fullName, description, masterNo, createDate})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginAddRole(ByVal name As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal createDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddRole", New Object() {name, fullName, description, masterNo, createDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddRole(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddRoleAsync(ByVal name As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal createDate As Date)
            Me.AddRoleAsync(name, fullName, description, masterNo, createDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddRoleAsync(ByVal name As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal createDate As Date, ByVal userState As Object)
            If (Me.AddRoleOperationCompleted Is Nothing) Then
                Me.AddRoleOperationCompleted = AddressOf Me.OnAddRoleOperationCompleted
            End If
            Me.InvokeAsync("AddRole", New Object() {name, fullName, description, masterNo, createDate}, Me.AddRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddRoleCompleted(Me, New AddRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/AddUser", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUser(ByVal name As String, ByVal password As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal createDate As Date, ByVal firstChange As Boolean, ByVal canotChange As Boolean, ByVal accountAlway As Boolean, ByVal accountPause As Boolean) As Integer
            Dim results() As Object = Me.Invoke("AddUser", New Object() {name, password, fullName, description, masterNo, createDate, firstChange, canotChange, accountAlway, accountPause})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginAddUser(ByVal name As String, ByVal password As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal createDate As Date, ByVal firstChange As Boolean, ByVal canotChange As Boolean, ByVal accountAlway As Boolean, ByVal accountPause As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddUser", New Object() {name, password, fullName, description, masterNo, createDate, firstChange, canotChange, accountAlway, accountPause}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddUser(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUserAsync(ByVal name As String, ByVal password As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal createDate As Date, ByVal firstChange As Boolean, ByVal canotChange As Boolean, ByVal accountAlway As Boolean, ByVal accountPause As Boolean)
            Me.AddUserAsync(name, password, fullName, description, masterNo, createDate, firstChange, canotChange, accountAlway, accountPause, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserAsync(ByVal name As String, ByVal password As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal createDate As Date, ByVal firstChange As Boolean, ByVal canotChange As Boolean, ByVal accountAlway As Boolean, ByVal accountPause As Boolean, ByVal userState As Object)
            If (Me.AddUserOperationCompleted Is Nothing) Then
                Me.AddUserOperationCompleted = AddressOf Me.OnAddUserOperationCompleted
            End If
            Me.InvokeAsync("AddUser", New Object() {name, password, fullName, description, masterNo, createDate, firstChange, canotChange, accountAlway, accountPause}, Me.AddUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUserCompleted(Me, New AddUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetFixedID", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetFixedID(ByVal userID As Object, ByVal level As Integer) As FixedRoleEnum
            Dim results() As Object = Me.Invoke("GetFixedID", New Object() {userID, level})
            Return CType(results(0),FixedRoleEnum)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFixedID(ByVal userID As Object, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFixedID", New Object() {userID, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFixedID(ByVal asyncResult As System.IAsyncResult) As FixedRoleEnum
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FixedRoleEnum)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFixedIDAsync(ByVal userID As Object, ByVal level As Integer)
            Me.GetFixedIDAsync(userID, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFixedIDAsync(ByVal userID As Object, ByVal level As Integer, ByVal userState As Object)
            If (Me.GetFixedIDOperationCompleted Is Nothing) Then
                Me.GetFixedIDOperationCompleted = AddressOf Me.OnGetFixedIDOperationCompleted
            End If
            Me.InvokeAsync("GetFixedID", New Object() {userID, level}, Me.GetFixedIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFixedIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFixedIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFixedIDCompleted(Me, New GetFixedIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetFixedID1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetFixedID_1", RequestElementName:="GetFixedID_1", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetFixedID_1Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetFixedID(ByVal userID As Object) As <System.Xml.Serialization.XmlElementAttribute("GetFixedID_1Result")> FixedRoleEnum
            Dim results() As Object = Me.Invoke("GetFixedID1", New Object() {userID})
            Return CType(results(0),FixedRoleEnum)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFixedID1(ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFixedID1", New Object() {userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFixedID1(ByVal asyncResult As System.IAsyncResult) As FixedRoleEnum
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FixedRoleEnum)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFixedID1Async(ByVal userID As Object)
            Me.GetFixedID1Async(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFixedID1Async(ByVal userID As Object, ByVal userState As Object)
            If (Me.GetFixedID1OperationCompleted Is Nothing) Then
                Me.GetFixedID1OperationCompleted = AddressOf Me.OnGetFixedID1OperationCompleted
            End If
            Me.InvokeAsync("GetFixedID1", New Object() {userID}, Me.GetFixedID1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFixedID1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFixedID1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFixedID1Completed(Me, New GetFixedID1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetFixedID2"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetFixedID_2", RequestElementName:="GetFixedID_2", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetFixedID_2Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetFixedID(ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("GetFixedID_2Result")> FixedRoleEnum
            Dim results() As Object = Me.Invoke("GetFixedID2", New Object() {level})
            Return CType(results(0),FixedRoleEnum)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFixedID2(ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFixedID2", New Object() {level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFixedID2(ByVal asyncResult As System.IAsyncResult) As FixedRoleEnum
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FixedRoleEnum)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFixedID2Async(ByVal level As Integer)
            Me.GetFixedID2Async(level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFixedID2Async(ByVal level As Integer, ByVal userState As Object)
            If (Me.GetFixedID2OperationCompleted Is Nothing) Then
                Me.GetFixedID2OperationCompleted = AddressOf Me.OnGetFixedID2OperationCompleted
            End If
            Me.InvokeAsync("GetFixedID2", New Object() {level}, Me.GetFixedID2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFixedID2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFixedID2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFixedID2Completed(Me, New GetFixedID2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetFixedID3"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetFixedID_3", RequestElementName:="GetFixedID_3", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetFixedID_3Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetFixedID() As <System.Xml.Serialization.XmlElementAttribute("GetFixedID_3Result")> FixedRoleEnum
            Dim results() As Object = Me.Invoke("GetFixedID3", New Object(-1) {})
            Return CType(results(0),FixedRoleEnum)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFixedID3(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFixedID3", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFixedID3(ByVal asyncResult As System.IAsyncResult) As FixedRoleEnum
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FixedRoleEnum)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFixedID3Async()
            Me.GetFixedID3Async(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFixedID3Async(ByVal userState As Object)
            If (Me.GetFixedID3OperationCompleted Is Nothing) Then
                Me.GetFixedID3OperationCompleted = AddressOf Me.OnGetFixedID3OperationCompleted
            End If
            Me.InvokeAsync("GetFixedID3", New Object(-1) {}, Me.GetFixedID3OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFixedID3OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFixedID3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFixedID3Completed(Me, New GetFixedID3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetUserID_Current", RequestElementName:="GetUserID_Current", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetUserID_CurrentResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetUserID() As <System.Xml.Serialization.XmlElementAttribute("GetUserID_CurrentResult")> Integer
            Dim results() As Object = Me.Invoke("GetUserID", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUserID(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUserID", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUserID(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserIDAsync()
            Me.GetUserIDAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserIDAsync(ByVal userState As Object)
            If (Me.GetUserIDOperationCompleted Is Nothing) Then
                Me.GetUserIDOperationCompleted = AddressOf Me.OnGetUserIDOperationCompleted
            End If
            Me.InvokeAsync("GetUserID", New Object(-1) {}, Me.GetUserIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserIDCompleted(Me, New GetUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetUserID1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetUserID", RequestElementName:="GetUserID", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetUserIDResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetUserID(ByVal userName As Object) As <System.Xml.Serialization.XmlElementAttribute("GetUserIDResult")> Integer
            Dim results() As Object = Me.Invoke("GetUserID1", New Object() {userName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUserID1(ByVal userName As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUserID1", New Object() {userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUserID1(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserID1Async(ByVal userName As Object)
            Me.GetUserID1Async(userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserID1Async(ByVal userName As Object, ByVal userState As Object)
            If (Me.GetUserID1OperationCompleted Is Nothing) Then
                Me.GetUserID1OperationCompleted = AddressOf Me.OnGetUserID1OperationCompleted
            End If
            Me.InvokeAsync("GetUserID1", New Object() {userName}, Me.GetUserID1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserID1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserID1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserID1Completed(Me, New GetUserID1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetUserName", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserName(ByVal userID As Object) As String
            Dim results() As Object = Me.Invoke("GetUserName", New Object() {userID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUserName(ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUserName", New Object() {userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUserName(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserNameAsync(ByVal userID As Object)
            Me.GetUserNameAsync(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserNameAsync(ByVal userID As Object, ByVal userState As Object)
            If (Me.GetUserNameOperationCompleted Is Nothing) Then
                Me.GetUserNameOperationCompleted = AddressOf Me.OnGetUserNameOperationCompleted
            End If
            Me.InvokeAsync("GetUserName", New Object() {userID}, Me.GetUserNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserNameCompleted(Me, New GetUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetUserInfoAll", RequestElementName:="GetUserInfoAll", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetUserInfoAllResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetUserInfo() As <System.Xml.Serialization.XmlElementAttribute("GetUserInfoAllResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserInfo", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUserInfo(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUserInfo", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUserInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoAsync()
            Me.GetUserInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoAsync(ByVal userState As Object)
            If (Me.GetUserInfoOperationCompleted Is Nothing) Then
                Me.GetUserInfoOperationCompleted = AddressOf Me.OnGetUserInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUserInfo", New Object(-1) {}, Me.GetUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserInfoCompleted(Me, New GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetUserInfo1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetUserInfo", RequestElementName:="GetUserInfo", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetUserInfoResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetUserInfo(ByVal userID As Object) As <System.Xml.Serialization.XmlElementAttribute("GetUserInfoResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserInfo1", New Object() {userID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUserInfo1(ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUserInfo1", New Object() {userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUserInfo1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserInfo1Async(ByVal userID As Object)
            Me.GetUserInfo1Async(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserInfo1Async(ByVal userID As Object, ByVal userState As Object)
            If (Me.GetUserInfo1OperationCompleted Is Nothing) Then
                Me.GetUserInfo1OperationCompleted = AddressOf Me.OnGetUserInfo1OperationCompleted
            End If
            Me.InvokeAsync("GetUserInfo1", New Object() {userID}, Me.GetUserInfo1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserInfo1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserInfo1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserInfo1Completed(Me, New GetUserInfo1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetMember", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMember(ByVal direction As DirectionEnum, ByVal userID As Object, ByVal level As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMember", New Object() {direction, userID, level})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMember(ByVal direction As DirectionEnum, ByVal userID As Object, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMember", New Object() {direction, userID, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMember(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMemberAsync(ByVal direction As DirectionEnum, ByVal userID As Object, ByVal level As Integer)
            Me.GetMemberAsync(direction, userID, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMemberAsync(ByVal direction As DirectionEnum, ByVal userID As Object, ByVal level As Integer, ByVal userState As Object)
            If (Me.GetMemberOperationCompleted Is Nothing) Then
                Me.GetMemberOperationCompleted = AddressOf Me.OnGetMemberOperationCompleted
            End If
            Me.InvokeAsync("GetMember", New Object() {direction, userID, level}, Me.GetMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMemberCompleted(Me, New GetMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetRolesAll", RequestElementName:="GetRolesAll", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetRolesAllResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetRoles() As <System.Xml.Serialization.XmlElementAttribute("GetRolesAllResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRoles", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRoles(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRoles", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRoles(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRolesAsync()
            Me.GetRolesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRolesAsync(ByVal userState As Object)
            If (Me.GetRolesOperationCompleted Is Nothing) Then
                Me.GetRolesOperationCompleted = AddressOf Me.OnGetRolesOperationCompleted
            End If
            Me.InvokeAsync("GetRoles", New Object(-1) {}, Me.GetRolesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRolesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRolesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRolesCompleted(Me, New GetRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetRoles1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetRoles", RequestElementName:="GetRoles", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetRolesResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetRoles(ByVal userID As Object, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("GetRolesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRoles1", New Object() {userID, level})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRoles1(ByVal userID As Object, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRoles1", New Object() {userID, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRoles1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRoles1Async(ByVal userID As Object, ByVal level As Integer)
            Me.GetRoles1Async(userID, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRoles1Async(ByVal userID As Object, ByVal level As Integer, ByVal userState As Object)
            If (Me.GetRoles1OperationCompleted Is Nothing) Then
                Me.GetRoles1OperationCompleted = AddressOf Me.OnGetRoles1OperationCompleted
            End If
            Me.InvokeAsync("GetRoles1", New Object() {userID, level}, Me.GetRoles1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRoles1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRoles1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRoles1Completed(Me, New GetRoles1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetUsersAll", RequestElementName:="GetUsersAll", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetUsersAllResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetUsers() As <System.Xml.Serialization.XmlElementAttribute("GetUsersAllResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUsers", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUsers(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUsers", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUsers(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsersAsync()
            Me.GetUsersAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsersAsync(ByVal userState As Object)
            If (Me.GetUsersOperationCompleted Is Nothing) Then
                Me.GetUsersOperationCompleted = AddressOf Me.OnGetUsersOperationCompleted
            End If
            Me.InvokeAsync("GetUsers", New Object(-1) {}, Me.GetUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsersCompleted(Me, New GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetUsers1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetUsers", RequestElementName:="GetUsers", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetUsersResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetUsers(ByVal roleID As Object, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("GetUsersResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUsers1", New Object() {roleID, level})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUsers1(ByVal roleID As Object, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUsers1", New Object() {roleID, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUsers1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsers1Async(ByVal roleID As Object, ByVal level As Integer)
            Me.GetUsers1Async(roleID, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsers1Async(ByVal roleID As Object, ByVal level As Integer, ByVal userState As Object)
            If (Me.GetUsers1OperationCompleted Is Nothing) Then
                Me.GetUsers1OperationCompleted = AddressOf Me.OnGetUsers1OperationCompleted
            End If
            Me.InvokeAsync("GetUsers1", New Object() {roleID, level}, Me.GetUsers1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsers1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsers1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsers1Completed(Me, New GetUsers1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermissionAll", RequestElementName:="FetchPermissionAll", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermissionAllResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission() As <System.Xml.Serialization.XmlElementAttribute("FetchPermissionAllResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermissionAsync()
            Me.FetchPermissionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermissionAsync(ByVal userState As Object)
            If (Me.FetchPermissionOperationCompleted Is Nothing) Then
                Me.FetchPermissionOperationCompleted = AddressOf Me.OnFetchPermissionOperationCompleted
            End If
            Me.InvokeAsync("FetchPermission", New Object(-1) {}, Me.FetchPermissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermissionCompleted(Me, New FetchPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchPermission1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermission_1", RequestElementName:="FetchPermission_1", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermission_1Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("FetchPermission_1Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission1", New Object() {userID, protect, level})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission1(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission1", New Object() {userID, protect, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermission1Async(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer)
            Me.FetchPermission1Async(userID, protect, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermission1Async(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer, ByVal userState As Object)
            If (Me.FetchPermission1OperationCompleted Is Nothing) Then
                Me.FetchPermission1OperationCompleted = AddressOf Me.OnFetchPermission1OperationCompleted
            End If
            Me.InvokeAsync("FetchPermission1", New Object() {userID, protect, level}, Me.FetchPermission1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermission1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermission1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermission1Completed(Me, New FetchPermission1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchPermission2"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermission_2", RequestElementName:="FetchPermission_2", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermission_2Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission(ByVal userID As Object, ByVal protect As ProtectEnum) As <System.Xml.Serialization.XmlElementAttribute("FetchPermission_2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission2", New Object() {userID, protect})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission2(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission2", New Object() {userID, protect}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission2(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermission2Async(ByVal userID As Object, ByVal protect As ProtectEnum)
            Me.FetchPermission2Async(userID, protect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermission2Async(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal userState As Object)
            If (Me.FetchPermission2OperationCompleted Is Nothing) Then
                Me.FetchPermission2OperationCompleted = AddressOf Me.OnFetchPermission2OperationCompleted
            End If
            Me.InvokeAsync("FetchPermission2", New Object() {userID, protect}, Me.FetchPermission2OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermission2OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermission2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermission2Completed(Me, New FetchPermission2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchPermission3"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermission_3", RequestElementName:="FetchPermission_3", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermission_3Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission(ByVal userID As Object, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("FetchPermission_3Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission3", New Object() {userID, level})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission3(ByVal userID As Object, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission3", New Object() {userID, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission3(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermission3Async(ByVal userID As Object, ByVal level As Integer)
            Me.FetchPermission3Async(userID, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermission3Async(ByVal userID As Object, ByVal level As Integer, ByVal userState As Object)
            If (Me.FetchPermission3OperationCompleted Is Nothing) Then
                Me.FetchPermission3OperationCompleted = AddressOf Me.OnFetchPermission3OperationCompleted
            End If
            Me.InvokeAsync("FetchPermission3", New Object() {userID, level}, Me.FetchPermission3OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermission3OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermission3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermission3Completed(Me, New FetchPermission3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchPermission4"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermission_4", RequestElementName:="FetchPermission_4", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermission_4Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission(ByVal userID As Object) As <System.Xml.Serialization.XmlElementAttribute("FetchPermission_4Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission4", New Object() {userID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission4(ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission4", New Object() {userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission4(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermission4Async(ByVal userID As Object)
            Me.FetchPermission4Async(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermission4Async(ByVal userID As Object, ByVal userState As Object)
            If (Me.FetchPermission4OperationCompleted Is Nothing) Then
                Me.FetchPermission4OperationCompleted = AddressOf Me.OnFetchPermission4OperationCompleted
            End If
            Me.InvokeAsync("FetchPermission4", New Object() {userID}, Me.FetchPermission4OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermission4OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermission4CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermission4Completed(Me, New FetchPermission4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchPermission5"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermission_5", RequestElementName:="FetchPermission_5", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermission_5Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("FetchPermission_5Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission5", New Object() {formID, userID, protect, level})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission5(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission5", New Object() {formID, userID, protect, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission5(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermission5Async(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer)
            Me.FetchPermission5Async(formID, userID, protect, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermission5Async(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer, ByVal userState As Object)
            If (Me.FetchPermission5OperationCompleted Is Nothing) Then
                Me.FetchPermission5OperationCompleted = AddressOf Me.OnFetchPermission5OperationCompleted
            End If
            Me.InvokeAsync("FetchPermission5", New Object() {formID, userID, protect, level}, Me.FetchPermission5OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermission5OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermission5CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermission5Completed(Me, New FetchPermission5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchPermission6"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermission_6", RequestElementName:="FetchPermission_6", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermission_6Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum) As <System.Xml.Serialization.XmlElementAttribute("FetchPermission_6Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission6", New Object() {formID, userID, protect})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission6(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission6", New Object() {formID, userID, protect}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission6(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermission6Async(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum)
            Me.FetchPermission6Async(formID, userID, protect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermission6Async(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal userState As Object)
            If (Me.FetchPermission6OperationCompleted Is Nothing) Then
                Me.FetchPermission6OperationCompleted = AddressOf Me.OnFetchPermission6OperationCompleted
            End If
            Me.InvokeAsync("FetchPermission6", New Object() {formID, userID, protect}, Me.FetchPermission6OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermission6OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermission6CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermission6Completed(Me, New FetchPermission6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchPermission7"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermission_7", RequestElementName:="FetchPermission_7", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermission_7Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission(ByVal formID As Integer, ByVal userID As Object, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("FetchPermission_7Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission7", New Object() {formID, userID, level})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission7(ByVal formID As Integer, ByVal userID As Object, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission7", New Object() {formID, userID, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission7(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermission7Async(ByVal formID As Integer, ByVal userID As Object, ByVal level As Integer)
            Me.FetchPermission7Async(formID, userID, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermission7Async(ByVal formID As Integer, ByVal userID As Object, ByVal level As Integer, ByVal userState As Object)
            If (Me.FetchPermission7OperationCompleted Is Nothing) Then
                Me.FetchPermission7OperationCompleted = AddressOf Me.OnFetchPermission7OperationCompleted
            End If
            Me.InvokeAsync("FetchPermission7", New Object() {formID, userID, level}, Me.FetchPermission7OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermission7OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermission7CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermission7Completed(Me, New FetchPermission7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchPermission8"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermission_8", RequestElementName:="FetchPermission_8", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermission_8Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission(ByVal formID As Integer, ByVal userID As Object) As <System.Xml.Serialization.XmlElementAttribute("FetchPermission_8Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission8", New Object() {formID, userID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission8(ByVal formID As Integer, ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission8", New Object() {formID, userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission8(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermission8Async(ByVal formID As Integer, ByVal userID As Object)
            Me.FetchPermission8Async(formID, userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermission8Async(ByVal formID As Integer, ByVal userID As Object, ByVal userState As Object)
            If (Me.FetchPermission8OperationCompleted Is Nothing) Then
                Me.FetchPermission8OperationCompleted = AddressOf Me.OnFetchPermission8OperationCompleted
            End If
            Me.InvokeAsync("FetchPermission8", New Object() {formID, userID}, Me.FetchPermission8OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermission8OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermission8CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermission8Completed(Me, New FetchPermission8CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchPermission9"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermission_9", RequestElementName:="FetchPermission_9", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermission_9Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission(ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("FetchPermission_9Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission9", New Object() {formID, protect, level})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission9(ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission9", New Object() {formID, protect, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission9(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermission9Async(ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal level As Integer)
            Me.FetchPermission9Async(formID, protect, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermission9Async(ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal level As Integer, ByVal userState As Object)
            If (Me.FetchPermission9OperationCompleted Is Nothing) Then
                Me.FetchPermission9OperationCompleted = AddressOf Me.OnFetchPermission9OperationCompleted
            End If
            Me.InvokeAsync("FetchPermission9", New Object() {formID, protect, level}, Me.FetchPermission9OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermission9OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermission9CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermission9Completed(Me, New FetchPermission9CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchPermission10"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermission_10", RequestElementName:="FetchPermission_10", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermission_10Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission(ByVal formID As Integer, ByVal protect As ProtectEnum) As <System.Xml.Serialization.XmlElementAttribute("FetchPermission_10Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission10", New Object() {formID, protect})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission10(ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission10", New Object() {formID, protect}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission10(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermission10Async(ByVal formID As Integer, ByVal protect As ProtectEnum)
            Me.FetchPermission10Async(formID, protect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermission10Async(ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal userState As Object)
            If (Me.FetchPermission10OperationCompleted Is Nothing) Then
                Me.FetchPermission10OperationCompleted = AddressOf Me.OnFetchPermission10OperationCompleted
            End If
            Me.InvokeAsync("FetchPermission10", New Object() {formID, protect}, Me.FetchPermission10OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermission10OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermission10CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermission10Completed(Me, New FetchPermission10CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchPermission11"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchPermission_11", RequestElementName:="FetchPermission_11", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchPermission_11Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchPermission(ByVal formID As Integer) As <System.Xml.Serialization.XmlElementAttribute("FetchPermission_11Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchPermission11", New Object() {formID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchPermission11(ByVal formID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchPermission11", New Object() {formID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchPermission11(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPermission11Async(ByVal formID As Integer)
            Me.FetchPermission11Async(formID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPermission11Async(ByVal formID As Integer, ByVal userState As Object)
            If (Me.FetchPermission11OperationCompleted Is Nothing) Then
                Me.FetchPermission11OperationCompleted = AddressOf Me.OnFetchPermission11OperationCompleted
            End If
            Me.InvokeAsync("FetchPermission11", New Object() {formID}, Me.FetchPermission11OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPermission11OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPermission11CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPermission11Completed(Me, New FetchPermission11CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetPermission_1", RequestElementName:="GetPermission_1", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetPermission_1Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetPermission(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("GetPermission_1Result")> Integer
            Dim results() As Object = Me.Invoke("GetPermission", New Object() {formID, userID, protect, level})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPermission(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPermission", New Object() {formID, userID, protect, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPermission(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPermissionAsync(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer)
            Me.GetPermissionAsync(formID, userID, protect, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPermissionAsync(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer, ByVal userState As Object)
            If (Me.GetPermissionOperationCompleted Is Nothing) Then
                Me.GetPermissionOperationCompleted = AddressOf Me.OnGetPermissionOperationCompleted
            End If
            Me.InvokeAsync("GetPermission", New Object() {formID, userID, protect, level}, Me.GetPermissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPermissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPermissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPermissionCompleted(Me, New GetPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetPermission1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetPermission_2", RequestElementName:="GetPermission_2", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetPermission_2Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetPermission(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum) As <System.Xml.Serialization.XmlElementAttribute("GetPermission_2Result")> Integer
            Dim results() As Object = Me.Invoke("GetPermission1", New Object() {formID, userID, protect})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPermission1(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPermission1", New Object() {formID, userID, protect}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPermission1(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPermission1Async(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum)
            Me.GetPermission1Async(formID, userID, protect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPermission1Async(ByVal formID As Integer, ByVal userID As Object, ByVal protect As ProtectEnum, ByVal userState As Object)
            If (Me.GetPermission1OperationCompleted Is Nothing) Then
                Me.GetPermission1OperationCompleted = AddressOf Me.OnGetPermission1OperationCompleted
            End If
            Me.InvokeAsync("GetPermission1", New Object() {formID, userID, protect}, Me.GetPermission1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPermission1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPermission1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPermission1Completed(Me, New GetPermission1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetPermission2"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetPermission_3", RequestElementName:="GetPermission_3", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetPermission_3Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetPermission(ByVal formID As Integer, ByVal userID As Object, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("GetPermission_3Result")> Integer
            Dim results() As Object = Me.Invoke("GetPermission2", New Object() {formID, userID, level})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPermission2(ByVal formID As Integer, ByVal userID As Object, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPermission2", New Object() {formID, userID, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPermission2(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPermission2Async(ByVal formID As Integer, ByVal userID As Object, ByVal level As Integer)
            Me.GetPermission2Async(formID, userID, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPermission2Async(ByVal formID As Integer, ByVal userID As Object, ByVal level As Integer, ByVal userState As Object)
            If (Me.GetPermission2OperationCompleted Is Nothing) Then
                Me.GetPermission2OperationCompleted = AddressOf Me.OnGetPermission2OperationCompleted
            End If
            Me.InvokeAsync("GetPermission2", New Object() {formID, userID, level}, Me.GetPermission2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPermission2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPermission2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPermission2Completed(Me, New GetPermission2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetPermission3"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetPermission_4", RequestElementName:="GetPermission_4", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetPermission_4Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetPermission(ByVal formID As Integer, ByVal userID As Object) As <System.Xml.Serialization.XmlElementAttribute("GetPermission_4Result")> Integer
            Dim results() As Object = Me.Invoke("GetPermission3", New Object() {formID, userID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPermission3(ByVal formID As Integer, ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPermission3", New Object() {formID, userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPermission3(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPermission3Async(ByVal formID As Integer, ByVal userID As Object)
            Me.GetPermission3Async(formID, userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPermission3Async(ByVal formID As Integer, ByVal userID As Object, ByVal userState As Object)
            If (Me.GetPermission3OperationCompleted Is Nothing) Then
                Me.GetPermission3OperationCompleted = AddressOf Me.OnGetPermission3OperationCompleted
            End If
            Me.InvokeAsync("GetPermission3", New Object() {formID, userID}, Me.GetPermission3OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPermission3OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPermission3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPermission3Completed(Me, New GetPermission3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetPermissionSetAll", RequestElementName:="GetPermissionSetAll", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetPermissionSetAllResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetPermissionSet() As <System.Xml.Serialization.XmlElementAttribute("GetPermissionSetAllResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPermissionSet", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPermissionSet(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPermissionSet", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPermissionSet(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPermissionSetAsync()
            Me.GetPermissionSetAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPermissionSetAsync(ByVal userState As Object)
            If (Me.GetPermissionSetOperationCompleted Is Nothing) Then
                Me.GetPermissionSetOperationCompleted = AddressOf Me.OnGetPermissionSetOperationCompleted
            End If
            Me.InvokeAsync("GetPermissionSet", New Object(-1) {}, Me.GetPermissionSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPermissionSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPermissionSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPermissionSetCompleted(Me, New GetPermissionSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetPermissionSet1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetPermissionSet_1", RequestElementName:="GetPermissionSet_1", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetPermissionSet_1Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetPermissionSet(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("GetPermissionSet_1Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPermissionSet1", New Object() {userID, protect, level})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPermissionSet1(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPermissionSet1", New Object() {userID, protect, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPermissionSet1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPermissionSet1Async(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer)
            Me.GetPermissionSet1Async(userID, protect, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPermissionSet1Async(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal level As Integer, ByVal userState As Object)
            If (Me.GetPermissionSet1OperationCompleted Is Nothing) Then
                Me.GetPermissionSet1OperationCompleted = AddressOf Me.OnGetPermissionSet1OperationCompleted
            End If
            Me.InvokeAsync("GetPermissionSet1", New Object() {userID, protect, level}, Me.GetPermissionSet1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPermissionSet1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPermissionSet1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPermissionSet1Completed(Me, New GetPermissionSet1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetPermissionSet2"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetPermissionSet_2", RequestElementName:="GetPermissionSet_2", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetPermissionSet_2Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetPermissionSet(ByVal userID As Object, ByVal protect As ProtectEnum) As <System.Xml.Serialization.XmlElementAttribute("GetPermissionSet_2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPermissionSet2", New Object() {userID, protect})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPermissionSet2(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPermissionSet2", New Object() {userID, protect}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPermissionSet2(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPermissionSet2Async(ByVal userID As Object, ByVal protect As ProtectEnum)
            Me.GetPermissionSet2Async(userID, protect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPermissionSet2Async(ByVal userID As Object, ByVal protect As ProtectEnum, ByVal userState As Object)
            If (Me.GetPermissionSet2OperationCompleted Is Nothing) Then
                Me.GetPermissionSet2OperationCompleted = AddressOf Me.OnGetPermissionSet2OperationCompleted
            End If
            Me.InvokeAsync("GetPermissionSet2", New Object() {userID, protect}, Me.GetPermissionSet2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPermissionSet2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPermissionSet2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPermissionSet2Completed(Me, New GetPermissionSet2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetPermissionSet3"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetPermissionSet_3", RequestElementName:="GetPermissionSet_3", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetPermissionSet_3Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetPermissionSet(ByVal userID As Object, ByVal level As Integer) As <System.Xml.Serialization.XmlElementAttribute("GetPermissionSet_3Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPermissionSet3", New Object() {userID, level})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPermissionSet3(ByVal userID As Object, ByVal level As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPermissionSet3", New Object() {userID, level}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPermissionSet3(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPermissionSet3Async(ByVal userID As Object, ByVal level As Integer)
            Me.GetPermissionSet3Async(userID, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPermissionSet3Async(ByVal userID As Object, ByVal level As Integer, ByVal userState As Object)
            If (Me.GetPermissionSet3OperationCompleted Is Nothing) Then
                Me.GetPermissionSet3OperationCompleted = AddressOf Me.OnGetPermissionSet3OperationCompleted
            End If
            Me.InvokeAsync("GetPermissionSet3", New Object() {userID, level}, Me.GetPermissionSet3OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPermissionSet3OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPermissionSet3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPermissionSet3Completed(Me, New GetPermissionSet3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="GetPermissionSet4"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetPermissionSet_4", RequestElementName:="GetPermissionSet_4", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="GetPermissionSet_4Response", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetPermissionSet(ByVal userID As Object) As <System.Xml.Serialization.XmlElementAttribute("GetPermissionSet_4Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPermissionSet4", New Object() {userID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPermissionSet4(ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPermissionSet4", New Object() {userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPermissionSet4(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPermissionSet4Async(ByVal userID As Object)
            Me.GetPermissionSet4Async(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPermissionSet4Async(ByVal userID As Object, ByVal userState As Object)
            If (Me.GetPermissionSet4OperationCompleted Is Nothing) Then
                Me.GetPermissionSet4OperationCompleted = AddressOf Me.OnGetPermissionSet4OperationCompleted
            End If
            Me.InvokeAsync("GetPermissionSet4", New Object() {userID}, Me.GetPermissionSet4OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPermissionSet4OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPermissionSet4CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPermissionSet4Completed(Me, New GetPermissionSet4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/GetTopmost", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTopmost() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTopmost", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTopmost(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTopmost", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTopmost(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTopmostAsync()
            Me.GetTopmostAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTopmostAsync(ByVal userState As Object)
            If (Me.GetTopmostOperationCompleted Is Nothing) Then
                Me.GetTopmostOperationCompleted = AddressOf Me.OnGetTopmostOperationCompleted
            End If
            Me.InvokeAsync("GetTopmost", New Object(-1) {}, Me.GetTopmostOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTopmostOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTopmostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTopmostCompleted(Me, New GetTopmostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/RemoveMemberAll", RequestElementName:="RemoveMemberAll", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="RemoveMemberAllResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function RemoveMember(ByVal roleID As Object) As <System.Xml.Serialization.XmlElementAttribute("RemoveMemberAllResult")> Boolean
            Dim results() As Object = Me.Invoke("RemoveMember", New Object() {roleID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginRemoveMember(ByVal roleID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RemoveMember", New Object() {roleID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRemoveMember(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveMemberAsync(ByVal roleID As Object)
            Me.RemoveMemberAsync(roleID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveMemberAsync(ByVal roleID As Object, ByVal userState As Object)
            If (Me.RemoveMemberOperationCompleted Is Nothing) Then
                Me.RemoveMemberOperationCompleted = AddressOf Me.OnRemoveMemberOperationCompleted
            End If
            Me.InvokeAsync("RemoveMember", New Object() {roleID}, Me.RemoveMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveMemberCompleted(Me, New RemoveMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="RemoveMember1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/RemoveMember", RequestElementName:="RemoveMember", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="RemoveMemberResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function RemoveMember(ByVal roleID As Object, ByVal userID As Object) As <System.Xml.Serialization.XmlElementAttribute("RemoveMemberResult")> Boolean
            Dim results() As Object = Me.Invoke("RemoveMember1", New Object() {roleID, userID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginRemoveMember1(ByVal roleID As Object, ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RemoveMember1", New Object() {roleID, userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRemoveMember1(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveMember1Async(ByVal roleID As Object, ByVal userID As Object)
            Me.RemoveMember1Async(roleID, userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveMember1Async(ByVal roleID As Object, ByVal userID As Object, ByVal userState As Object)
            If (Me.RemoveMember1OperationCompleted Is Nothing) Then
                Me.RemoveMember1OperationCompleted = AddressOf Me.OnRemoveMember1OperationCompleted
            End If
            Me.InvokeAsync("RemoveMember1", New Object() {roleID, userID}, Me.RemoveMember1OperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveMember1OperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveMember1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveMember1Completed(Me, New RemoveMember1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/RemoveUser", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveUser(ByVal userID As Object) As Boolean
            Dim results() As Object = Me.Invoke("RemoveUser", New Object() {userID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginRemoveUser(ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RemoveUser", New Object() {userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRemoveUser(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveUserAsync(ByVal userID As Object)
            Me.RemoveUserAsync(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserAsync(ByVal userID As Object, ByVal userState As Object)
            If (Me.RemoveUserOperationCompleted Is Nothing) Then
                Me.RemoveUserOperationCompleted = AddressOf Me.OnRemoveUserOperationCompleted
            End If
            Me.InvokeAsync("RemoveUser", New Object() {userID}, Me.RemoveUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserCompleted(Me, New RemoveUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/SetPassword", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function SetPassword(ByVal newPassword As String, ByVal oldPassword As String, ByVal userID As Object) As Boolean
            Dim results() As Object = Me.Invoke("SetPassword", New Object() {newPassword, oldPassword, userID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginSetPassword(ByVal newPassword As String, ByVal oldPassword As String, ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetPassword", New Object() {newPassword, oldPassword, userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetPassword(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetPasswordAsync(ByVal newPassword As String, ByVal oldPassword As String, ByVal userID As Object)
            Me.SetPasswordAsync(newPassword, oldPassword, userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetPasswordAsync(ByVal newPassword As String, ByVal oldPassword As String, ByVal userID As Object, ByVal userState As Object)
            If (Me.SetPasswordOperationCompleted Is Nothing) Then
                Me.SetPasswordOperationCompleted = AddressOf Me.OnSetPasswordOperationCompleted
            End If
            Me.InvokeAsync("SetPassword", New Object() {newPassword, oldPassword, userID}, Me.SetPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetPasswordCompleted(Me, New SetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="SetPassword1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/SetPasswordCurrent", RequestElementName:="SetPasswordCurrent", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="SetPasswordCurrentResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function SetPassword(ByVal newPassword As String, ByVal oldPassword As String) As <System.Xml.Serialization.XmlElementAttribute("SetPasswordCurrentResult")> Boolean
            Dim results() As Object = Me.Invoke("SetPassword1", New Object() {newPassword, oldPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginSetPassword1(ByVal newPassword As String, ByVal oldPassword As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetPassword1", New Object() {newPassword, oldPassword}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetPassword1(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetPassword1Async(ByVal newPassword As String, ByVal oldPassword As String)
            Me.SetPassword1Async(newPassword, oldPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetPassword1Async(ByVal newPassword As String, ByVal oldPassword As String, ByVal userState As Object)
            If (Me.SetPassword1OperationCompleted Is Nothing) Then
                Me.SetPassword1OperationCompleted = AddressOf Me.OnSetPassword1OperationCompleted
            End If
            Me.InvokeAsync("SetPassword1", New Object() {newPassword, oldPassword}, Me.SetPassword1OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetPassword1OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetPassword1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetPassword1Completed(Me, New SetPassword1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/UpdatePermission", RequestElementName:="UpdatePermission", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="UpdatePermissionResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function SetPermission(ByVal permissionDataSet As System.Data.DataSet) As <System.Xml.Serialization.XmlElementAttribute("UpdatePermissionResult")> Boolean
            Dim results() As Object = Me.Invoke("SetPermission", New Object() {permissionDataSet})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginSetPermission(ByVal permissionDataSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetPermission", New Object() {permissionDataSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetPermission(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetPermissionAsync(ByVal permissionDataSet As System.Data.DataSet)
            Me.SetPermissionAsync(permissionDataSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetPermissionAsync(ByVal permissionDataSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.SetPermissionOperationCompleted Is Nothing) Then
                Me.SetPermissionOperationCompleted = AddressOf Me.OnSetPermissionOperationCompleted
            End If
            Me.InvokeAsync("SetPermission", New Object() {permissionDataSet}, Me.SetPermissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetPermissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetPermissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetPermissionCompleted(Me, New SetPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="SetPermission1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/SetPermission", RequestElementName:="SetPermission", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="SetPermissionResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function SetPermission(ByVal permission As PermissionEnum, ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal userID As Object) As <System.Xml.Serialization.XmlElementAttribute("SetPermissionResult")> Boolean
            Dim results() As Object = Me.Invoke("SetPermission1", New Object() {permission, formID, protect, userID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginSetPermission1(ByVal permission As PermissionEnum, ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal userID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetPermission1", New Object() {permission, formID, protect, userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetPermission1(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetPermission1Async(ByVal permission As PermissionEnum, ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal userID As Object)
            Me.SetPermission1Async(permission, formID, protect, userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetPermission1Async(ByVal permission As PermissionEnum, ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal userID As Object, ByVal userState As Object)
            If (Me.SetPermission1OperationCompleted Is Nothing) Then
                Me.SetPermission1OperationCompleted = AddressOf Me.OnSetPermission1OperationCompleted
            End If
            Me.InvokeAsync("SetPermission1", New Object() {permission, formID, protect, userID}, Me.SetPermission1OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetPermission1OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetPermission1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetPermission1Completed(Me, New SetPermission1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="SetPermission2"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/SetPermissionCurrent", RequestElementName:="SetPermissionCurrent", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="SetPermissionCurrentResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function SetPermission(ByVal permission As PermissionEnum, ByVal formID As Integer, ByVal protect As ProtectEnum) As <System.Xml.Serialization.XmlElementAttribute("SetPermissionCurrentResult")> Boolean
            Dim results() As Object = Me.Invoke("SetPermission2", New Object() {permission, formID, protect})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginSetPermission2(ByVal permission As PermissionEnum, ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetPermission2", New Object() {permission, formID, protect}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetPermission2(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetPermission2Async(ByVal permission As PermissionEnum, ByVal formID As Integer, ByVal protect As ProtectEnum)
            Me.SetPermission2Async(permission, formID, protect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetPermission2Async(ByVal permission As PermissionEnum, ByVal formID As Integer, ByVal protect As ProtectEnum, ByVal userState As Object)
            If (Me.SetPermission2OperationCompleted Is Nothing) Then
                Me.SetPermission2OperationCompleted = AddressOf Me.OnSetPermission2OperationCompleted
            End If
            Me.InvokeAsync("SetPermission2", New Object() {permission, formID, protect}, Me.SetPermission2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetPermission2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetPermission2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetPermission2Completed(Me, New SetPermission2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/SetUserInfo", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function SetUserInfo(ByVal oldName As Object, ByVal newName As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal firstChange As Boolean, ByVal canotChange As Boolean, ByVal accountAlway As Boolean, ByVal accountPause As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("SetUserInfo", New Object() {oldName, newName, fullName, description, masterNo, firstChange, canotChange, accountAlway, accountPause})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginSetUserInfo(ByVal oldName As Object, ByVal newName As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal firstChange As Boolean, ByVal canotChange As Boolean, ByVal accountAlway As Boolean, ByVal accountPause As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetUserInfo", New Object() {oldName, newName, fullName, description, masterNo, firstChange, canotChange, accountAlway, accountPause}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetUserInfo(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetUserInfoAsync(ByVal oldName As Object, ByVal newName As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal firstChange As Boolean, ByVal canotChange As Boolean, ByVal accountAlway As Boolean, ByVal accountPause As Boolean)
            Me.SetUserInfoAsync(oldName, newName, fullName, description, masterNo, firstChange, canotChange, accountAlway, accountPause, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserInfoAsync(ByVal oldName As Object, ByVal newName As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal firstChange As Boolean, ByVal canotChange As Boolean, ByVal accountAlway As Boolean, ByVal accountPause As Boolean, ByVal userState As Object)
            If (Me.SetUserInfoOperationCompleted Is Nothing) Then
                Me.SetUserInfoOperationCompleted = AddressOf Me.OnSetUserInfoOperationCompleted
            End If
            Me.InvokeAsync("SetUserInfo", New Object() {oldName, newName, fullName, description, masterNo, firstChange, canotChange, accountAlway, accountPause}, Me.SetUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserInfoCompleted(Me, New SetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="SetUserInfo1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/SetUserInfoSimple", RequestElementName:="SetUserInfoSimple", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="SetUserInfoSimpleResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function SetUserInfo(ByVal oldName As Object, ByVal newName As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String) As <System.Xml.Serialization.XmlElementAttribute("SetUserInfoSimpleResult")> Boolean
            Dim results() As Object = Me.Invoke("SetUserInfo1", New Object() {oldName, newName, fullName, description, masterNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginSetUserInfo1(ByVal oldName As Object, ByVal newName As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetUserInfo1", New Object() {oldName, newName, fullName, description, masterNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetUserInfo1(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetUserInfo1Async(ByVal oldName As Object, ByVal newName As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String)
            Me.SetUserInfo1Async(oldName, newName, fullName, description, masterNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserInfo1Async(ByVal oldName As Object, ByVal newName As String, ByVal fullName As String, ByVal description As String, ByVal masterNo As String, ByVal userState As Object)
            If (Me.SetUserInfo1OperationCompleted Is Nothing) Then
                Me.SetUserInfo1OperationCompleted = AddressOf Me.OnSetUserInfo1OperationCompleted
            End If
            Me.InvokeAsync("SetUserInfo1", New Object() {oldName, newName, fullName, description, masterNo}, Me.SetUserInfo1OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserInfo1OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserInfo1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserInfo1Completed(Me, New SetUserInfo1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchFormAll", RequestElementName:="FetchFormAll", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchFormAllResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchForm() As <System.Xml.Serialization.XmlElementAttribute("FetchFormAllResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchForm", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchForm(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchForm", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchForm(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchFormAsync()
            Me.FetchFormAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchFormAsync(ByVal userState As Object)
            If (Me.FetchFormOperationCompleted Is Nothing) Then
                Me.FetchFormOperationCompleted = AddressOf Me.OnFetchFormOperationCompleted
            End If
            Me.InvokeAsync("FetchForm", New Object(-1) {}, Me.FetchFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchFormCompleted(Me, New FetchFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="FetchForm1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://iLOOK100.net/WebServices/Permission/FetchForm", RequestElementName:="FetchForm", RequestNamespace:="http://iLOOK100.net/WebServices/Permission", ResponseElementName:="FetchFormResponse", ResponseNamespace:="http://iLOOK100.net/WebServices/Permission", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchForm(ByVal formID As Integer) As <System.Xml.Serialization.XmlElementAttribute("FetchFormResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchForm1", New Object() {formID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchForm1(ByVal formID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchForm1", New Object() {formID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchForm1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchForm1Async(ByVal formID As Integer)
            Me.FetchForm1Async(formID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchForm1Async(ByVal formID As Integer, ByVal userState As Object)
            If (Me.FetchForm1OperationCompleted Is Nothing) Then
                Me.FetchForm1OperationCompleted = AddressOf Me.OnFetchForm1OperationCompleted
            End If
            Me.InvokeAsync("FetchForm1", New Object() {formID}, Me.FetchForm1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchForm1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchForm1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchForm1Completed(Me, New FetchForm1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://iLOOK100.net/WebServices/Permission"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://iLOOK100.net/WebServices/Permission", IsNullable:=false)>  _
    Partial Public Class AuthenticationHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private userNameField As String
        
        Private passwordField As String
        
        Private systemField As String
        
        '''<remarks/>
        Public Property UserName() As String
            Get
                Return Me.userNameField
            End Get
            Set
                Me.userNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property System() As String
            Get
                Return Me.systemField
            End Get
            Set
                Me.systemField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.FlagsAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://iLOOK100.net/WebServices/Permission")>  _
    Public Enum FixedRoleEnum
        
        '''<remarks/>
        Administrator = 1
        
        '''<remarks/>
        Administrators = 2
        
        '''<remarks/>
        Authors = 4
        
        '''<remarks/>
        Readers = 8
        
        '''<remarks/>
        Security = 16
        
        '''<remarks/>
        Setting = 32
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://iLOOK100.net/WebServices/Permission")>  _
    Public Enum DirectionEnum
        
        '''<remarks/>
        UpSearch
        
        '''<remarks/>
        DownSearch
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://iLOOK100.net/WebServices/Permission")>  _
    Public Enum ProtectEnum
        
        '''<remarks/>
        RevokeProtect
        
        '''<remarks/>
        GrantProtect
        
        '''<remarks/>
        DenyProtect
    End Enum
    
    '''<remarks/>
    <System.FlagsAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://iLOOK100.net/WebServices/Permission")>  _
    Public Enum PermissionEnum
        
        '''<remarks/>
        FetchPermission = 1
        
        '''<remarks/>
        AddNewPermission = 2
        
        '''<remarks/>
        UpdatePermission = 4
        
        '''<remarks/>
        DeletePermission = 8
        
        '''<remarks/>
        PrintPermission = 16
        
        '''<remarks/>
        FlowPermission = 32
        
        '''<remarks/>
        VoidPermission = 64
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub LoginCompletedEventHandler(ByVal sender As Object, ByVal e As LoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Login1CompletedEventHandler(ByVal sender As Object, ByVal e As Login1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Login1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Login2CompletedEventHandler(ByVal sender As Object, ByVal e As Login2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Login2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub LogoutCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ExistsCompletedEventHandler(ByVal sender As Object, ByVal e As ExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub IsLoginCompletedEventHandler(ByVal sender As Object, ByVal e As IsLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub IsFixedCompletedEventHandler(ByVal sender As Object, ByVal e As IsFixedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsFixedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub IsFixed1CompletedEventHandler(ByVal sender As Object, ByVal e As IsFixed1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsFixed1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub IsFixed2CompletedEventHandler(ByVal sender As Object, ByVal e As IsFixed2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsFixed2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub IsFixed3CompletedEventHandler(ByVal sender As Object, ByVal e As IsFixed3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsFixed3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub IsFixed4CompletedEventHandler(ByVal sender As Object, ByVal e As IsFixed4CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsFixed4CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub IsFixed5CompletedEventHandler(ByVal sender As Object, ByVal e As IsFixed5CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsFixed5CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub VerifyLoginCompletedEventHandler(ByVal sender As Object, ByVal e As VerifyLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VerifyLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub VerifyLogin1CompletedEventHandler(ByVal sender As Object, ByVal e As VerifyLogin1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VerifyLogin1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddMemberCompletedEventHandler(ByVal sender As Object, ByVal e As AddMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddMember1CompletedEventHandler(ByVal sender As Object, ByVal e As AddMember1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMember1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddRoleCompletedEventHandler(ByVal sender As Object, ByVal e As AddRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddUserCompletedEventHandler(ByVal sender As Object, ByVal e As AddUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetFixedIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetFixedIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFixedIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FixedRoleEnum
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FixedRoleEnum)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetFixedID1CompletedEventHandler(ByVal sender As Object, ByVal e As GetFixedID1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFixedID1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FixedRoleEnum
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FixedRoleEnum)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetFixedID2CompletedEventHandler(ByVal sender As Object, ByVal e As GetFixedID2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFixedID2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FixedRoleEnum
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FixedRoleEnum)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetFixedID3CompletedEventHandler(ByVal sender As Object, ByVal e As GetFixedID3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFixedID3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FixedRoleEnum
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FixedRoleEnum)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserID1CompletedEventHandler(ByVal sender As Object, ByVal e As GetUserID1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserID1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserInfo1CompletedEventHandler(ByVal sender As Object, ByVal e As GetUserInfo1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserInfo1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMemberCompletedEventHandler(ByVal sender As Object, ByVal e As GetMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetRolesCompletedEventHandler(ByVal sender As Object, ByVal e As GetRolesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRolesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetRoles1CompletedEventHandler(ByVal sender As Object, ByVal e As GetRoles1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRoles1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUsersCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUsers1CompletedEventHandler(ByVal sender As Object, ByVal e As GetUsers1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsers1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermissionCompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermission1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermission1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermission1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermission2CompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermission2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermission2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermission3CompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermission3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermission3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermission4CompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermission4CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermission4CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermission5CompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermission5CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermission5CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermission6CompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermission6CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermission6CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermission7CompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermission7CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermission7CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermission8CompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermission8CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermission8CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermission9CompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermission9CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermission9CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermission10CompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermission10CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermission10CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchPermission11CompletedEventHandler(ByVal sender As Object, ByVal e As FetchPermission11CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPermission11CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPermissionCompletedEventHandler(ByVal sender As Object, ByVal e As GetPermissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPermissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPermission1CompletedEventHandler(ByVal sender As Object, ByVal e As GetPermission1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPermission1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPermission2CompletedEventHandler(ByVal sender As Object, ByVal e As GetPermission2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPermission2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPermission3CompletedEventHandler(ByVal sender As Object, ByVal e As GetPermission3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPermission3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPermissionSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetPermissionSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPermissionSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPermissionSet1CompletedEventHandler(ByVal sender As Object, ByVal e As GetPermissionSet1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPermissionSet1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPermissionSet2CompletedEventHandler(ByVal sender As Object, ByVal e As GetPermissionSet2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPermissionSet2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPermissionSet3CompletedEventHandler(ByVal sender As Object, ByVal e As GetPermissionSet3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPermissionSet3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPermissionSet4CompletedEventHandler(ByVal sender As Object, ByVal e As GetPermissionSet4CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPermissionSet4CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTopmostCompletedEventHandler(ByVal sender As Object, ByVal e As GetTopmostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTopmostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub RemoveMemberCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub RemoveMember1CompletedEventHandler(ByVal sender As Object, ByVal e As RemoveMember1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveMember1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub RemoveUserCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SetPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As SetPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SetPassword1CompletedEventHandler(ByVal sender As Object, ByVal e As SetPassword1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetPassword1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SetPermissionCompletedEventHandler(ByVal sender As Object, ByVal e As SetPermissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetPermissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SetPermission1CompletedEventHandler(ByVal sender As Object, ByVal e As SetPermission1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetPermission1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SetPermission2CompletedEventHandler(ByVal sender As Object, ByVal e As SetPermission2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetPermission2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SetUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As SetUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SetUserInfo1CompletedEventHandler(ByVal sender As Object, ByVal e As SetUserInfo1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetUserInfo1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchFormCompletedEventHandler(ByVal sender As Object, ByVal e As FetchFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchForm1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchForm1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchForm1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
