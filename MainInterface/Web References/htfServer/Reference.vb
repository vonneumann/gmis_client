'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:2.0.50727.5420
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'此源代码是由 Microsoft.VSDesigner 2.0.50727.5420 版自动生成。
'
Namespace htfServer
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Service1Soap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Service1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private DeleteProjectFinanceAnalyseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private updateProcessExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private updateProcessEx1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPostAndJobResponsibilityInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePostAndJobResponsibilityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserPostInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserPostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobPeriodInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateJobPeriodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWorkingHoursOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMoneyInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMoneyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryOppGuarantInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGuarantingCorporationListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchConfernceRoomOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateConfernceRoomOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryStatisticsCompensationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryStatisticsGEProprietorshipOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryStatisticsRegionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryStatisticsCounterguaranteeByMonthOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryStatisticsCounterguaranteeByYearOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryStatisticsPMServiceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PStatisticsByTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PStatisticsByTypeExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryWorkLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryStatisticsGECraftOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryStatisticsMarketingAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryStatisticsMarketingBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryStatisticsMarketingCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectSignatureInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectSignatureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSignaturePlanInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSignaturePlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWfTaskTemplateInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWfTaskTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWfTaskTransferTemplateInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWfTaskTransferTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWfTaskRoleTemplateInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWfTaskRoleTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWfTimingTaskTemplateInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWfTimingTaskTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteProjectCreditQuantityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FStatisticsFeeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGuaranteeLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGuaranteeLetter1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateGuaranteeLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGuaranteeLetterTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateGuaranteeLetterTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGuaranteeLetterUsageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateGuaranteeLetterUsageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReimburseTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateReimburseTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaterialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaterial1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private DuplicateMaterialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMaterialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryStatisticsRecommendProjectByMonthOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryStatisticsRecommendProjectByYearOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryStatisticsRecommendProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Usp_ListIsFirstLoanStatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Usp_GetUnDealProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Usp_GetGuaranteeProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Usp_GetAfterGuaranteeRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Usp_ListConsultationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectCounterClaimInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectCounterClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQryUnsignProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Usp_ListGuaranteeFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTOrganizationInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTOrganizationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectOrganizationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectOrganizationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectAppraisementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCorporationAttendeePersonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDefaultPersonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryProjectRequiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryIntentLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryIntentLetterInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PCopyOppGuaranteeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGuarantyInfoExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectResponsibleInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectResponsibleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryOppEvaluateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWfProjectMessagesInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWfProjectMessagesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWfProjectTaskTransferInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWfProjectTaskTransferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWfProjectTimingTaskInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWfProjectTimingTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWfProjectTrackInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWfProjectTrackOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWfProjectTaskInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWfProjectTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMsgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectFinanceAnalyseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectFinanceAnalyse1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateProjectFinanceAnalyseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectFinanceAnalyseIntegrationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchFinanceAnalyseIndexOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchFinanceAnalyseIndex1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectCreditQualityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateProjectCreditQualityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectCreditQualityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCreditQualityStandardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCreditQualityStandard1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCreditQualityIndexOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCreditQualityIndex1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectCreditQuantityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectCreditQuantity1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private DuplicateCreditAppraiseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DuplicateCreditAppraise1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateProjectCreditQuantityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateProjectCreditQuantity1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCreditQuantityStandardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCreditQuantityStandard1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCreditQuantityIndexOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCreditQuantityIndex1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCreditQuantityIndexOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCreditQuantityStandardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCreditQualityIndexOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCreditQualityStandardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCreditAppraiseSystemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCreditAppraiseSystemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCreditIndexTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCreditIndexTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectCreditOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectCredit1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateProjectCreditOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCommonQueryInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCommonStatisticsInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectSearchInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFinanceReviewDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFinanceReviewData1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectInfoExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReGuaranteeProjectInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryProjectInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryProjectInfo1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMeetProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOverdueProjectListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryFirstProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryCorporationAttendeeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryPauseProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaturityProjectReviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOnVouchProjectReviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectAssignReviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTerminateProjectReviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRefundDebtProjectListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNeedMeetProjectInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWfTaskStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryStatisticsAssuranceInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryStatisticsRegionInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryStatisticsBankInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryStatisticsIndustryInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryStatisticsServiceTypeInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectScheduleInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportFinanceDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAntiAssureCompanyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskProjectListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskProjectList1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConferenceProjectListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchFinancialAnalysisInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNeedSignatureProjectInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchOppositeGuaranteeAssurerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectGuaranteeFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAcceptVouchDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskListInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReviewListInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDraftOutContractListInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCapitialEvaluatedListInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetManagerAppraiseListInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTeamAppraiseListInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRefundProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryAcceptProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryPresentingProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryAllocateProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryLoanProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQuerySignProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PQueryFirstTrialProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryCreditProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryRecantProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryProcessingProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryRegionProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryRequiteProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryChargeStatisticsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTaskTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOppositeGuaranteeAssurerInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOppositeGuaranteeAssurerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTechnologyTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTechnologyTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTerminateTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTerminateTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWorkLogInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWorkLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectEndCaseInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectEndCaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRiskClassOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRiskClassOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPhaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePhaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTeamOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStaffTeamOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTeamOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateStaffTeamOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStaffOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStaffRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStaffByRoleIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStaffEXOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateStaffOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectOpinionBySerialIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectOpinionByProjectNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectOpinionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectOpinionAndProjectAccountDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectFileByConditionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectFileImageByConditionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRelationIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectFileImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectFileImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFileTemplateByConditionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFileTemplateExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFileTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoanFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLoanFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWfProjectTaskAttendeeInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWfProjectTaskAttendeeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransConditionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectTaskTransferInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateProcess1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private suspendProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private resumeProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isSuspendProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private finishedTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private finishedTask1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private RefreshConferenceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FinishedReviewConferencePlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelReviewConferencePlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelReviewConferencePlanProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelSignaturePlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelSignaturePlanProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReMeetingPlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReLoanApplicationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FinishedSignaturePlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private rollbackTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SplitPrjoectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private deleteProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private modifiyProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private consignTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelconsignTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartTaskByManualOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LookUpMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LookUpWorkingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LookUpWorkingExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllBusinessTasksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LookUpStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRefundTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRefundTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoanProvideFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLoanProvideFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoanChargeMannerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLoanChargeMannerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSystemIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSystemID1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectCreditQuality1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectAccountDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRefundCertificateInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRefundCertificateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReturnReceiptInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateReturnReceiptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGuarantyStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGuarantyStatusExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateGuarantyStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTerminateReportInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTerminateReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectGuaranteeFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectGuaranteeFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectGuaranteeFormAddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectGuaranteeFormAddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSchemaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationAccount1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationLawsuitRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationRatepayingRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationBankSavingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationBusinessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationExternalGuaranteeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationLoanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationStockStructureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectCorporationExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectCorporationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchProjectCorporation1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationPostalOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporationPostalOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporationAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporationBankSavingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporationLawsuitRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporationRatepayingRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporationBusinessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporationExternalGuaranteeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporationLoanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporationStockStructureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectCorporationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBranchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateBranchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationAccountCreditOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationAccountCreditExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationAccountCredit1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchCorporationAccountMonthOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCorporationTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporationTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrencyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCurrencyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDistrictOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDistrictOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIndustryTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateIndustryTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInvestFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateInvestFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateItemTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoanTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLoanTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOppositeGuaranteeFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOppositeGuaranteeFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectDocumentByConditionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProprietorshipTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProprietorshipTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRecommendTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRecommendTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRecordTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRecordTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateStaffRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetServiceTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateServiceTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ScanTimingTaskOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaxContractNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FQueryProjectExpandDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectExpandDateInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectExpandDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectContractCarElementInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectContractCarElementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectContractChattelElementInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectContractChattelElementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectContractEstateElementInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectContractEstateElementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectContractElementInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectContractElementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAppraisementInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAppraisementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWorkflowTypeInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWorkflowTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDdGuarantyStatusInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDdGuarantyStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAlarmCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAlarmCode1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAlarmCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWorkTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWorkTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWorkSubTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWorkSubType1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWorkSubTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAlarmTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAlarmTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCorporatioRelationTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporatioRelationTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCooperateOrganizationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCooperateOrganizationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCooperateOrganizationOpinionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCooperateOrganizationOpinionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHolidayInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateHolidayOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTracePlanInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTracePlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectTaskAttendeeInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectTaskAttendeeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBankInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateBankOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateBankBranchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateBankAndBranchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectGuaranteeFormAdditionalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateGuaranteeFormOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateGuaranteeFormAdditionalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCheckRecordInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCheckRecordAlarmOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConferenceInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateConferenceCommitteemanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConfTrialInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateConfTrialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCooperateOpinionInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCooperateOpinionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCorpDefectInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorpDefectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCorporationMaxCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCorporationMaxCode_GuaranteeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetcorporationInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorConOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCorporationAndProjectCorporationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGuarantyInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaxGuarantyNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaxSerialIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaxAppraisementNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaxCheckRecordNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaxConferenceCodeNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateGuarantyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIntentLetterInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateIntentLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInvestigationInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateInvestigationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoanNoticeInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLoanNoticeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProcessInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaxProjectAccountDetailNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProjectAccountDetailInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.MainInterface.My.MySettings.Default.MainInterface_htfServer_Service1
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event DeleteProjectFinanceAnalyseCompleted As DeleteProjectFinanceAnalyseCompletedEventHandler
        
        '''<remarks/>
        Public Event updateProcessExCompleted As updateProcessExCompletedEventHandler
        
        '''<remarks/>
        Public Event updateProcessEx1Completed As updateProcessEx1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPostAndJobResponsibilityInfoCompleted As GetPostAndJobResponsibilityInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePostAndJobResponsibilityCompleted As UpdatePostAndJobResponsibilityCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserPostInfoCompleted As GetUserPostInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserPostCompleted As UpdateUserPostCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobPeriodInfoCompleted As GetJobPeriodInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateJobPeriodCompleted As UpdateJobPeriodCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWorkingHoursCompleted As GetWorkingHoursCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMoneyInfoCompleted As GetMoneyInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMoneyCompleted As UpdateMoneyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryOppGuarantInfoCompleted As GetQueryOppGuarantInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGuarantingCorporationListCompleted As GetGuarantingCorporationListCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchConfernceRoomCompleted As FetchConfernceRoomCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateConfernceRoomCompleted As UpdateConfernceRoomCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryStatisticsCompensationCompleted As FQueryStatisticsCompensationCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryStatisticsGEProprietorshipCompleted As FQueryStatisticsGEProprietorshipCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryStatisticsRegionCompleted As FQueryStatisticsRegionCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryStatisticsCounterguaranteeByMonthCompleted As FQueryStatisticsCounterguaranteeByMonthCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryStatisticsCounterguaranteeByYearCompleted As FQueryStatisticsCounterguaranteeByYearCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryStatisticsPMServiceCompleted As FQueryStatisticsPMServiceCompletedEventHandler
        
        '''<remarks/>
        Public Event PStatisticsByTypeCompleted As PStatisticsByTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event PStatisticsByTypeExCompleted As PStatisticsByTypeExCompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryWorkLogCompleted As PQueryWorkLogCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryStatisticsGECraftCompleted As FQueryStatisticsGECraftCompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryStatisticsMarketingACompleted As PQueryStatisticsMarketingACompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryStatisticsMarketingBCompleted As PQueryStatisticsMarketingBCompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryStatisticsMarketingCCompleted As PQueryStatisticsMarketingCCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysTimeCompleted As GetSysTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectSignatureInfoCompleted As GetProjectSignatureInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectSignatureCompleted As UpdateProjectSignatureCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSignaturePlanInfoCompleted As GetSignaturePlanInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSignaturePlanCompleted As UpdateSignaturePlanCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWfTaskTemplateInfoCompleted As GetWfTaskTemplateInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWfTaskTemplateCompleted As UpdateWfTaskTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWfTaskTransferTemplateInfoCompleted As GetWfTaskTransferTemplateInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWfTaskTransferTemplateCompleted As UpdateWfTaskTransferTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWfTaskRoleTemplateInfoCompleted As GetWfTaskRoleTemplateInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWfTaskRoleTemplateCompleted As UpdateWfTaskRoleTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWfTimingTaskTemplateInfoCompleted As GetWfTimingTaskTemplateInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWfTimingTaskTemplateCompleted As UpdateWfTimingTaskTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteProjectCreditQuantityCompleted As DeleteProjectCreditQuantityCompletedEventHandler
        
        '''<remarks/>
        Public Event FStatisticsFeeCompleted As FStatisticsFeeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGuaranteeLetterCompleted As GetGuaranteeLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGuaranteeLetter1Completed As GetGuaranteeLetter1CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateGuaranteeLetterCompleted As UpdateGuaranteeLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGuaranteeLetterTypeCompleted As GetGuaranteeLetterTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateGuaranteeLetterTypeCompleted As UpdateGuaranteeLetterTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGuaranteeLetterUsageCompleted As GetGuaranteeLetterUsageCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateGuaranteeLetterUsageCompleted As UpdateGuaranteeLetterUsageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReimburseTypeCompleted As GetReimburseTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateReimburseTypeCompleted As UpdateReimburseTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaterialCompleted As GetMaterialCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaterial1Completed As GetMaterial1CompletedEventHandler
        
        '''<remarks/>
        Public Event DuplicateMaterialCompleted As DuplicateMaterialCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMaterialCompleted As UpdateMaterialCompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryStatisticsRecommendProjectByMonthCompleted As PQueryStatisticsRecommendProjectByMonthCompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryStatisticsRecommendProjectByYearCompleted As PQueryStatisticsRecommendProjectByYearCompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryStatisticsRecommendProjectCompleted As PQueryStatisticsRecommendProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event Usp_ListIsFirstLoanStatCompleted As Usp_ListIsFirstLoanStatCompletedEventHandler
        
        '''<remarks/>
        Public Event Usp_GetUnDealProjectCompleted As Usp_GetUnDealProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event Usp_GetGuaranteeProjectCompleted As Usp_GetGuaranteeProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event Usp_GetAfterGuaranteeRecordCompleted As Usp_GetAfterGuaranteeRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event Usp_ListConsultationCompleted As Usp_ListConsultationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectCounterClaimInfoCompleted As GetProjectCounterClaimInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectCounterClaimCompleted As UpdateProjectCounterClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event FQryUnsignProjectCompleted As FQryUnsignProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event Usp_ListGuaranteeFormCompleted As Usp_ListGuaranteeFormCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTOrganizationInfoCompleted As GetTOrganizationInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTOrganizationCompleted As UpdateTOrganizationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectOrganizationCompleted As GetProjectOrganizationCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectOrganizationCompleted As UpdateProjectOrganizationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectAppraisementCompleted As GetProjectAppraisementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCorporationAttendeePersonCompleted As GetCorporationAttendeePersonCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDefaultPersonCompleted As GetDefaultPersonCompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryProjectRequiteCompleted As PQueryProjectRequiteCompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryIntentLetterCompleted As PQueryIntentLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryIntentLetterInfoCompleted As PQueryIntentLetterInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event PCopyOppGuaranteeCompleted As PCopyOppGuaranteeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGuarantyInfoExCompleted As GetGuarantyInfoExCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectResponsibleInfoCompleted As GetProjectResponsibleInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectResponsibleCompleted As UpdateProjectResponsibleCompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryOppEvaluateCompleted As PQueryOppEvaluateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWfProjectMessagesInfoCompleted As GetWfProjectMessagesInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWfProjectMessagesCompleted As UpdateWfProjectMessagesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWfProjectTaskTransferInfoCompleted As GetWfProjectTaskTransferInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWfProjectTaskTransferCompleted As UpdateWfProjectTaskTransferCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWfProjectTimingTaskInfoCompleted As GetWfProjectTimingTaskInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWfProjectTimingTaskCompleted As UpdateWfProjectTimingTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWfProjectTrackInfoCompleted As GetWfProjectTrackInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWfProjectTrackCompleted As UpdateWfProjectTrackCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWfProjectTaskInfoCompleted As GetWfProjectTaskInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWfProjectTaskCompleted As UpdateWfProjectTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMsgCompleted As AddMsgCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectFinanceAnalyseCompleted As FetchProjectFinanceAnalyseCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectFinanceAnalyse1Completed As FetchProjectFinanceAnalyse1CompletedEventHandler
        
        '''<remarks/>
        Public Event CreateProjectFinanceAnalyseCompleted As CreateProjectFinanceAnalyseCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectFinanceAnalyseIntegrationCompleted As FetchProjectFinanceAnalyseIntegrationCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchFinanceAnalyseIndexCompleted As FetchFinanceAnalyseIndexCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchFinanceAnalyseIndex1Completed As FetchFinanceAnalyseIndex1CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectCreditQualityCompleted As FetchProjectCreditQualityCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateProjectCreditQualityCompleted As CreateProjectCreditQualityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectCreditQualityCompleted As UpdateProjectCreditQualityCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCreditQualityStandardCompleted As FetchCreditQualityStandardCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCreditQualityStandard1Completed As FetchCreditQualityStandard1CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCreditQualityIndexCompleted As FetchCreditQualityIndexCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCreditQualityIndex1Completed As FetchCreditQualityIndex1CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectCreditQuantityCompleted As FetchProjectCreditQuantityCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectCreditQuantity1Completed As FetchProjectCreditQuantity1CompletedEventHandler
        
        '''<remarks/>
        Public Event DuplicateCreditAppraiseCompleted As DuplicateCreditAppraiseCompletedEventHandler
        
        '''<remarks/>
        Public Event DuplicateCreditAppraise1Completed As DuplicateCreditAppraise1CompletedEventHandler
        
        '''<remarks/>
        Public Event CreateProjectCreditQuantityCompleted As CreateProjectCreditQuantityCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateProjectCreditQuantity1Completed As CreateProjectCreditQuantity1CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCreditQuantityStandardCompleted As FetchCreditQuantityStandardCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCreditQuantityStandard1Completed As FetchCreditQuantityStandard1CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCreditQuantityIndexCompleted As FetchCreditQuantityIndexCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCreditQuantityIndex1Completed As FetchCreditQuantityIndex1CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCreditQuantityIndexCompleted As UpdateCreditQuantityIndexCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCreditQuantityStandardCompleted As UpdateCreditQuantityStandardCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCreditQualityIndexCompleted As UpdateCreditQualityIndexCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCreditQualityStandardCompleted As UpdateCreditQualityStandardCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCreditAppraiseSystemCompleted As UpdateCreditAppraiseSystemCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCreditAppraiseSystemCompleted As FetchCreditAppraiseSystemCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCreditIndexTypeCompleted As FetchCreditIndexTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCreditIndexTypeCompleted As UpdateCreditIndexTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectCreditCompleted As FetchProjectCreditCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectCredit1Completed As FetchProjectCredit1CompletedEventHandler
        
        '''<remarks/>
        Public Event CreateProjectCreditCompleted As CreateProjectCreditCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCommonQueryInfoCompleted As GetCommonQueryInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCommonStatisticsInfoCompleted As GetCommonStatisticsInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectSearchInfoCompleted As GetProjectSearchInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFinanceReviewDataCompleted As GetFinanceReviewDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFinanceReviewData1Completed As GetFinanceReviewData1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectInfoExCompleted As GetProjectInfoExCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReGuaranteeProjectInfoCompleted As GetReGuaranteeProjectInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryProjectInfoCompleted As GetQueryProjectInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryProjectInfo1Completed As GetQueryProjectInfo1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetMeetProjectCompleted As GetMeetProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOverdueProjectListCompleted As GetOverdueProjectListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryFirstProjectCompleted As GetQueryFirstProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryCorporationAttendeeCompleted As GetQueryCorporationAttendeeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryPauseProjectCompleted As GetQueryPauseProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaturityProjectReviewCompleted As GetMaturityProjectReviewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOnVouchProjectReviewCompleted As GetOnVouchProjectReviewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectAssignReviewCompleted As GetProjectAssignReviewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTerminateProjectReviewCompleted As GetTerminateProjectReviewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRefundDebtProjectListCompleted As GetRefundDebtProjectListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNeedMeetProjectInfoCompleted As GetNeedMeetProjectInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWfTaskStatusCompleted As GetWfTaskStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryStatisticsAssuranceInfoCompleted As GetQueryStatisticsAssuranceInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryStatisticsRegionInfoCompleted As GetQueryStatisticsRegionInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryStatisticsBankInfoCompleted As GetQueryStatisticsBankInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryStatisticsIndustryInfoCompleted As GetQueryStatisticsIndustryInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryStatisticsServiceTypeInfoCompleted As GetQueryStatisticsServiceTypeInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectScheduleInfoCompleted As GetProjectScheduleInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportFinanceDataCompleted As ImportFinanceDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAntiAssureCompanyCompleted As DeleteAntiAssureCompanyCompletedEventHandler
        
        '''<remarks/>
        Public Event DelProjectCompleted As DelProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskProjectListCompleted As GetTaskProjectListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskProjectList1Completed As GetTaskProjectList1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetConferenceProjectListCompleted As GetConferenceProjectListCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchFinancialAnalysisInfoCompleted As FetchFinancialAnalysisInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNeedSignatureProjectInfoCompleted As GetNeedSignatureProjectInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchOppositeGuaranteeAssurerCompleted As FetchOppositeGuaranteeAssurerCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectGuaranteeFormCompleted As FetchProjectGuaranteeFormCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAcceptVouchDataCompleted As GetAcceptVouchDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskListInfoCompleted As GetTaskListInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReviewListInfoCompleted As GetReviewListInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDraftOutContractListInfoCompleted As GetDraftOutContractListInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCapitialEvaluatedListInfoCompleted As GetCapitialEvaluatedListInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetManagerAppraiseListInfoCompleted As GetManagerAppraiseListInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTeamAppraiseListInfoCompleted As GetTeamAppraiseListInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRefundProcessCompleted As GetRefundProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryAcceptProjectCompleted As FQueryAcceptProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryPresentingProjectCompleted As FQueryPresentingProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryAllocateProjectCompleted As FQueryAllocateProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryLoanProjectCompleted As FQueryLoanProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event FQuerySignProjectCompleted As FQuerySignProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event PQueryFirstTrialProjectCompleted As PQueryFirstTrialProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryCreditProjectCompleted As FQueryCreditProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryRecantProjectCompleted As FQueryRecantProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryProcessingProjectCompleted As FQueryProcessingProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryRegionProjectCompleted As FQueryRegionProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryRequiteProjectCompleted As FQueryRequiteProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryChargeStatisticsCompleted As FQueryChargeStatisticsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTaskTemplateCompleted As UpdateTaskTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOppositeGuaranteeAssurerInfoCompleted As GetOppositeGuaranteeAssurerInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOppositeGuaranteeAssurerCompleted As UpdateOppositeGuaranteeAssurerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTechnologyTypeCompleted As GetTechnologyTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTechnologyTypeCompleted As UpdateTechnologyTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTerminateTypeCompleted As GetTerminateTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTerminateTypeCompleted As UpdateTerminateTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserCompleted As GetUserCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserCompleted As UpdateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWorkLogInfoCompleted As GetWorkLogInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWorkLogCompleted As UpdateWorkLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectEndCaseInfoCompleted As GetProjectEndCaseInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectEndCaseCompleted As UpdateProjectEndCaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRiskClassCompleted As GetRiskClassCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRiskClassCompleted As UpdateRiskClassCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPhaseCompleted As GetPhaseCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePhaseCompleted As UpdatePhaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTeamCompleted As GetTeamCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStaffTeamCompleted As GetStaffTeamCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTeamCompleted As UpdateTeamCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateStaffTeamCompleted As UpdateStaffTeamCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStaffCompleted As GetStaffCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStaffRoleCompleted As GetStaffRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStaffByRoleIDCompleted As GetStaffByRoleIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStaffEXCompleted As GetStaffEXCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateStaffCompleted As UpdateStaffCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectOpinionBySerialIDCompleted As GetProjectOpinionBySerialIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectOpinionByProjectNoCompleted As GetProjectOpinionByProjectNoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectOpinionCompleted As UpdateProjectOpinionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectOpinionAndProjectAccountDetailCompleted As UpdateProjectOpinionAndProjectAccountDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectFileByConditionCompleted As GetProjectFileByConditionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectFileImageByConditionCompleted As GetProjectFileImageByConditionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectFileCompleted As GetProjectFileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRelationIDCompleted As GetRelationIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectFileImageCompleted As GetProjectFileImageCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectFileCompleted As UpdateProjectFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectFileImageCompleted As UpdateProjectFileImageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFileTemplateByConditionCompleted As GetFileTemplateByConditionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFileTemplateExCompleted As GetFileTemplateExCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFileTemplateCompleted As UpdateFileTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoanFormCompleted As GetLoanFormCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLoanFormCompleted As UpdateLoanFormCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWfProjectTaskAttendeeInfoCompleted As GetWfProjectTaskAttendeeInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWfProjectTaskAttendeeCompleted As UpdateWfProjectTaskAttendeeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransConditionCompleted As GetTransConditionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectTaskTransferInfoCompleted As GetProjectTaskTransferInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateProcessCompleted As CreateProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateProcess1Completed As CreateProcess1CompletedEventHandler
        
        '''<remarks/>
        Public Event suspendProcessCompleted As suspendProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event resumeProcessCompleted As resumeProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event isSuspendProcessCompleted As isSuspendProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event finishedTaskCompleted As finishedTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event finishedTask1Completed As finishedTask1CompletedEventHandler
        
        '''<remarks/>
        Public Event RefreshConferenceCompleted As RefreshConferenceCompletedEventHandler
        
        '''<remarks/>
        Public Event FinishedReviewConferencePlanCompleted As FinishedReviewConferencePlanCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelReviewConferencePlanCompleted As CancelReviewConferencePlanCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelReviewConferencePlanProjectCompleted As CancelReviewConferencePlanProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelSignaturePlanCompleted As CancelSignaturePlanCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelSignaturePlanProjectCompleted As CancelSignaturePlanProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event ReMeetingPlanCompleted As ReMeetingPlanCompletedEventHandler
        
        '''<remarks/>
        Public Event ReLoanApplicationCompleted As ReLoanApplicationCompletedEventHandler
        
        '''<remarks/>
        Public Event FinishedSignaturePlanCompleted As FinishedSignaturePlanCompletedEventHandler
        
        '''<remarks/>
        Public Event rollbackTaskCompleted As rollbackTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event cancelProcessCompleted As cancelProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event SplitPrjoectCompleted As SplitPrjoectCompletedEventHandler
        
        '''<remarks/>
        Public Event deleteProcessCompleted As deleteProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event modifiyProcessCompleted As modifiyProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event consignTaskCompleted As consignTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelconsignTaskCompleted As CancelconsignTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event StartTaskByManualCompleted As StartTaskByManualCompletedEventHandler
        
        '''<remarks/>
        Public Event LookUpMessageCompleted As LookUpMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMessageCompleted As UpdateMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event LookUpWorkingCompleted As LookUpWorkingCompletedEventHandler
        
        '''<remarks/>
        Public Event LookUpWorkingExCompleted As LookUpWorkingExCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllBusinessTasksCompleted As GetAllBusinessTasksCompletedEventHandler
        
        '''<remarks/>
        Public Event LookUpStatusCompleted As LookUpStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRefundTypeCompleted As GetRefundTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRefundTypeCompleted As UpdateRefundTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoanProvideFormCompleted As GetLoanProvideFormCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLoanProvideFormCompleted As UpdateLoanProvideFormCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoanChargeMannerCompleted As GetLoanChargeMannerCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLoanChargeMannerCompleted As UpdateLoanChargeMannerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSystemIDCompleted As GetSystemIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSystemID1Completed As GetSystemID1CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectCreditQuality1Completed As FetchProjectCreditQuality1CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectAccountDetailCompleted As UpdateProjectAccountDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRefundCertificateInfoCompleted As GetRefundCertificateInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRefundCertificateCompleted As UpdateRefundCertificateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReturnReceiptInfoCompleted As GetReturnReceiptInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateReturnReceiptCompleted As UpdateReturnReceiptCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGuarantyStatusCompleted As GetGuarantyStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGuarantyStatusExCompleted As GetGuarantyStatusExCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateGuarantyStatusCompleted As UpdateGuarantyStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTerminateReportInfoCompleted As GetTerminateReportInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTerminateReportCompleted As UpdateTerminateReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectGuaranteeFormCompleted As GetProjectGuaranteeFormCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectGuaranteeFormCompleted As UpdateProjectGuaranteeFormCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectGuaranteeFormAddCompleted As GetProjectGuaranteeFormAddCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectGuaranteeFormAddCompleted As UpdateProjectGuaranteeFormAddCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSchemaCompleted As GetSchemaCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationAccountCompleted As FetchCorporationAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationAccount1Completed As FetchCorporationAccount1CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationLawsuitRecordCompleted As FetchCorporationLawsuitRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationRatepayingRecordCompleted As FetchCorporationRatepayingRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationBankSavingCompleted As FetchCorporationBankSavingCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationBusinessCompleted As FetchCorporationBusinessCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationExternalGuaranteeCompleted As FetchCorporationExternalGuaranteeCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationLoanCompleted As FetchCorporationLoanCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationStockStructureCompleted As FetchCorporationStockStructureCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectCorporationExCompleted As FetchProjectCorporationExCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectCorporationCompleted As FetchProjectCorporationCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchProjectCorporation1Completed As FetchProjectCorporation1CompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationPostalOrderCompleted As FetchCorporationPostalOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporationPostalOrderCompleted As UpdateCorporationPostalOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporationAccountCompleted As UpdateCorporationAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporationBankSavingCompleted As UpdateCorporationBankSavingCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporationLawsuitRecordCompleted As UpdateCorporationLawsuitRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporationRatepayingRecordCompleted As UpdateCorporationRatepayingRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporationBusinessCompleted As UpdateCorporationBusinessCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporationExternalGuaranteeCompleted As UpdateCorporationExternalGuaranteeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporationLoanCompleted As UpdateCorporationLoanCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporationStockStructureCompleted As UpdateCorporationStockStructureCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectCorporationCompleted As UpdateProjectCorporationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBranchCompleted As GetBranchCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateBranchCompleted As UpdateBranchCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountCompleted As GetAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationAccountCreditCompleted As FetchCorporationAccountCreditCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationAccountCreditExCompleted As FetchCorporationAccountCreditExCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationAccountCredit1Completed As FetchCorporationAccountCredit1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountExCompleted As GetAccountExCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCorporationAccountMonthCompleted As FetchCorporationAccountMonthCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAccountCompleted As UpdateAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCorporationTypeCompleted As GetCorporationTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporationTypeCompleted As UpdateCorporationTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrencyCompleted As GetCurrencyCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCurrencyCompleted As UpdateCurrencyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDistrictCompleted As GetDistrictCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDistrictCompleted As UpdateDistrictCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIndustryTypeCompleted As GetIndustryTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateIndustryTypeCompleted As UpdateIndustryTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInvestFormCompleted As GetInvestFormCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateInvestFormCompleted As UpdateInvestFormCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemCompleted As GetItemCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemTypeCompleted As GetItemTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemExCompleted As GetItemExCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateItemCompleted As UpdateItemCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateItemTypeCompleted As UpdateItemTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoanTypeCompleted As GetLoanTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLoanTypeCompleted As UpdateLoanTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOppositeGuaranteeFormCompleted As GetOppositeGuaranteeFormCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOppositeGuaranteeFormCompleted As UpdateOppositeGuaranteeFormCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectAccountCompleted As GetProjectAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectAccountCompleted As UpdateProjectAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectDocumentByConditionCompleted As GetProjectDocumentByConditionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectDocumentCompleted As GetProjectDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectDocumentCompleted As UpdateProjectDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectTaskCompleted As GetProjectTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectTaskCompleted As UpdateProjectTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProprietorshipTypeCompleted As GetProprietorshipTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProprietorshipTypeCompleted As UpdateProprietorshipTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRecommendTypeCompleted As GetRecommendTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRecommendTypeCompleted As UpdateRecommendTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRecordTypeCompleted As GetRecordTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRecordTypeCompleted As UpdateRecordTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRoleCompleted As GetRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRoleCompleted As UpdateRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateStaffRoleCompleted As UpdateStaffRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetServiceTypeCompleted As GetServiceTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateServiceTypeCompleted As UpdateServiceTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskTemplateCompleted As GetTaskTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event ScanTimingTaskCompleted As ScanTimingTaskCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaxContractNumCompleted As GetMaxContractNumCompletedEventHandler
        
        '''<remarks/>
        Public Event FQueryProjectExpandDateCompleted As FQueryProjectExpandDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectExpandDateInfoCompleted As GetProjectExpandDateInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectExpandDateCompleted As UpdateProjectExpandDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectContractCarElementInfoCompleted As GetProjectContractCarElementInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectContractCarElementCompleted As UpdateProjectContractCarElementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectContractChattelElementInfoCompleted As GetProjectContractChattelElementInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectContractChattelElementCompleted As UpdateProjectContractChattelElementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectContractEstateElementInfoCompleted As GetProjectContractEstateElementInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectContractEstateElementCompleted As UpdateProjectContractEstateElementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectContractElementInfoCompleted As GetProjectContractElementInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectContractElementCompleted As UpdateProjectContractElementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAppraisementInfoCompleted As GetAppraisementInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAppraisementCompleted As UpdateAppraisementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWorkflowTypeInfoCompleted As GetWorkflowTypeInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWorkflowTypeCompleted As UpdateWorkflowTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDdGuarantyStatusInfoCompleted As GetDdGuarantyStatusInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDdGuarantyStatusCompleted As UpdateDdGuarantyStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAlarmCodeCompleted As GetAlarmCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAlarmCode1Completed As GetAlarmCode1CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAlarmCodeCompleted As UpdateAlarmCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWorkTypeCompleted As GetWorkTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWorkTypeCompleted As UpdateWorkTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWorkSubTypeCompleted As GetWorkSubTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWorkSubType1Completed As GetWorkSubType1CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWorkSubTypeCompleted As UpdateWorkSubTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAlarmTypeCompleted As GetAlarmTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAlarmTypeCompleted As UpdateAlarmTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCorporatioRelationTypeCompleted As GetCorporatioRelationTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporatioRelationTypeCompleted As UpdateCorporatioRelationTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCooperateOrganizationCompleted As GetCooperateOrganizationCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCooperateOrganizationCompleted As UpdateCooperateOrganizationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCooperateOrganizationOpinionCompleted As GetCooperateOrganizationOpinionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCooperateOrganizationOpinionCompleted As UpdateCooperateOrganizationOpinionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHolidayInfoCompleted As GetHolidayInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateHolidayCompleted As UpdateHolidayCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTracePlanInfoCompleted As GetTracePlanInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTracePlanCompleted As UpdateTracePlanCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectTaskAttendeeInfoCompleted As GetProjectTaskAttendeeInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectTaskAttendeeCompleted As UpdateProjectTaskAttendeeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBankInfoCompleted As GetBankInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateBankCompleted As UpdateBankCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateBankBranchCompleted As UpdateBankBranchCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateBankAndBranchCompleted As UpdateBankAndBranchCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectGuaranteeFormAdditionalCompleted As GetProjectGuaranteeFormAdditionalCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateGuaranteeFormCompleted As UpdateGuaranteeFormCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateGuaranteeFormAdditionalCompleted As UpdateGuaranteeFormAdditionalCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCheckRecordInfoCompleted As GetCheckRecordInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCheckRecordAlarmCompleted As UpdateCheckRecordAlarmCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConferenceInfoCompleted As GetConferenceInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateConferenceCommitteemanCompleted As UpdateConferenceCommitteemanCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConfTrialInfoCompleted As GetConfTrialInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateConfTrialCompleted As UpdateConfTrialCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCooperateOpinionInfoCompleted As GetCooperateOpinionInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCooperateOpinionCompleted As UpdateCooperateOpinionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCorpDefectInfoCompleted As GetCorpDefectInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorpDefectCompleted As UpdateCorpDefectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectCodeCompleted As GetProjectCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCorporationMaxCodeCompleted As GetCorporationMaxCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCorporationMaxCode_GuaranteeCompleted As GetCorporationMaxCode_GuaranteeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetcorporationInfoCompleted As GetcorporationInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorConCompleted As UpdateCorConCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCorporationAndProjectCorporationCompleted As UpdateCorporationAndProjectCorporationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGuarantyInfoCompleted As GetGuarantyInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaxGuarantyNumCompleted As GetMaxGuarantyNumCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaxSerialIDCompleted As GetMaxSerialIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaxAppraisementNumCompleted As GetMaxAppraisementNumCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaxCheckRecordNumCompleted As GetMaxCheckRecordNumCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaxConferenceCodeNumCompleted As GetMaxConferenceCodeNumCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateGuarantyCompleted As UpdateGuarantyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIntentLetterInfoCompleted As GetIntentLetterInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateIntentLetterCompleted As UpdateIntentLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInvestigationInfoCompleted As GetInvestigationInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateInvestigationCompleted As UpdateInvestigationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoanNoticeInfoCompleted As GetLoanNoticeInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLoanNoticeCompleted As UpdateLoanNoticeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProcessInfoCompleted As GetProcessInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProcessCompleted As UpdateProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectInfoCompleted As GetProjectInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProjectCompleted As UpdateProjectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaxProjectAccountDetailNumCompleted As GetMaxProjectAccountDetailNumCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProjectAccountDetailInfoCompleted As GetProjectAccountDetailInfoCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteProjectFinanceAnalyse", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteProjectFinanceAnalyse(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteProjectFinanceAnalyse", New Object() {ProjectNo, CorporationNo, Phase})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteProjectFinanceAnalyse(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteProjectFinanceAnalyse", New Object() {ProjectNo, CorporationNo, Phase}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteProjectFinanceAnalyse(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteProjectFinanceAnalyseAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String)
            Me.DeleteProjectFinanceAnalyseAsync(ProjectNo, CorporationNo, Phase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteProjectFinanceAnalyseAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal userState As Object)
            If (Me.DeleteProjectFinanceAnalyseOperationCompleted Is Nothing) Then
                Me.DeleteProjectFinanceAnalyseOperationCompleted = AddressOf Me.OnDeleteProjectFinanceAnalyseOperationCompleted
            End If
            Me.InvokeAsync("DeleteProjectFinanceAnalyse", New Object() {ProjectNo, CorporationNo, Phase}, Me.DeleteProjectFinanceAnalyseOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteProjectFinanceAnalyseOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteProjectFinanceAnalyseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteProjectFinanceAnalyseCompleted(Me, New DeleteProjectFinanceAnalyseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateProcessEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function updateProcessEx() As String
            Dim results() As Object = Me.Invoke("updateProcessEx", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginupdateProcessEx(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("updateProcessEx", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndupdateProcessEx(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updateProcessExAsync()
            Me.updateProcessExAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updateProcessExAsync(ByVal userState As Object)
            If (Me.updateProcessExOperationCompleted Is Nothing) Then
                Me.updateProcessExOperationCompleted = AddressOf Me.OnupdateProcessExOperationCompleted
            End If
            Me.InvokeAsync("updateProcessEx", New Object(-1) {}, Me.updateProcessExOperationCompleted, userState)
        End Sub
        
        Private Sub OnupdateProcessExOperationCompleted(ByVal arg As Object)
            If (Not (Me.updateProcessExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updateProcessExCompleted(Me, New updateProcessExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="updateProcessEx1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateProcessExByCode", RequestElementName:="updateProcessExByCode", RequestNamespace:="http://tempuri.org/", ResponseElementName:="updateProcessExByCodeResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function updateProcessEx(ByVal ProjectCode As String) As <System.Xml.Serialization.XmlElementAttribute("updateProcessExByCodeResult")> String
            Dim results() As Object = Me.Invoke("updateProcessEx1", New Object() {ProjectCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginupdateProcessEx1(ByVal ProjectCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("updateProcessEx1", New Object() {ProjectCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndupdateProcessEx1(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updateProcessEx1Async(ByVal ProjectCode As String)
            Me.updateProcessEx1Async(ProjectCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updateProcessEx1Async(ByVal ProjectCode As String, ByVal userState As Object)
            If (Me.updateProcessEx1OperationCompleted Is Nothing) Then
                Me.updateProcessEx1OperationCompleted = AddressOf Me.OnupdateProcessEx1OperationCompleted
            End If
            Me.InvokeAsync("updateProcessEx1", New Object() {ProjectCode}, Me.updateProcessEx1OperationCompleted, userState)
        End Sub
        
        Private Sub OnupdateProcessEx1OperationCompleted(ByVal arg As Object)
            If (Not (Me.updateProcessEx1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updateProcessEx1Completed(Me, New updateProcessEx1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPostAndJobResponsibilityInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPostAndJobResponsibilityInfo(ByVal strSQL_Condition_Post As String, ByVal strSQL_Condition_JobResponsibility As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPostAndJobResponsibilityInfo", New Object() {strSQL_Condition_Post, strSQL_Condition_JobResponsibility})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPostAndJobResponsibilityInfo(ByVal strSQL_Condition_Post As String, ByVal strSQL_Condition_JobResponsibility As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPostAndJobResponsibilityInfo", New Object() {strSQL_Condition_Post, strSQL_Condition_JobResponsibility}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPostAndJobResponsibilityInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPostAndJobResponsibilityInfoAsync(ByVal strSQL_Condition_Post As String, ByVal strSQL_Condition_JobResponsibility As String)
            Me.GetPostAndJobResponsibilityInfoAsync(strSQL_Condition_Post, strSQL_Condition_JobResponsibility, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPostAndJobResponsibilityInfoAsync(ByVal strSQL_Condition_Post As String, ByVal strSQL_Condition_JobResponsibility As String, ByVal userState As Object)
            If (Me.GetPostAndJobResponsibilityInfoOperationCompleted Is Nothing) Then
                Me.GetPostAndJobResponsibilityInfoOperationCompleted = AddressOf Me.OnGetPostAndJobResponsibilityInfoOperationCompleted
            End If
            Me.InvokeAsync("GetPostAndJobResponsibilityInfo", New Object() {strSQL_Condition_Post, strSQL_Condition_JobResponsibility}, Me.GetPostAndJobResponsibilityInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPostAndJobResponsibilityInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPostAndJobResponsibilityInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPostAndJobResponsibilityInfoCompleted(Me, New GetPostAndJobResponsibilityInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePostAndJobResponsibility", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePostAndJobResponsibility(ByVal commitSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdatePostAndJobResponsibility", New Object() {commitSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdatePostAndJobResponsibility(ByVal commitSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdatePostAndJobResponsibility", New Object() {commitSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdatePostAndJobResponsibility(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePostAndJobResponsibilityAsync(ByVal commitSet As System.Data.DataSet)
            Me.UpdatePostAndJobResponsibilityAsync(commitSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePostAndJobResponsibilityAsync(ByVal commitSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdatePostAndJobResponsibilityOperationCompleted Is Nothing) Then
                Me.UpdatePostAndJobResponsibilityOperationCompleted = AddressOf Me.OnUpdatePostAndJobResponsibilityOperationCompleted
            End If
            Me.InvokeAsync("UpdatePostAndJobResponsibility", New Object() {commitSet}, Me.UpdatePostAndJobResponsibilityOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePostAndJobResponsibilityOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePostAndJobResponsibilityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePostAndJobResponsibilityCompleted(Me, New UpdatePostAndJobResponsibilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserPostInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserPostInfo(ByVal strSQL_Condition_UserPost As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserPostInfo", New Object() {strSQL_Condition_UserPost})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUserPostInfo(ByVal strSQL_Condition_UserPost As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUserPostInfo", New Object() {strSQL_Condition_UserPost}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUserPostInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserPostInfoAsync(ByVal strSQL_Condition_UserPost As String)
            Me.GetUserPostInfoAsync(strSQL_Condition_UserPost, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserPostInfoAsync(ByVal strSQL_Condition_UserPost As String, ByVal userState As Object)
            If (Me.GetUserPostInfoOperationCompleted Is Nothing) Then
                Me.GetUserPostInfoOperationCompleted = AddressOf Me.OnGetUserPostInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUserPostInfo", New Object() {strSQL_Condition_UserPost}, Me.GetUserPostInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserPostInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserPostInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserPostInfoCompleted(Me, New GetUserPostInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserPost", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUserPost(ByVal UserPostSet As System.Data.DataSet) As Object
            Dim results() As Object = Me.Invoke("UpdateUserPost", New Object() {UserPostSet})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateUserPost(ByVal UserPostSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateUserPost", New Object() {UserPostSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateUserPost(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUserPostAsync(ByVal UserPostSet As System.Data.DataSet)
            Me.UpdateUserPostAsync(UserPostSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserPostAsync(ByVal UserPostSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateUserPostOperationCompleted Is Nothing) Then
                Me.UpdateUserPostOperationCompleted = AddressOf Me.OnUpdateUserPostOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserPost", New Object() {UserPostSet}, Me.UpdateUserPostOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserPostOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserPostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserPostCompleted(Me, New UpdateUserPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobPeriodInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobPeriodInfo(ByVal strSQL_Condition_JobPeriod As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobPeriodInfo", New Object() {strSQL_Condition_JobPeriod})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetJobPeriodInfo(ByVal strSQL_Condition_JobPeriod As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetJobPeriodInfo", New Object() {strSQL_Condition_JobPeriod}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetJobPeriodInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobPeriodInfoAsync(ByVal strSQL_Condition_JobPeriod As String)
            Me.GetJobPeriodInfoAsync(strSQL_Condition_JobPeriod, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobPeriodInfoAsync(ByVal strSQL_Condition_JobPeriod As String, ByVal userState As Object)
            If (Me.GetJobPeriodInfoOperationCompleted Is Nothing) Then
                Me.GetJobPeriodInfoOperationCompleted = AddressOf Me.OnGetJobPeriodInfoOperationCompleted
            End If
            Me.InvokeAsync("GetJobPeriodInfo", New Object() {strSQL_Condition_JobPeriod}, Me.GetJobPeriodInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobPeriodInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobPeriodInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobPeriodInfoCompleted(Me, New GetJobPeriodInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateJobPeriod", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateJobPeriod(ByVal JobPeriodSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateJobPeriod", New Object() {JobPeriodSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateJobPeriod(ByVal JobPeriodSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateJobPeriod", New Object() {JobPeriodSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateJobPeriod(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateJobPeriodAsync(ByVal JobPeriodSet As System.Data.DataSet)
            Me.UpdateJobPeriodAsync(JobPeriodSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateJobPeriodAsync(ByVal JobPeriodSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateJobPeriodOperationCompleted Is Nothing) Then
                Me.UpdateJobPeriodOperationCompleted = AddressOf Me.OnUpdateJobPeriodOperationCompleted
            End If
            Me.InvokeAsync("UpdateJobPeriod", New Object() {JobPeriodSet}, Me.UpdateJobPeriodOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateJobPeriodOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateJobPeriodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateJobPeriodCompleted(Me, New UpdateJobPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkingHours", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWorkingHours(ByVal staff_name As String, ByVal start_date As Object, ByVal end_date As Object, ByVal period As String, ByVal statisticsType As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWorkingHours", New Object() {staff_name, start_date, end_date, period, statisticsType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWorkingHours(ByVal staff_name As String, ByVal start_date As Object, ByVal end_date As Object, ByVal period As String, ByVal statisticsType As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWorkingHours", New Object() {staff_name, start_date, end_date, period, statisticsType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWorkingHours(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWorkingHoursAsync(ByVal staff_name As String, ByVal start_date As Object, ByVal end_date As Object, ByVal period As String, ByVal statisticsType As Integer)
            Me.GetWorkingHoursAsync(staff_name, start_date, end_date, period, statisticsType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWorkingHoursAsync(ByVal staff_name As String, ByVal start_date As Object, ByVal end_date As Object, ByVal period As String, ByVal statisticsType As Integer, ByVal userState As Object)
            If (Me.GetWorkingHoursOperationCompleted Is Nothing) Then
                Me.GetWorkingHoursOperationCompleted = AddressOf Me.OnGetWorkingHoursOperationCompleted
            End If
            Me.InvokeAsync("GetWorkingHours", New Object() {staff_name, start_date, end_date, period, statisticsType}, Me.GetWorkingHoursOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWorkingHoursOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWorkingHoursCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWorkingHoursCompleted(Me, New GetWorkingHoursCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMoneyInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMoneyInfo(ByVal moneyID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMoneyInfo", New Object() {moneyID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMoneyInfo(ByVal moneyID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMoneyInfo", New Object() {moneyID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMoneyInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMoneyInfoAsync(ByVal moneyID As String)
            Me.GetMoneyInfoAsync(moneyID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMoneyInfoAsync(ByVal moneyID As String, ByVal userState As Object)
            If (Me.GetMoneyInfoOperationCompleted Is Nothing) Then
                Me.GetMoneyInfoOperationCompleted = AddressOf Me.OnGetMoneyInfoOperationCompleted
            End If
            Me.InvokeAsync("GetMoneyInfo", New Object() {moneyID}, Me.GetMoneyInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMoneyInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMoneyInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMoneyInfoCompleted(Me, New GetMoneyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateMoney", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMoney(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateMoney", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateMoney(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateMoney", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateMoney(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMoneyAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateMoneyAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMoneyAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateMoneyOperationCompleted Is Nothing) Then
                Me.UpdateMoneyOperationCompleted = AddressOf Me.OnUpdateMoneyOperationCompleted
            End If
            Me.InvokeAsync("UpdateMoney", New Object() {dstCommit}, Me.UpdateMoneyOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMoneyOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMoneyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMoneyCompleted(Me, New UpdateMoneyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryOppGuarantInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQueryOppGuarantInfo(ByVal projectCode As String, ByVal corporationName As String, ByVal oppForm As String, ByVal oppStatus As String, ByVal itemType As String, ByVal itemCodeFirst As String, ByVal itemValueFirst As String, ByVal itemCodeSecond As String, ByVal itemValueSecond As String, ByVal startDate As String, ByVal endDate As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQueryOppGuarantInfo", New Object() {projectCode, corporationName, oppForm, oppStatus, itemType, itemCodeFirst, itemValueFirst, itemCodeSecond, itemValueSecond, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQueryOppGuarantInfo(ByVal projectCode As String, ByVal corporationName As String, ByVal oppForm As String, ByVal oppStatus As String, ByVal itemType As String, ByVal itemCodeFirst As String, ByVal itemValueFirst As String, ByVal itemCodeSecond As String, ByVal itemValueSecond As String, ByVal startDate As String, ByVal endDate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQueryOppGuarantInfo", New Object() {projectCode, corporationName, oppForm, oppStatus, itemType, itemCodeFirst, itemValueFirst, itemCodeSecond, itemValueSecond, startDate, endDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQueryOppGuarantInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQueryOppGuarantInfoAsync(ByVal projectCode As String, ByVal corporationName As String, ByVal oppForm As String, ByVal oppStatus As String, ByVal itemType As String, ByVal itemCodeFirst As String, ByVal itemValueFirst As String, ByVal itemCodeSecond As String, ByVal itemValueSecond As String, ByVal startDate As String, ByVal endDate As String)
            Me.GetQueryOppGuarantInfoAsync(projectCode, corporationName, oppForm, oppStatus, itemType, itemCodeFirst, itemValueFirst, itemCodeSecond, itemValueSecond, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryOppGuarantInfoAsync(ByVal projectCode As String, ByVal corporationName As String, ByVal oppForm As String, ByVal oppStatus As String, ByVal itemType As String, ByVal itemCodeFirst As String, ByVal itemValueFirst As String, ByVal itemCodeSecond As String, ByVal itemValueSecond As String, ByVal startDate As String, ByVal endDate As String, ByVal userState As Object)
            If (Me.GetQueryOppGuarantInfoOperationCompleted Is Nothing) Then
                Me.GetQueryOppGuarantInfoOperationCompleted = AddressOf Me.OnGetQueryOppGuarantInfoOperationCompleted
            End If
            Me.InvokeAsync("GetQueryOppGuarantInfo", New Object() {projectCode, corporationName, oppForm, oppStatus, itemType, itemCodeFirst, itemValueFirst, itemCodeSecond, itemValueSecond, startDate, endDate}, Me.GetQueryOppGuarantInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryOppGuarantInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryOppGuarantInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryOppGuarantInfoCompleted(Me, New GetQueryOppGuarantInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGuarantingCorporationList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGuarantingCorporationList(ByVal start_date As Object, ByVal end_date As Object) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetGuarantingCorporationList", New Object() {start_date, end_date})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetGuarantingCorporationList(ByVal start_date As Object, ByVal end_date As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetGuarantingCorporationList", New Object() {start_date, end_date}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetGuarantingCorporationList(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGuarantingCorporationListAsync(ByVal start_date As Object, ByVal end_date As Object)
            Me.GetGuarantingCorporationListAsync(start_date, end_date, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGuarantingCorporationListAsync(ByVal start_date As Object, ByVal end_date As Object, ByVal userState As Object)
            If (Me.GetGuarantingCorporationListOperationCompleted Is Nothing) Then
                Me.GetGuarantingCorporationListOperationCompleted = AddressOf Me.OnGetGuarantingCorporationListOperationCompleted
            End If
            Me.InvokeAsync("GetGuarantingCorporationList", New Object() {start_date, end_date}, Me.GetGuarantingCorporationListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGuarantingCorporationListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGuarantingCorporationListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGuarantingCorporationListCompleted(Me, New GetGuarantingCorporationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchConfernceRoom", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchConfernceRoom(ByVal ConfernceRoomID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchConfernceRoom", New Object() {ConfernceRoomID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchConfernceRoom(ByVal ConfernceRoomID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchConfernceRoom", New Object() {ConfernceRoomID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchConfernceRoom(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchConfernceRoomAsync(ByVal ConfernceRoomID As String)
            Me.FetchConfernceRoomAsync(ConfernceRoomID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchConfernceRoomAsync(ByVal ConfernceRoomID As String, ByVal userState As Object)
            If (Me.FetchConfernceRoomOperationCompleted Is Nothing) Then
                Me.FetchConfernceRoomOperationCompleted = AddressOf Me.OnFetchConfernceRoomOperationCompleted
            End If
            Me.InvokeAsync("FetchConfernceRoom", New Object() {ConfernceRoomID}, Me.FetchConfernceRoomOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchConfernceRoomOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchConfernceRoomCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchConfernceRoomCompleted(Me, New FetchConfernceRoomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateConfernceRoom", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateConfernceRoom(ByVal dstCommit As System.Data.DataSet) As Integer
            Dim results() As Object = Me.Invoke("UpdateConfernceRoom", New Object() {dstCommit})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateConfernceRoom(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateConfernceRoom", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateConfernceRoom(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateConfernceRoomAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateConfernceRoomAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateConfernceRoomAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateConfernceRoomOperationCompleted Is Nothing) Then
                Me.UpdateConfernceRoomOperationCompleted = AddressOf Me.OnUpdateConfernceRoomOperationCompleted
            End If
            Me.InvokeAsync("UpdateConfernceRoom", New Object() {dstCommit}, Me.UpdateConfernceRoomOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateConfernceRoomOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateConfernceRoomCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateConfernceRoomCompleted(Me, New UpdateConfernceRoomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryStatisticsCompensation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryStatisticsCompensation(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryStatisticsCompensation", New Object() {StartYear, EndYearMonth, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryStatisticsCompensation(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryStatisticsCompensation", New Object() {StartYear, EndYearMonth, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryStatisticsCompensation(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsCompensationAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String)
            Me.FQueryStatisticsCompensationAsync(StartYear, EndYearMonth, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsCompensationAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryStatisticsCompensationOperationCompleted Is Nothing) Then
                Me.FQueryStatisticsCompensationOperationCompleted = AddressOf Me.OnFQueryStatisticsCompensationOperationCompleted
            End If
            Me.InvokeAsync("FQueryStatisticsCompensation", New Object() {StartYear, EndYearMonth, userName}, Me.FQueryStatisticsCompensationOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryStatisticsCompensationOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryStatisticsCompensationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryStatisticsCompensationCompleted(Me, New FQueryStatisticsCompensationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryStatisticsGEProprietorship", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryStatisticsGEProprietorship(ByVal StartYear As String, ByVal EndYearMonth As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryStatisticsGEProprietorship", New Object() {StartYear, EndYearMonth})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryStatisticsGEProprietorship(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryStatisticsGEProprietorship", New Object() {StartYear, EndYearMonth}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryStatisticsGEProprietorship(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsGEProprietorshipAsync(ByVal StartYear As String, ByVal EndYearMonth As String)
            Me.FQueryStatisticsGEProprietorshipAsync(StartYear, EndYearMonth, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsGEProprietorshipAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userState As Object)
            If (Me.FQueryStatisticsGEProprietorshipOperationCompleted Is Nothing) Then
                Me.FQueryStatisticsGEProprietorshipOperationCompleted = AddressOf Me.OnFQueryStatisticsGEProprietorshipOperationCompleted
            End If
            Me.InvokeAsync("FQueryStatisticsGEProprietorship", New Object() {StartYear, EndYearMonth}, Me.FQueryStatisticsGEProprietorshipOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryStatisticsGEProprietorshipOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryStatisticsGEProprietorshipCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryStatisticsGEProprietorshipCompleted(Me, New FQueryStatisticsGEProprietorshipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryStatisticsRegion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryStatisticsRegion(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryStatisticsRegion", New Object() {StartYear, EndYearMonth, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryStatisticsRegion(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryStatisticsRegion", New Object() {StartYear, EndYearMonth, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryStatisticsRegion(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsRegionAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String)
            Me.FQueryStatisticsRegionAsync(StartYear, EndYearMonth, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsRegionAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryStatisticsRegionOperationCompleted Is Nothing) Then
                Me.FQueryStatisticsRegionOperationCompleted = AddressOf Me.OnFQueryStatisticsRegionOperationCompleted
            End If
            Me.InvokeAsync("FQueryStatisticsRegion", New Object() {StartYear, EndYearMonth, userName}, Me.FQueryStatisticsRegionOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryStatisticsRegionOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryStatisticsRegionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryStatisticsRegionCompleted(Me, New FQueryStatisticsRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryStatisticsCounterguaranteeByMonth", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryStatisticsCounterguaranteeByMonth(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryStatisticsCounterguaranteeByMonth", New Object() {StartYear, EndYearMonth, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryStatisticsCounterguaranteeByMonth(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryStatisticsCounterguaranteeByMonth", New Object() {StartYear, EndYearMonth, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryStatisticsCounterguaranteeByMonth(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsCounterguaranteeByMonthAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String)
            Me.FQueryStatisticsCounterguaranteeByMonthAsync(StartYear, EndYearMonth, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsCounterguaranteeByMonthAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryStatisticsCounterguaranteeByMonthOperationCompleted Is Nothing) Then
                Me.FQueryStatisticsCounterguaranteeByMonthOperationCompleted = AddressOf Me.OnFQueryStatisticsCounterguaranteeByMonthOperationCompleted
            End If
            Me.InvokeAsync("FQueryStatisticsCounterguaranteeByMonth", New Object() {StartYear, EndYearMonth, userName}, Me.FQueryStatisticsCounterguaranteeByMonthOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryStatisticsCounterguaranteeByMonthOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryStatisticsCounterguaranteeByMonthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryStatisticsCounterguaranteeByMonthCompleted(Me, New FQueryStatisticsCounterguaranteeByMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryStatisticsCounterguaranteeByYear", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryStatisticsCounterguaranteeByYear(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryStatisticsCounterguaranteeByYear", New Object() {StartYear, EndYearMonth, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryStatisticsCounterguaranteeByYear(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryStatisticsCounterguaranteeByYear", New Object() {StartYear, EndYearMonth, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryStatisticsCounterguaranteeByYear(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsCounterguaranteeByYearAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String)
            Me.FQueryStatisticsCounterguaranteeByYearAsync(StartYear, EndYearMonth, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsCounterguaranteeByYearAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryStatisticsCounterguaranteeByYearOperationCompleted Is Nothing) Then
                Me.FQueryStatisticsCounterguaranteeByYearOperationCompleted = AddressOf Me.OnFQueryStatisticsCounterguaranteeByYearOperationCompleted
            End If
            Me.InvokeAsync("FQueryStatisticsCounterguaranteeByYear", New Object() {StartYear, EndYearMonth, userName}, Me.FQueryStatisticsCounterguaranteeByYearOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryStatisticsCounterguaranteeByYearOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryStatisticsCounterguaranteeByYearCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryStatisticsCounterguaranteeByYearCompleted(Me, New FQueryStatisticsCounterguaranteeByYearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryStatisticsPMService", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryStatisticsPMService(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal ManagerA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryStatisticsPMService", New Object() {StartYear, EndYearMonth, ManagerA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryStatisticsPMService(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal ManagerA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryStatisticsPMService", New Object() {StartYear, EndYearMonth, ManagerA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryStatisticsPMService(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsPMServiceAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal ManagerA As String, ByVal userName As String)
            Me.FQueryStatisticsPMServiceAsync(StartYear, EndYearMonth, ManagerA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsPMServiceAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal ManagerA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryStatisticsPMServiceOperationCompleted Is Nothing) Then
                Me.FQueryStatisticsPMServiceOperationCompleted = AddressOf Me.OnFQueryStatisticsPMServiceOperationCompleted
            End If
            Me.InvokeAsync("FQueryStatisticsPMService", New Object() {StartYear, EndYearMonth, ManagerA, userName}, Me.FQueryStatisticsPMServiceOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryStatisticsPMServiceOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryStatisticsPMServiceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryStatisticsPMServiceCompleted(Me, New FQueryStatisticsPMServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PStatisticsByType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PStatisticsByType(ByVal month_start As String, ByVal month_end As String, ByVal sRange As String, ByVal sType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PStatisticsByType", New Object() {month_start, month_end, sRange, sType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPStatisticsByType(ByVal month_start As String, ByVal month_end As String, ByVal sRange As String, ByVal sType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PStatisticsByType", New Object() {month_start, month_end, sRange, sType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPStatisticsByType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PStatisticsByTypeAsync(ByVal month_start As String, ByVal month_end As String, ByVal sRange As String, ByVal sType As String)
            Me.PStatisticsByTypeAsync(month_start, month_end, sRange, sType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PStatisticsByTypeAsync(ByVal month_start As String, ByVal month_end As String, ByVal sRange As String, ByVal sType As String, ByVal userState As Object)
            If (Me.PStatisticsByTypeOperationCompleted Is Nothing) Then
                Me.PStatisticsByTypeOperationCompleted = AddressOf Me.OnPStatisticsByTypeOperationCompleted
            End If
            Me.InvokeAsync("PStatisticsByType", New Object() {month_start, month_end, sRange, sType}, Me.PStatisticsByTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnPStatisticsByTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.PStatisticsByTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PStatisticsByTypeCompleted(Me, New PStatisticsByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PStatisticsByTypeEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PStatisticsByTypeEx(ByVal procedureName As String, ByVal month_start As String, ByVal month_end As String, ByVal sRange As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PStatisticsByTypeEx", New Object() {procedureName, month_start, month_end, sRange, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPStatisticsByTypeEx(ByVal procedureName As String, ByVal month_start As String, ByVal month_end As String, ByVal sRange As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PStatisticsByTypeEx", New Object() {procedureName, month_start, month_end, sRange, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPStatisticsByTypeEx(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PStatisticsByTypeExAsync(ByVal procedureName As String, ByVal month_start As String, ByVal month_end As String, ByVal sRange As String, ByVal userName As String)
            Me.PStatisticsByTypeExAsync(procedureName, month_start, month_end, sRange, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PStatisticsByTypeExAsync(ByVal procedureName As String, ByVal month_start As String, ByVal month_end As String, ByVal sRange As String, ByVal userName As String, ByVal userState As Object)
            If (Me.PStatisticsByTypeExOperationCompleted Is Nothing) Then
                Me.PStatisticsByTypeExOperationCompleted = AddressOf Me.OnPStatisticsByTypeExOperationCompleted
            End If
            Me.InvokeAsync("PStatisticsByTypeEx", New Object() {procedureName, month_start, month_end, sRange, userName}, Me.PStatisticsByTypeExOperationCompleted, userState)
        End Sub
        
        Private Sub OnPStatisticsByTypeExOperationCompleted(ByVal arg As Object)
            If (Not (Me.PStatisticsByTypeExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PStatisticsByTypeExCompleted(Me, New PStatisticsByTypeExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryWorkLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryWorkLog(ByVal QueryType As String, ByVal DateStart As Date, ByVal DateEnd As Date, ByVal AttendPerson As String, ByVal PostName As String, ByVal Responsibility As String, ByVal TaskName As String, ByVal Period As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryWorkLog", New Object() {QueryType, DateStart, DateEnd, AttendPerson, PostName, Responsibility, TaskName, Period})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryWorkLog(ByVal QueryType As String, ByVal DateStart As Date, ByVal DateEnd As Date, ByVal AttendPerson As String, ByVal PostName As String, ByVal Responsibility As String, ByVal TaskName As String, ByVal Period As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryWorkLog", New Object() {QueryType, DateStart, DateEnd, AttendPerson, PostName, Responsibility, TaskName, Period}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryWorkLog(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryWorkLogAsync(ByVal QueryType As String, ByVal DateStart As Date, ByVal DateEnd As Date, ByVal AttendPerson As String, ByVal PostName As String, ByVal Responsibility As String, ByVal TaskName As String, ByVal Period As String)
            Me.PQueryWorkLogAsync(QueryType, DateStart, DateEnd, AttendPerson, PostName, Responsibility, TaskName, Period, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryWorkLogAsync(ByVal QueryType As String, ByVal DateStart As Date, ByVal DateEnd As Date, ByVal AttendPerson As String, ByVal PostName As String, ByVal Responsibility As String, ByVal TaskName As String, ByVal Period As String, ByVal userState As Object)
            If (Me.PQueryWorkLogOperationCompleted Is Nothing) Then
                Me.PQueryWorkLogOperationCompleted = AddressOf Me.OnPQueryWorkLogOperationCompleted
            End If
            Me.InvokeAsync("PQueryWorkLog", New Object() {QueryType, DateStart, DateEnd, AttendPerson, PostName, Responsibility, TaskName, Period}, Me.PQueryWorkLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryWorkLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryWorkLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryWorkLogCompleted(Me, New PQueryWorkLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryStatisticsGECraft", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryStatisticsGECraft(ByVal StartYear As String, ByVal EndYearMonth As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryStatisticsGECraft", New Object() {StartYear, EndYearMonth})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryStatisticsGECraft(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryStatisticsGECraft", New Object() {StartYear, EndYearMonth}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryStatisticsGECraft(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsGECraftAsync(ByVal StartYear As String, ByVal EndYearMonth As String)
            Me.FQueryStatisticsGECraftAsync(StartYear, EndYearMonth, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryStatisticsGECraftAsync(ByVal StartYear As String, ByVal EndYearMonth As String, ByVal userState As Object)
            If (Me.FQueryStatisticsGECraftOperationCompleted Is Nothing) Then
                Me.FQueryStatisticsGECraftOperationCompleted = AddressOf Me.OnFQueryStatisticsGECraftOperationCompleted
            End If
            Me.InvokeAsync("FQueryStatisticsGECraft", New Object() {StartYear, EndYearMonth}, Me.FQueryStatisticsGECraftOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryStatisticsGECraftOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryStatisticsGECraftCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryStatisticsGECraftCompleted(Me, New FQueryStatisticsGECraftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryStatisticsMarketingA", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryStatisticsMarketingA(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal Branch As String, ByVal serviceType As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryStatisticsMarketingA", New Object() {DateStart, DateEnd, Branch, serviceType, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryStatisticsMarketingA(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal Branch As String, ByVal serviceType As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryStatisticsMarketingA", New Object() {DateStart, DateEnd, Branch, serviceType, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryStatisticsMarketingA(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsMarketingAAsync(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal Branch As String, ByVal serviceType As String, ByVal userName As String)
            Me.PQueryStatisticsMarketingAAsync(DateStart, DateEnd, Branch, serviceType, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsMarketingAAsync(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal Branch As String, ByVal serviceType As String, ByVal userName As String, ByVal userState As Object)
            If (Me.PQueryStatisticsMarketingAOperationCompleted Is Nothing) Then
                Me.PQueryStatisticsMarketingAOperationCompleted = AddressOf Me.OnPQueryStatisticsMarketingAOperationCompleted
            End If
            Me.InvokeAsync("PQueryStatisticsMarketingA", New Object() {DateStart, DateEnd, Branch, serviceType, userName}, Me.PQueryStatisticsMarketingAOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryStatisticsMarketingAOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryStatisticsMarketingACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryStatisticsMarketingACompleted(Me, New PQueryStatisticsMarketingACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryStatisticsMarketingB", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryStatisticsMarketingB(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal phase As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryStatisticsMarketingB", New Object() {DateStart, DateEnd, phase, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryStatisticsMarketingB(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal phase As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryStatisticsMarketingB", New Object() {DateStart, DateEnd, phase, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryStatisticsMarketingB(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsMarketingBAsync(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal phase As String, ByVal userName As String)
            Me.PQueryStatisticsMarketingBAsync(DateStart, DateEnd, phase, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsMarketingBAsync(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal phase As String, ByVal userName As String, ByVal userState As Object)
            If (Me.PQueryStatisticsMarketingBOperationCompleted Is Nothing) Then
                Me.PQueryStatisticsMarketingBOperationCompleted = AddressOf Me.OnPQueryStatisticsMarketingBOperationCompleted
            End If
            Me.InvokeAsync("PQueryStatisticsMarketingB", New Object() {DateStart, DateEnd, phase, userName}, Me.PQueryStatisticsMarketingBOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryStatisticsMarketingBOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryStatisticsMarketingBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryStatisticsMarketingBCompleted(Me, New PQueryStatisticsMarketingBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryStatisticsMarketingC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryStatisticsMarketingC(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal phase As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryStatisticsMarketingC", New Object() {DateStart, DateEnd, phase, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryStatisticsMarketingC(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal phase As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryStatisticsMarketingC", New Object() {DateStart, DateEnd, phase, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryStatisticsMarketingC(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsMarketingCAsync(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal phase As String, ByVal userName As String)
            Me.PQueryStatisticsMarketingCAsync(DateStart, DateEnd, phase, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsMarketingCAsync(ByVal DateStart As Date, ByVal DateEnd As Date, ByVal phase As String, ByVal userName As String, ByVal userState As Object)
            If (Me.PQueryStatisticsMarketingCOperationCompleted Is Nothing) Then
                Me.PQueryStatisticsMarketingCOperationCompleted = AddressOf Me.OnPQueryStatisticsMarketingCOperationCompleted
            End If
            Me.InvokeAsync("PQueryStatisticsMarketingC", New Object() {DateStart, DateEnd, phase, userName}, Me.PQueryStatisticsMarketingCOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryStatisticsMarketingCOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryStatisticsMarketingCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryStatisticsMarketingCCompleted(Me, New PQueryStatisticsMarketingCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSysTime", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysTime() As Date
            Dim results() As Object = Me.Invoke("GetSysTime", New Object(-1) {})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSysTime(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSysTime", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSysTime(ByVal asyncResult As System.IAsyncResult) As Date
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysTimeAsync()
            Me.GetSysTimeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysTimeAsync(ByVal userState As Object)
            If (Me.GetSysTimeOperationCompleted Is Nothing) Then
                Me.GetSysTimeOperationCompleted = AddressOf Me.OnGetSysTimeOperationCompleted
            End If
            Me.InvokeAsync("GetSysTime", New Object(-1) {}, Me.GetSysTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysTimeCompleted(Me, New GetSysTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectSignatureInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectSignatureInfo(ByVal strSQL_Condition_ProjectSignature As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectSignatureInfo", New Object() {strSQL_Condition_ProjectSignature})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectSignatureInfo(ByVal strSQL_Condition_ProjectSignature As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectSignatureInfo", New Object() {strSQL_Condition_ProjectSignature}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectSignatureInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectSignatureInfoAsync(ByVal strSQL_Condition_ProjectSignature As String)
            Me.GetProjectSignatureInfoAsync(strSQL_Condition_ProjectSignature, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectSignatureInfoAsync(ByVal strSQL_Condition_ProjectSignature As String, ByVal userState As Object)
            If (Me.GetProjectSignatureInfoOperationCompleted Is Nothing) Then
                Me.GetProjectSignatureInfoOperationCompleted = AddressOf Me.OnGetProjectSignatureInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectSignatureInfo", New Object() {strSQL_Condition_ProjectSignature}, Me.GetProjectSignatureInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectSignatureInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectSignatureInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectSignatureInfoCompleted(Me, New GetProjectSignatureInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectSignature", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectSignature(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectSignature", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectSignature(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectSignature", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectSignature(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectSignatureAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProjectSignatureAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectSignatureAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectSignatureOperationCompleted Is Nothing) Then
                Me.UpdateProjectSignatureOperationCompleted = AddressOf Me.OnUpdateProjectSignatureOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectSignature", New Object() {dstCommit}, Me.UpdateProjectSignatureOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectSignatureOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectSignatureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectSignatureCompleted(Me, New UpdateProjectSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSignaturePlanInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSignaturePlanInfo(ByVal strSQL_Condition_SignaturePlan As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSignaturePlanInfo", New Object() {strSQL_Condition_SignaturePlan})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSignaturePlanInfo(ByVal strSQL_Condition_SignaturePlan As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSignaturePlanInfo", New Object() {strSQL_Condition_SignaturePlan}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSignaturePlanInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSignaturePlanInfoAsync(ByVal strSQL_Condition_SignaturePlan As String)
            Me.GetSignaturePlanInfoAsync(strSQL_Condition_SignaturePlan, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSignaturePlanInfoAsync(ByVal strSQL_Condition_SignaturePlan As String, ByVal userState As Object)
            If (Me.GetSignaturePlanInfoOperationCompleted Is Nothing) Then
                Me.GetSignaturePlanInfoOperationCompleted = AddressOf Me.OnGetSignaturePlanInfoOperationCompleted
            End If
            Me.InvokeAsync("GetSignaturePlanInfo", New Object() {strSQL_Condition_SignaturePlan}, Me.GetSignaturePlanInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSignaturePlanInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSignaturePlanInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSignaturePlanInfoCompleted(Me, New GetSignaturePlanInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSignaturePlan", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSignaturePlan(ByVal dsCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateSignaturePlan", New Object() {dsCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateSignaturePlan(ByVal dsCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateSignaturePlan", New Object() {dsCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateSignaturePlan(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSignaturePlanAsync(ByVal dsCommit As System.Data.DataSet)
            Me.UpdateSignaturePlanAsync(dsCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSignaturePlanAsync(ByVal dsCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateSignaturePlanOperationCompleted Is Nothing) Then
                Me.UpdateSignaturePlanOperationCompleted = AddressOf Me.OnUpdateSignaturePlanOperationCompleted
            End If
            Me.InvokeAsync("UpdateSignaturePlan", New Object() {dsCommit}, Me.UpdateSignaturePlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSignaturePlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSignaturePlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSignaturePlanCompleted(Me, New UpdateSignaturePlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWfTaskTemplateInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWfTaskTemplateInfo(ByVal strSQL_Condition_WfTaskTemplate As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWfTaskTemplateInfo", New Object() {strSQL_Condition_WfTaskTemplate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWfTaskTemplateInfo(ByVal strSQL_Condition_WfTaskTemplate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWfTaskTemplateInfo", New Object() {strSQL_Condition_WfTaskTemplate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWfTaskTemplateInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWfTaskTemplateInfoAsync(ByVal strSQL_Condition_WfTaskTemplate As String)
            Me.GetWfTaskTemplateInfoAsync(strSQL_Condition_WfTaskTemplate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWfTaskTemplateInfoAsync(ByVal strSQL_Condition_WfTaskTemplate As String, ByVal userState As Object)
            If (Me.GetWfTaskTemplateInfoOperationCompleted Is Nothing) Then
                Me.GetWfTaskTemplateInfoOperationCompleted = AddressOf Me.OnGetWfTaskTemplateInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWfTaskTemplateInfo", New Object() {strSQL_Condition_WfTaskTemplate}, Me.GetWfTaskTemplateInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWfTaskTemplateInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWfTaskTemplateInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWfTaskTemplateInfoCompleted(Me, New GetWfTaskTemplateInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWfTaskTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWfTaskTemplate(ByVal WfTaskTemplateSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWfTaskTemplate", New Object() {WfTaskTemplateSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWfTaskTemplate(ByVal WfTaskTemplateSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWfTaskTemplate", New Object() {WfTaskTemplateSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWfTaskTemplate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWfTaskTemplateAsync(ByVal WfTaskTemplateSet As System.Data.DataSet)
            Me.UpdateWfTaskTemplateAsync(WfTaskTemplateSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWfTaskTemplateAsync(ByVal WfTaskTemplateSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWfTaskTemplateOperationCompleted Is Nothing) Then
                Me.UpdateWfTaskTemplateOperationCompleted = AddressOf Me.OnUpdateWfTaskTemplateOperationCompleted
            End If
            Me.InvokeAsync("UpdateWfTaskTemplate", New Object() {WfTaskTemplateSet}, Me.UpdateWfTaskTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWfTaskTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWfTaskTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWfTaskTemplateCompleted(Me, New UpdateWfTaskTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWfTaskTransferTemplateInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWfTaskTransferTemplateInfo(ByVal strSQL_Condition_WfTaskTransferTemplate As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWfTaskTransferTemplateInfo", New Object() {strSQL_Condition_WfTaskTransferTemplate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWfTaskTransferTemplateInfo(ByVal strSQL_Condition_WfTaskTransferTemplate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWfTaskTransferTemplateInfo", New Object() {strSQL_Condition_WfTaskTransferTemplate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWfTaskTransferTemplateInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWfTaskTransferTemplateInfoAsync(ByVal strSQL_Condition_WfTaskTransferTemplate As String)
            Me.GetWfTaskTransferTemplateInfoAsync(strSQL_Condition_WfTaskTransferTemplate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWfTaskTransferTemplateInfoAsync(ByVal strSQL_Condition_WfTaskTransferTemplate As String, ByVal userState As Object)
            If (Me.GetWfTaskTransferTemplateInfoOperationCompleted Is Nothing) Then
                Me.GetWfTaskTransferTemplateInfoOperationCompleted = AddressOf Me.OnGetWfTaskTransferTemplateInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWfTaskTransferTemplateInfo", New Object() {strSQL_Condition_WfTaskTransferTemplate}, Me.GetWfTaskTransferTemplateInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWfTaskTransferTemplateInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWfTaskTransferTemplateInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWfTaskTransferTemplateInfoCompleted(Me, New GetWfTaskTransferTemplateInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWfTaskTransferTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWfTaskTransferTemplate(ByVal WfTaskTransferTemplateSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWfTaskTransferTemplate", New Object() {WfTaskTransferTemplateSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWfTaskTransferTemplate(ByVal WfTaskTransferTemplateSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWfTaskTransferTemplate", New Object() {WfTaskTransferTemplateSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWfTaskTransferTemplate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWfTaskTransferTemplateAsync(ByVal WfTaskTransferTemplateSet As System.Data.DataSet)
            Me.UpdateWfTaskTransferTemplateAsync(WfTaskTransferTemplateSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWfTaskTransferTemplateAsync(ByVal WfTaskTransferTemplateSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWfTaskTransferTemplateOperationCompleted Is Nothing) Then
                Me.UpdateWfTaskTransferTemplateOperationCompleted = AddressOf Me.OnUpdateWfTaskTransferTemplateOperationCompleted
            End If
            Me.InvokeAsync("UpdateWfTaskTransferTemplate", New Object() {WfTaskTransferTemplateSet}, Me.UpdateWfTaskTransferTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWfTaskTransferTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWfTaskTransferTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWfTaskTransferTemplateCompleted(Me, New UpdateWfTaskTransferTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWfTaskRoleTemplateInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWfTaskRoleTemplateInfo(ByVal strSQL_Condition_WfTaskRoleTemplate As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWfTaskRoleTemplateInfo", New Object() {strSQL_Condition_WfTaskRoleTemplate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWfTaskRoleTemplateInfo(ByVal strSQL_Condition_WfTaskRoleTemplate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWfTaskRoleTemplateInfo", New Object() {strSQL_Condition_WfTaskRoleTemplate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWfTaskRoleTemplateInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWfTaskRoleTemplateInfoAsync(ByVal strSQL_Condition_WfTaskRoleTemplate As String)
            Me.GetWfTaskRoleTemplateInfoAsync(strSQL_Condition_WfTaskRoleTemplate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWfTaskRoleTemplateInfoAsync(ByVal strSQL_Condition_WfTaskRoleTemplate As String, ByVal userState As Object)
            If (Me.GetWfTaskRoleTemplateInfoOperationCompleted Is Nothing) Then
                Me.GetWfTaskRoleTemplateInfoOperationCompleted = AddressOf Me.OnGetWfTaskRoleTemplateInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWfTaskRoleTemplateInfo", New Object() {strSQL_Condition_WfTaskRoleTemplate}, Me.GetWfTaskRoleTemplateInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWfTaskRoleTemplateInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWfTaskRoleTemplateInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWfTaskRoleTemplateInfoCompleted(Me, New GetWfTaskRoleTemplateInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWfTaskRoleTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWfTaskRoleTemplate(ByVal WfTaskRoleTemplateSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWfTaskRoleTemplate", New Object() {WfTaskRoleTemplateSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWfTaskRoleTemplate(ByVal WfTaskRoleTemplateSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWfTaskRoleTemplate", New Object() {WfTaskRoleTemplateSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWfTaskRoleTemplate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWfTaskRoleTemplateAsync(ByVal WfTaskRoleTemplateSet As System.Data.DataSet)
            Me.UpdateWfTaskRoleTemplateAsync(WfTaskRoleTemplateSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWfTaskRoleTemplateAsync(ByVal WfTaskRoleTemplateSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWfTaskRoleTemplateOperationCompleted Is Nothing) Then
                Me.UpdateWfTaskRoleTemplateOperationCompleted = AddressOf Me.OnUpdateWfTaskRoleTemplateOperationCompleted
            End If
            Me.InvokeAsync("UpdateWfTaskRoleTemplate", New Object() {WfTaskRoleTemplateSet}, Me.UpdateWfTaskRoleTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWfTaskRoleTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWfTaskRoleTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWfTaskRoleTemplateCompleted(Me, New UpdateWfTaskRoleTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWfTimingTaskTemplateInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWfTimingTaskTemplateInfo(ByVal strSQL_Condition_WfTimingTaskTemplate As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWfTimingTaskTemplateInfo", New Object() {strSQL_Condition_WfTimingTaskTemplate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWfTimingTaskTemplateInfo(ByVal strSQL_Condition_WfTimingTaskTemplate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWfTimingTaskTemplateInfo", New Object() {strSQL_Condition_WfTimingTaskTemplate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWfTimingTaskTemplateInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWfTimingTaskTemplateInfoAsync(ByVal strSQL_Condition_WfTimingTaskTemplate As String)
            Me.GetWfTimingTaskTemplateInfoAsync(strSQL_Condition_WfTimingTaskTemplate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWfTimingTaskTemplateInfoAsync(ByVal strSQL_Condition_WfTimingTaskTemplate As String, ByVal userState As Object)
            If (Me.GetWfTimingTaskTemplateInfoOperationCompleted Is Nothing) Then
                Me.GetWfTimingTaskTemplateInfoOperationCompleted = AddressOf Me.OnGetWfTimingTaskTemplateInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWfTimingTaskTemplateInfo", New Object() {strSQL_Condition_WfTimingTaskTemplate}, Me.GetWfTimingTaskTemplateInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWfTimingTaskTemplateInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWfTimingTaskTemplateInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWfTimingTaskTemplateInfoCompleted(Me, New GetWfTimingTaskTemplateInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWfTimingTaskTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWfTimingTaskTemplate(ByVal WfTimingTaskTemplateSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWfTimingTaskTemplate", New Object() {WfTimingTaskTemplateSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWfTimingTaskTemplate(ByVal WfTimingTaskTemplateSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWfTimingTaskTemplate", New Object() {WfTimingTaskTemplateSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWfTimingTaskTemplate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWfTimingTaskTemplateAsync(ByVal WfTimingTaskTemplateSet As System.Data.DataSet)
            Me.UpdateWfTimingTaskTemplateAsync(WfTimingTaskTemplateSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWfTimingTaskTemplateAsync(ByVal WfTimingTaskTemplateSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWfTimingTaskTemplateOperationCompleted Is Nothing) Then
                Me.UpdateWfTimingTaskTemplateOperationCompleted = AddressOf Me.OnUpdateWfTimingTaskTemplateOperationCompleted
            End If
            Me.InvokeAsync("UpdateWfTimingTaskTemplate", New Object() {WfTimingTaskTemplateSet}, Me.UpdateWfTimingTaskTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWfTimingTaskTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWfTimingTaskTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWfTimingTaskTemplateCompleted(Me, New UpdateWfTimingTaskTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteProjectCreditQuantity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteProjectCreditQuantity(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String) As String
            Dim results() As Object = Me.Invoke("DeleteProjectCreditQuantity", New Object() {ProjectNo, CorporationNo, Phase, Month})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteProjectCreditQuantity(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteProjectCreditQuantity", New Object() {ProjectNo, CorporationNo, Phase, Month}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteProjectCreditQuantity(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteProjectCreditQuantityAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String)
            Me.DeleteProjectCreditQuantityAsync(ProjectNo, CorporationNo, Phase, Month, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteProjectCreditQuantityAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal userState As Object)
            If (Me.DeleteProjectCreditQuantityOperationCompleted Is Nothing) Then
                Me.DeleteProjectCreditQuantityOperationCompleted = AddressOf Me.OnDeleteProjectCreditQuantityOperationCompleted
            End If
            Me.InvokeAsync("DeleteProjectCreditQuantity", New Object() {ProjectNo, CorporationNo, Phase, Month}, Me.DeleteProjectCreditQuantityOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteProjectCreditQuantityOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteProjectCreditQuantityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteProjectCreditQuantityCompleted(Me, New DeleteProjectCreditQuantityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FStatisticsFee", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FStatisticsFee(ByVal month_start As String, ByVal month_end As String, ByVal sType As String, ByVal sSubType As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FStatisticsFee", New Object() {month_start, month_end, sType, sSubType, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFStatisticsFee(ByVal month_start As String, ByVal month_end As String, ByVal sType As String, ByVal sSubType As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FStatisticsFee", New Object() {month_start, month_end, sType, sSubType, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFStatisticsFee(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FStatisticsFeeAsync(ByVal month_start As String, ByVal month_end As String, ByVal sType As String, ByVal sSubType As String, ByVal userName As String)
            Me.FStatisticsFeeAsync(month_start, month_end, sType, sSubType, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FStatisticsFeeAsync(ByVal month_start As String, ByVal month_end As String, ByVal sType As String, ByVal sSubType As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FStatisticsFeeOperationCompleted Is Nothing) Then
                Me.FStatisticsFeeOperationCompleted = AddressOf Me.OnFStatisticsFeeOperationCompleted
            End If
            Me.InvokeAsync("FStatisticsFee", New Object() {month_start, month_end, sType, sSubType, userName}, Me.FStatisticsFeeOperationCompleted, userState)
        End Sub
        
        Private Sub OnFStatisticsFeeOperationCompleted(ByVal arg As Object)
            If (Not (Me.FStatisticsFeeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FStatisticsFeeCompleted(Me, New FStatisticsFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGuaranteeLetter", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetGuaranteeLetter(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetGuaranteeLetter", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetGuaranteeLetter(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetGuaranteeLetter", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetGuaranteeLetter(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGuaranteeLetterAsync(ByVal Condition As String)
            Me.GetGuaranteeLetterAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGuaranteeLetterAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetGuaranteeLetterOperationCompleted Is Nothing) Then
                Me.GetGuaranteeLetterOperationCompleted = AddressOf Me.OnGetGuaranteeLetterOperationCompleted
            End If
            Me.InvokeAsync("GetGuaranteeLetter", New Object() {Condition}, Me.GetGuaranteeLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGuaranteeLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGuaranteeLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGuaranteeLetterCompleted(Me, New GetGuaranteeLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="GetGuaranteeLetter1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGuaranteeLetter2", RequestElementName:="GetGuaranteeLetter2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="GetGuaranteeLetter2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetGuaranteeLetter(ByVal CorporationNo As String, ByVal applyDate As Date) As <System.Xml.Serialization.XmlElementAttribute("GetGuaranteeLetter2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetGuaranteeLetter1", New Object() {CorporationNo, applyDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetGuaranteeLetter1(ByVal CorporationNo As String, ByVal applyDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetGuaranteeLetter1", New Object() {CorporationNo, applyDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetGuaranteeLetter1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGuaranteeLetter1Async(ByVal CorporationNo As String, ByVal applyDate As Date)
            Me.GetGuaranteeLetter1Async(CorporationNo, applyDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGuaranteeLetter1Async(ByVal CorporationNo As String, ByVal applyDate As Date, ByVal userState As Object)
            If (Me.GetGuaranteeLetter1OperationCompleted Is Nothing) Then
                Me.GetGuaranteeLetter1OperationCompleted = AddressOf Me.OnGetGuaranteeLetter1OperationCompleted
            End If
            Me.InvokeAsync("GetGuaranteeLetter1", New Object() {CorporationNo, applyDate}, Me.GetGuaranteeLetter1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGuaranteeLetter1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGuaranteeLetter1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGuaranteeLetter1Completed(Me, New GetGuaranteeLetter1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateGuaranteeLetter", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateGuaranteeLetter(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateGuaranteeLetter", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateGuaranteeLetter(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateGuaranteeLetter", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateGuaranteeLetter(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateGuaranteeLetterAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateGuaranteeLetterAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGuaranteeLetterAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateGuaranteeLetterOperationCompleted Is Nothing) Then
                Me.UpdateGuaranteeLetterOperationCompleted = AddressOf Me.OnUpdateGuaranteeLetterOperationCompleted
            End If
            Me.InvokeAsync("UpdateGuaranteeLetter", New Object() {dstCommit}, Me.UpdateGuaranteeLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateGuaranteeLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateGuaranteeLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateGuaranteeLetterCompleted(Me, New UpdateGuaranteeLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGuaranteeLetterType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGuaranteeLetterType(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetGuaranteeLetterType", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetGuaranteeLetterType(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetGuaranteeLetterType", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetGuaranteeLetterType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGuaranteeLetterTypeAsync(ByVal Condition As String)
            Me.GetGuaranteeLetterTypeAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGuaranteeLetterTypeAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetGuaranteeLetterTypeOperationCompleted Is Nothing) Then
                Me.GetGuaranteeLetterTypeOperationCompleted = AddressOf Me.OnGetGuaranteeLetterTypeOperationCompleted
            End If
            Me.InvokeAsync("GetGuaranteeLetterType", New Object() {Condition}, Me.GetGuaranteeLetterTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGuaranteeLetterTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGuaranteeLetterTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGuaranteeLetterTypeCompleted(Me, New GetGuaranteeLetterTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateGuaranteeLetterType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateGuaranteeLetterType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateGuaranteeLetterType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateGuaranteeLetterType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateGuaranteeLetterType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateGuaranteeLetterType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateGuaranteeLetterTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateGuaranteeLetterTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGuaranteeLetterTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateGuaranteeLetterTypeOperationCompleted Is Nothing) Then
                Me.UpdateGuaranteeLetterTypeOperationCompleted = AddressOf Me.OnUpdateGuaranteeLetterTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateGuaranteeLetterType", New Object() {dstCommit}, Me.UpdateGuaranteeLetterTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateGuaranteeLetterTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateGuaranteeLetterTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateGuaranteeLetterTypeCompleted(Me, New UpdateGuaranteeLetterTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGuaranteeLetterUsage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGuaranteeLetterUsage(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetGuaranteeLetterUsage", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetGuaranteeLetterUsage(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetGuaranteeLetterUsage", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetGuaranteeLetterUsage(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGuaranteeLetterUsageAsync(ByVal Condition As String)
            Me.GetGuaranteeLetterUsageAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGuaranteeLetterUsageAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetGuaranteeLetterUsageOperationCompleted Is Nothing) Then
                Me.GetGuaranteeLetterUsageOperationCompleted = AddressOf Me.OnGetGuaranteeLetterUsageOperationCompleted
            End If
            Me.InvokeAsync("GetGuaranteeLetterUsage", New Object() {Condition}, Me.GetGuaranteeLetterUsageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGuaranteeLetterUsageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGuaranteeLetterUsageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGuaranteeLetterUsageCompleted(Me, New GetGuaranteeLetterUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateGuaranteeLetterUsage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateGuaranteeLetterUsage(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateGuaranteeLetterUsage", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateGuaranteeLetterUsage(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateGuaranteeLetterUsage", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateGuaranteeLetterUsage(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateGuaranteeLetterUsageAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateGuaranteeLetterUsageAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGuaranteeLetterUsageAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateGuaranteeLetterUsageOperationCompleted Is Nothing) Then
                Me.UpdateGuaranteeLetterUsageOperationCompleted = AddressOf Me.OnUpdateGuaranteeLetterUsageOperationCompleted
            End If
            Me.InvokeAsync("UpdateGuaranteeLetterUsage", New Object() {dstCommit}, Me.UpdateGuaranteeLetterUsageOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateGuaranteeLetterUsageOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateGuaranteeLetterUsageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateGuaranteeLetterUsageCompleted(Me, New UpdateGuaranteeLetterUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReimburseType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReimburseType(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReimburseType", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReimburseType(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReimburseType", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReimburseType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReimburseTypeAsync(ByVal Condition As String)
            Me.GetReimburseTypeAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReimburseTypeAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetReimburseTypeOperationCompleted Is Nothing) Then
                Me.GetReimburseTypeOperationCompleted = AddressOf Me.OnGetReimburseTypeOperationCompleted
            End If
            Me.InvokeAsync("GetReimburseType", New Object() {Condition}, Me.GetReimburseTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReimburseTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReimburseTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReimburseTypeCompleted(Me, New GetReimburseTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateReimburseType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateReimburseType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateReimburseType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateReimburseType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateReimburseType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateReimburseType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateReimburseTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateReimburseTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateReimburseTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateReimburseTypeOperationCompleted Is Nothing) Then
                Me.UpdateReimburseTypeOperationCompleted = AddressOf Me.OnUpdateReimburseTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateReimburseType", New Object() {dstCommit}, Me.UpdateReimburseTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateReimburseTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateReimburseTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateReimburseTypeCompleted(Me, New UpdateReimburseTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaterial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetMaterial(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMaterial", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMaterial(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMaterial", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMaterial(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaterialAsync(ByVal Condition As String)
            Me.GetMaterialAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaterialAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetMaterialOperationCompleted Is Nothing) Then
                Me.GetMaterialOperationCompleted = AddressOf Me.OnGetMaterialOperationCompleted
            End If
            Me.InvokeAsync("GetMaterial", New Object() {Condition}, Me.GetMaterialOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaterialOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaterialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaterialCompleted(Me, New GetMaterialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="GetMaterial1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaterialEx", RequestElementName:="GetMaterialEx", RequestNamespace:="http://tempuri.org/", ResponseElementName:="GetMaterialExResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetMaterial(ByVal itemNo As String, ByVal itemTypeNo As String, ByVal serviceType As String) As <System.Xml.Serialization.XmlElementAttribute("GetMaterialExResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMaterial1", New Object() {itemNo, itemTypeNo, serviceType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMaterial1(ByVal itemNo As String, ByVal itemTypeNo As String, ByVal serviceType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMaterial1", New Object() {itemNo, itemTypeNo, serviceType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMaterial1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaterial1Async(ByVal itemNo As String, ByVal itemTypeNo As String, ByVal serviceType As String)
            Me.GetMaterial1Async(itemNo, itemTypeNo, serviceType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaterial1Async(ByVal itemNo As String, ByVal itemTypeNo As String, ByVal serviceType As String, ByVal userState As Object)
            If (Me.GetMaterial1OperationCompleted Is Nothing) Then
                Me.GetMaterial1OperationCompleted = AddressOf Me.OnGetMaterial1OperationCompleted
            End If
            Me.InvokeAsync("GetMaterial1", New Object() {itemNo, itemTypeNo, serviceType}, Me.GetMaterial1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaterial1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaterial1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaterial1Completed(Me, New GetMaterial1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DuplicateMaterial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DuplicateMaterial(ByVal sourceServiceType As String, ByVal destinationServiceType As String) As String
            Dim results() As Object = Me.Invoke("DuplicateMaterial", New Object() {sourceServiceType, destinationServiceType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDuplicateMaterial(ByVal sourceServiceType As String, ByVal destinationServiceType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DuplicateMaterial", New Object() {sourceServiceType, destinationServiceType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDuplicateMaterial(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DuplicateMaterialAsync(ByVal sourceServiceType As String, ByVal destinationServiceType As String)
            Me.DuplicateMaterialAsync(sourceServiceType, destinationServiceType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DuplicateMaterialAsync(ByVal sourceServiceType As String, ByVal destinationServiceType As String, ByVal userState As Object)
            If (Me.DuplicateMaterialOperationCompleted Is Nothing) Then
                Me.DuplicateMaterialOperationCompleted = AddressOf Me.OnDuplicateMaterialOperationCompleted
            End If
            Me.InvokeAsync("DuplicateMaterial", New Object() {sourceServiceType, destinationServiceType}, Me.DuplicateMaterialOperationCompleted, userState)
        End Sub
        
        Private Sub OnDuplicateMaterialOperationCompleted(ByVal arg As Object)
            If (Not (Me.DuplicateMaterialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DuplicateMaterialCompleted(Me, New DuplicateMaterialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateMaterial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMaterial(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateMaterial", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateMaterial(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateMaterial", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateMaterial(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMaterialAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateMaterialAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMaterialAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateMaterialOperationCompleted Is Nothing) Then
                Me.UpdateMaterialOperationCompleted = AddressOf Me.OnUpdateMaterialOperationCompleted
            End If
            Me.InvokeAsync("UpdateMaterial", New Object() {dstCommit}, Me.UpdateMaterialOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMaterialOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMaterialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMaterialCompleted(Me, New UpdateMaterialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryStatisticsRecommendProjectByMonth", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryStatisticsRecommendProjectByMonth(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryStatisticsRecommendProjectByMonth", New Object() {StartDate, EndDate, RecommendPerson, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryStatisticsRecommendProjectByMonth(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryStatisticsRecommendProjectByMonth", New Object() {StartDate, EndDate, RecommendPerson, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryStatisticsRecommendProjectByMonth(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsRecommendProjectByMonthAsync(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String)
            Me.PQueryStatisticsRecommendProjectByMonthAsync(StartDate, EndDate, RecommendPerson, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsRecommendProjectByMonthAsync(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String, ByVal userState As Object)
            If (Me.PQueryStatisticsRecommendProjectByMonthOperationCompleted Is Nothing) Then
                Me.PQueryStatisticsRecommendProjectByMonthOperationCompleted = AddressOf Me.OnPQueryStatisticsRecommendProjectByMonthOperationCompleted
            End If
            Me.InvokeAsync("PQueryStatisticsRecommendProjectByMonth", New Object() {StartDate, EndDate, RecommendPerson, userName}, Me.PQueryStatisticsRecommendProjectByMonthOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryStatisticsRecommendProjectByMonthOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryStatisticsRecommendProjectByMonthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryStatisticsRecommendProjectByMonthCompleted(Me, New PQueryStatisticsRecommendProjectByMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryStatisticsRecommendProjectByYear", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryStatisticsRecommendProjectByYear(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryStatisticsRecommendProjectByYear", New Object() {StartDate, EndDate, RecommendPerson, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryStatisticsRecommendProjectByYear(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryStatisticsRecommendProjectByYear", New Object() {StartDate, EndDate, RecommendPerson, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryStatisticsRecommendProjectByYear(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsRecommendProjectByYearAsync(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String)
            Me.PQueryStatisticsRecommendProjectByYearAsync(StartDate, EndDate, RecommendPerson, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsRecommendProjectByYearAsync(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String, ByVal userState As Object)
            If (Me.PQueryStatisticsRecommendProjectByYearOperationCompleted Is Nothing) Then
                Me.PQueryStatisticsRecommendProjectByYearOperationCompleted = AddressOf Me.OnPQueryStatisticsRecommendProjectByYearOperationCompleted
            End If
            Me.InvokeAsync("PQueryStatisticsRecommendProjectByYear", New Object() {StartDate, EndDate, RecommendPerson, userName}, Me.PQueryStatisticsRecommendProjectByYearOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryStatisticsRecommendProjectByYearOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryStatisticsRecommendProjectByYearCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryStatisticsRecommendProjectByYearCompleted(Me, New PQueryStatisticsRecommendProjectByYearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryStatisticsRecommendProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryStatisticsRecommendProject(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryStatisticsRecommendProject", New Object() {StartDate, EndDate, RecommendPerson, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryStatisticsRecommendProject(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryStatisticsRecommendProject", New Object() {StartDate, EndDate, RecommendPerson, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryStatisticsRecommendProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsRecommendProjectAsync(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String)
            Me.PQueryStatisticsRecommendProjectAsync(StartDate, EndDate, RecommendPerson, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryStatisticsRecommendProjectAsync(ByVal StartDate As Date, ByVal EndDate As Date, ByVal RecommendPerson As String, ByVal userName As String, ByVal userState As Object)
            If (Me.PQueryStatisticsRecommendProjectOperationCompleted Is Nothing) Then
                Me.PQueryStatisticsRecommendProjectOperationCompleted = AddressOf Me.OnPQueryStatisticsRecommendProjectOperationCompleted
            End If
            Me.InvokeAsync("PQueryStatisticsRecommendProject", New Object() {StartDate, EndDate, RecommendPerson, userName}, Me.PQueryStatisticsRecommendProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryStatisticsRecommendProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryStatisticsRecommendProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryStatisticsRecommendProjectCompleted(Me, New PQueryStatisticsRecommendProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Usp_ListIsFirstLoanStat", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Usp_ListIsFirstLoanStat(ByVal dtFrom As Date, ByVal dtTo As Date, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Usp_ListIsFirstLoanStat", New Object() {dtFrom, dtTo, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginUsp_ListIsFirstLoanStat(ByVal dtFrom As Date, ByVal dtTo As Date, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Usp_ListIsFirstLoanStat", New Object() {dtFrom, dtTo, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUsp_ListIsFirstLoanStat(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Usp_ListIsFirstLoanStatAsync(ByVal dtFrom As Date, ByVal dtTo As Date, ByVal userName As String)
            Me.Usp_ListIsFirstLoanStatAsync(dtFrom, dtTo, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Usp_ListIsFirstLoanStatAsync(ByVal dtFrom As Date, ByVal dtTo As Date, ByVal userName As String, ByVal userState As Object)
            If (Me.Usp_ListIsFirstLoanStatOperationCompleted Is Nothing) Then
                Me.Usp_ListIsFirstLoanStatOperationCompleted = AddressOf Me.OnUsp_ListIsFirstLoanStatOperationCompleted
            End If
            Me.InvokeAsync("Usp_ListIsFirstLoanStat", New Object() {dtFrom, dtTo, userName}, Me.Usp_ListIsFirstLoanStatOperationCompleted, userState)
        End Sub
        
        Private Sub OnUsp_ListIsFirstLoanStatOperationCompleted(ByVal arg As Object)
            If (Not (Me.Usp_ListIsFirstLoanStatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Usp_ListIsFirstLoanStatCompleted(Me, New Usp_ListIsFirstLoanStatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Usp_GetUnDealProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Usp_GetUnDealProject(ByVal serviceType As String, ByVal vchPMA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Usp_GetUnDealProject", New Object() {serviceType, vchPMA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginUsp_GetUnDealProject(ByVal serviceType As String, ByVal vchPMA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Usp_GetUnDealProject", New Object() {serviceType, vchPMA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUsp_GetUnDealProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Usp_GetUnDealProjectAsync(ByVal serviceType As String, ByVal vchPMA As String, ByVal userName As String)
            Me.Usp_GetUnDealProjectAsync(serviceType, vchPMA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Usp_GetUnDealProjectAsync(ByVal serviceType As String, ByVal vchPMA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.Usp_GetUnDealProjectOperationCompleted Is Nothing) Then
                Me.Usp_GetUnDealProjectOperationCompleted = AddressOf Me.OnUsp_GetUnDealProjectOperationCompleted
            End If
            Me.InvokeAsync("Usp_GetUnDealProject", New Object() {serviceType, vchPMA, userName}, Me.Usp_GetUnDealProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnUsp_GetUnDealProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.Usp_GetUnDealProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Usp_GetUnDealProjectCompleted(Me, New Usp_GetUnDealProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Usp_GetGuaranteeProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Usp_GetGuaranteeProject(ByVal LoanFrom As String, ByVal LoanTo As String, ByVal vchPMA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Usp_GetGuaranteeProject", New Object() {LoanFrom, LoanTo, vchPMA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginUsp_GetGuaranteeProject(ByVal LoanFrom As String, ByVal LoanTo As String, ByVal vchPMA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Usp_GetGuaranteeProject", New Object() {LoanFrom, LoanTo, vchPMA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUsp_GetGuaranteeProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Usp_GetGuaranteeProjectAsync(ByVal LoanFrom As String, ByVal LoanTo As String, ByVal vchPMA As String, ByVal userName As String)
            Me.Usp_GetGuaranteeProjectAsync(LoanFrom, LoanTo, vchPMA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Usp_GetGuaranteeProjectAsync(ByVal LoanFrom As String, ByVal LoanTo As String, ByVal vchPMA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.Usp_GetGuaranteeProjectOperationCompleted Is Nothing) Then
                Me.Usp_GetGuaranteeProjectOperationCompleted = AddressOf Me.OnUsp_GetGuaranteeProjectOperationCompleted
            End If
            Me.InvokeAsync("Usp_GetGuaranteeProject", New Object() {LoanFrom, LoanTo, vchPMA, userName}, Me.Usp_GetGuaranteeProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnUsp_GetGuaranteeProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.Usp_GetGuaranteeProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Usp_GetGuaranteeProjectCompleted(Me, New Usp_GetGuaranteeProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Usp_GetAfterGuaranteeRecord", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Usp_GetAfterGuaranteeRecord(ByVal corporationName As String, ByVal serviceType As String, ByVal managerA As String, ByVal dtCheckFrom As String, ByVal dtCheckTo As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Usp_GetAfterGuaranteeRecord", New Object() {corporationName, serviceType, managerA, dtCheckFrom, dtCheckTo, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginUsp_GetAfterGuaranteeRecord(ByVal corporationName As String, ByVal serviceType As String, ByVal managerA As String, ByVal dtCheckFrom As String, ByVal dtCheckTo As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Usp_GetAfterGuaranteeRecord", New Object() {corporationName, serviceType, managerA, dtCheckFrom, dtCheckTo, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUsp_GetAfterGuaranteeRecord(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Usp_GetAfterGuaranteeRecordAsync(ByVal corporationName As String, ByVal serviceType As String, ByVal managerA As String, ByVal dtCheckFrom As String, ByVal dtCheckTo As String, ByVal userName As String)
            Me.Usp_GetAfterGuaranteeRecordAsync(corporationName, serviceType, managerA, dtCheckFrom, dtCheckTo, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Usp_GetAfterGuaranteeRecordAsync(ByVal corporationName As String, ByVal serviceType As String, ByVal managerA As String, ByVal dtCheckFrom As String, ByVal dtCheckTo As String, ByVal userName As String, ByVal userState As Object)
            If (Me.Usp_GetAfterGuaranteeRecordOperationCompleted Is Nothing) Then
                Me.Usp_GetAfterGuaranteeRecordOperationCompleted = AddressOf Me.OnUsp_GetAfterGuaranteeRecordOperationCompleted
            End If
            Me.InvokeAsync("Usp_GetAfterGuaranteeRecord", New Object() {corporationName, serviceType, managerA, dtCheckFrom, dtCheckTo, userName}, Me.Usp_GetAfterGuaranteeRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnUsp_GetAfterGuaranteeRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.Usp_GetAfterGuaranteeRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Usp_GetAfterGuaranteeRecordCompleted(Me, New Usp_GetAfterGuaranteeRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Usp_ListConsultation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Usp_ListConsultation(ByVal corporation_code As String, ByVal corporation_name As String, ByVal district_name As String, ByVal recommend_person As String, ByVal consult_person As String, ByVal dtConsultFrom As String, ByVal dtConsultTo As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Usp_ListConsultation", New Object() {corporation_code, corporation_name, district_name, recommend_person, consult_person, dtConsultFrom, dtConsultTo, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginUsp_ListConsultation(ByVal corporation_code As String, ByVal corporation_name As String, ByVal district_name As String, ByVal recommend_person As String, ByVal consult_person As String, ByVal dtConsultFrom As String, ByVal dtConsultTo As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Usp_ListConsultation", New Object() {corporation_code, corporation_name, district_name, recommend_person, consult_person, dtConsultFrom, dtConsultTo, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUsp_ListConsultation(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Usp_ListConsultationAsync(ByVal corporation_code As String, ByVal corporation_name As String, ByVal district_name As String, ByVal recommend_person As String, ByVal consult_person As String, ByVal dtConsultFrom As String, ByVal dtConsultTo As String, ByVal userName As String)
            Me.Usp_ListConsultationAsync(corporation_code, corporation_name, district_name, recommend_person, consult_person, dtConsultFrom, dtConsultTo, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Usp_ListConsultationAsync(ByVal corporation_code As String, ByVal corporation_name As String, ByVal district_name As String, ByVal recommend_person As String, ByVal consult_person As String, ByVal dtConsultFrom As String, ByVal dtConsultTo As String, ByVal userName As String, ByVal userState As Object)
            If (Me.Usp_ListConsultationOperationCompleted Is Nothing) Then
                Me.Usp_ListConsultationOperationCompleted = AddressOf Me.OnUsp_ListConsultationOperationCompleted
            End If
            Me.InvokeAsync("Usp_ListConsultation", New Object() {corporation_code, corporation_name, district_name, recommend_person, consult_person, dtConsultFrom, dtConsultTo, userName}, Me.Usp_ListConsultationOperationCompleted, userState)
        End Sub
        
        Private Sub OnUsp_ListConsultationOperationCompleted(ByVal arg As Object)
            If (Not (Me.Usp_ListConsultationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Usp_ListConsultationCompleted(Me, New Usp_ListConsultationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectCounterClaimInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectCounterClaimInfo(ByVal strSQL_Condition_ProjectCounterClaim As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectCounterClaimInfo", New Object() {strSQL_Condition_ProjectCounterClaim})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectCounterClaimInfo(ByVal strSQL_Condition_ProjectCounterClaim As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectCounterClaimInfo", New Object() {strSQL_Condition_ProjectCounterClaim}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectCounterClaimInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectCounterClaimInfoAsync(ByVal strSQL_Condition_ProjectCounterClaim As String)
            Me.GetProjectCounterClaimInfoAsync(strSQL_Condition_ProjectCounterClaim, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectCounterClaimInfoAsync(ByVal strSQL_Condition_ProjectCounterClaim As String, ByVal userState As Object)
            If (Me.GetProjectCounterClaimInfoOperationCompleted Is Nothing) Then
                Me.GetProjectCounterClaimInfoOperationCompleted = AddressOf Me.OnGetProjectCounterClaimInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectCounterClaimInfo", New Object() {strSQL_Condition_ProjectCounterClaim}, Me.GetProjectCounterClaimInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectCounterClaimInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectCounterClaimInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectCounterClaimInfoCompleted(Me, New GetProjectCounterClaimInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectCounterClaim", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectCounterClaim(ByVal ProjectCounterClaimSet As System.Data.DataSet) As Object
            Dim results() As Object = Me.Invoke("UpdateProjectCounterClaim", New Object() {ProjectCounterClaimSet})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectCounterClaim(ByVal ProjectCounterClaimSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectCounterClaim", New Object() {ProjectCounterClaimSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectCounterClaim(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectCounterClaimAsync(ByVal ProjectCounterClaimSet As System.Data.DataSet)
            Me.UpdateProjectCounterClaimAsync(ProjectCounterClaimSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectCounterClaimAsync(ByVal ProjectCounterClaimSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectCounterClaimOperationCompleted Is Nothing) Then
                Me.UpdateProjectCounterClaimOperationCompleted = AddressOf Me.OnUpdateProjectCounterClaimOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectCounterClaim", New Object() {ProjectCounterClaimSet}, Me.UpdateProjectCounterClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectCounterClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectCounterClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectCounterClaimCompleted(Me, New UpdateProjectCounterClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQryUnsignProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQryUnsignProject(ByVal ProjectCode As String, ByVal CorpName As String, ByVal ServiceType As String, ByVal dtFrom As String, ByVal dtTo As String, ByVal phase As String, ByVal vchPMA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQryUnsignProject", New Object() {ProjectCode, CorpName, ServiceType, dtFrom, dtTo, phase, vchPMA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQryUnsignProject(ByVal ProjectCode As String, ByVal CorpName As String, ByVal ServiceType As String, ByVal dtFrom As String, ByVal dtTo As String, ByVal phase As String, ByVal vchPMA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQryUnsignProject", New Object() {ProjectCode, CorpName, ServiceType, dtFrom, dtTo, phase, vchPMA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQryUnsignProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQryUnsignProjectAsync(ByVal ProjectCode As String, ByVal CorpName As String, ByVal ServiceType As String, ByVal dtFrom As String, ByVal dtTo As String, ByVal phase As String, ByVal vchPMA As String, ByVal userName As String)
            Me.FQryUnsignProjectAsync(ProjectCode, CorpName, ServiceType, dtFrom, dtTo, phase, vchPMA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQryUnsignProjectAsync(ByVal ProjectCode As String, ByVal CorpName As String, ByVal ServiceType As String, ByVal dtFrom As String, ByVal dtTo As String, ByVal phase As String, ByVal vchPMA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQryUnsignProjectOperationCompleted Is Nothing) Then
                Me.FQryUnsignProjectOperationCompleted = AddressOf Me.OnFQryUnsignProjectOperationCompleted
            End If
            Me.InvokeAsync("FQryUnsignProject", New Object() {ProjectCode, CorpName, ServiceType, dtFrom, dtTo, phase, vchPMA, userName}, Me.FQryUnsignProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQryUnsignProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQryUnsignProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQryUnsignProjectCompleted(Me, New FQryUnsignProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Usp_ListGuaranteeForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Usp_ListGuaranteeForm(ByVal vchProjectCode As String, ByVal vchCorpName As String, ByVal dtSignFrom As String, ByVal dtSignTo As Object, ByVal dtLoanFrom As String, ByVal dtLoanTo As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Usp_ListGuaranteeForm", New Object() {vchProjectCode, vchCorpName, dtSignFrom, dtSignTo, dtLoanFrom, dtLoanTo, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginUsp_ListGuaranteeForm(ByVal vchProjectCode As String, ByVal vchCorpName As String, ByVal dtSignFrom As String, ByVal dtSignTo As Object, ByVal dtLoanFrom As String, ByVal dtLoanTo As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Usp_ListGuaranteeForm", New Object() {vchProjectCode, vchCorpName, dtSignFrom, dtSignTo, dtLoanFrom, dtLoanTo, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUsp_ListGuaranteeForm(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Usp_ListGuaranteeFormAsync(ByVal vchProjectCode As String, ByVal vchCorpName As String, ByVal dtSignFrom As String, ByVal dtSignTo As Object, ByVal dtLoanFrom As String, ByVal dtLoanTo As String, ByVal userName As String)
            Me.Usp_ListGuaranteeFormAsync(vchProjectCode, vchCorpName, dtSignFrom, dtSignTo, dtLoanFrom, dtLoanTo, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Usp_ListGuaranteeFormAsync(ByVal vchProjectCode As String, ByVal vchCorpName As String, ByVal dtSignFrom As String, ByVal dtSignTo As Object, ByVal dtLoanFrom As String, ByVal dtLoanTo As String, ByVal userName As String, ByVal userState As Object)
            If (Me.Usp_ListGuaranteeFormOperationCompleted Is Nothing) Then
                Me.Usp_ListGuaranteeFormOperationCompleted = AddressOf Me.OnUsp_ListGuaranteeFormOperationCompleted
            End If
            Me.InvokeAsync("Usp_ListGuaranteeForm", New Object() {vchProjectCode, vchCorpName, dtSignFrom, dtSignTo, dtLoanFrom, dtLoanTo, userName}, Me.Usp_ListGuaranteeFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnUsp_ListGuaranteeFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.Usp_ListGuaranteeFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Usp_ListGuaranteeFormCompleted(Me, New Usp_ListGuaranteeFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTOrganizationInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTOrganizationInfo(ByVal strSQL_Condition_TOrganization As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTOrganizationInfo", New Object() {strSQL_Condition_TOrganization})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTOrganizationInfo(ByVal strSQL_Condition_TOrganization As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTOrganizationInfo", New Object() {strSQL_Condition_TOrganization}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTOrganizationInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTOrganizationInfoAsync(ByVal strSQL_Condition_TOrganization As String)
            Me.GetTOrganizationInfoAsync(strSQL_Condition_TOrganization, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTOrganizationInfoAsync(ByVal strSQL_Condition_TOrganization As String, ByVal userState As Object)
            If (Me.GetTOrganizationInfoOperationCompleted Is Nothing) Then
                Me.GetTOrganizationInfoOperationCompleted = AddressOf Me.OnGetTOrganizationInfoOperationCompleted
            End If
            Me.InvokeAsync("GetTOrganizationInfo", New Object() {strSQL_Condition_TOrganization}, Me.GetTOrganizationInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTOrganizationInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTOrganizationInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTOrganizationInfoCompleted(Me, New GetTOrganizationInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTOrganization", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTOrganization(ByVal dsCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateTOrganization", New Object() {dsCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateTOrganization(ByVal dsCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateTOrganization", New Object() {dsCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateTOrganization(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTOrganizationAsync(ByVal dsCommit As System.Data.DataSet)
            Me.UpdateTOrganizationAsync(dsCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTOrganizationAsync(ByVal dsCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateTOrganizationOperationCompleted Is Nothing) Then
                Me.UpdateTOrganizationOperationCompleted = AddressOf Me.OnUpdateTOrganizationOperationCompleted
            End If
            Me.InvokeAsync("UpdateTOrganization", New Object() {dsCommit}, Me.UpdateTOrganizationOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTOrganizationOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTOrganizationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTOrganizationCompleted(Me, New UpdateTOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectOrganization", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectOrganization(ByVal strSQL_Condition_TOrganization As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectOrganization", New Object() {strSQL_Condition_TOrganization})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectOrganization(ByVal strSQL_Condition_TOrganization As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectOrganization", New Object() {strSQL_Condition_TOrganization}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectOrganization(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectOrganizationAsync(ByVal strSQL_Condition_TOrganization As String)
            Me.GetProjectOrganizationAsync(strSQL_Condition_TOrganization, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectOrganizationAsync(ByVal strSQL_Condition_TOrganization As String, ByVal userState As Object)
            If (Me.GetProjectOrganizationOperationCompleted Is Nothing) Then
                Me.GetProjectOrganizationOperationCompleted = AddressOf Me.OnGetProjectOrganizationOperationCompleted
            End If
            Me.InvokeAsync("GetProjectOrganization", New Object() {strSQL_Condition_TOrganization}, Me.GetProjectOrganizationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectOrganizationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectOrganizationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectOrganizationCompleted(Me, New GetProjectOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectOrganization", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectOrganization(ByVal dsCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectOrganization", New Object() {dsCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectOrganization(ByVal dsCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectOrganization", New Object() {dsCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectOrganization(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectOrganizationAsync(ByVal dsCommit As System.Data.DataSet)
            Me.UpdateProjectOrganizationAsync(dsCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectOrganizationAsync(ByVal dsCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectOrganizationOperationCompleted Is Nothing) Then
                Me.UpdateProjectOrganizationOperationCompleted = AddressOf Me.OnUpdateProjectOrganizationOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectOrganization", New Object() {dsCommit}, Me.UpdateProjectOrganizationOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectOrganizationOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectOrganizationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectOrganizationCompleted(Me, New UpdateProjectOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectAppraisement", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectAppraisement(ByVal project_code As String, ByVal EnterpriseName As String, ByVal ServiceType As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectAppraisement", New Object() {project_code, EnterpriseName, ServiceType, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectAppraisement(ByVal project_code As String, ByVal EnterpriseName As String, ByVal ServiceType As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectAppraisement", New Object() {project_code, EnterpriseName, ServiceType, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectAppraisement(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectAppraisementAsync(ByVal project_code As String, ByVal EnterpriseName As String, ByVal ServiceType As String, ByVal userName As String)
            Me.GetProjectAppraisementAsync(project_code, EnterpriseName, ServiceType, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectAppraisementAsync(ByVal project_code As String, ByVal EnterpriseName As String, ByVal ServiceType As String, ByVal userName As String, ByVal userState As Object)
            If (Me.GetProjectAppraisementOperationCompleted Is Nothing) Then
                Me.GetProjectAppraisementOperationCompleted = AddressOf Me.OnGetProjectAppraisementOperationCompleted
            End If
            Me.InvokeAsync("GetProjectAppraisement", New Object() {project_code, EnterpriseName, ServiceType, userName}, Me.GetProjectAppraisementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectAppraisementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectAppraisementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectAppraisementCompleted(Me, New GetProjectAppraisementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCorporationAttendeePerson", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCorporationAttendeePerson(ByVal projectCode As String, ByVal serviceType As String, ByVal role_id As String, ByVal applyPerson As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCorporationAttendeePerson", New Object() {projectCode, serviceType, role_id, applyPerson})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCorporationAttendeePerson(ByVal projectCode As String, ByVal serviceType As String, ByVal role_id As String, ByVal applyPerson As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCorporationAttendeePerson", New Object() {projectCode, serviceType, role_id, applyPerson}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCorporationAttendeePerson(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCorporationAttendeePersonAsync(ByVal projectCode As String, ByVal serviceType As String, ByVal role_id As String, ByVal applyPerson As String)
            Me.GetCorporationAttendeePersonAsync(projectCode, serviceType, role_id, applyPerson, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCorporationAttendeePersonAsync(ByVal projectCode As String, ByVal serviceType As String, ByVal role_id As String, ByVal applyPerson As String, ByVal userState As Object)
            If (Me.GetCorporationAttendeePersonOperationCompleted Is Nothing) Then
                Me.GetCorporationAttendeePersonOperationCompleted = AddressOf Me.OnGetCorporationAttendeePersonOperationCompleted
            End If
            Me.InvokeAsync("GetCorporationAttendeePerson", New Object() {projectCode, serviceType, role_id, applyPerson}, Me.GetCorporationAttendeePersonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCorporationAttendeePersonOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCorporationAttendeePersonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCorporationAttendeePersonCompleted(Me, New GetCorporationAttendeePersonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDefaultPerson", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDefaultPerson(ByVal projectCode As String, ByVal role_id As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDefaultPerson", New Object() {projectCode, role_id})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDefaultPerson(ByVal projectCode As String, ByVal role_id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDefaultPerson", New Object() {projectCode, role_id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDefaultPerson(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDefaultPersonAsync(ByVal projectCode As String, ByVal role_id As String)
            Me.GetDefaultPersonAsync(projectCode, role_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDefaultPersonAsync(ByVal projectCode As String, ByVal role_id As String, ByVal userState As Object)
            If (Me.GetDefaultPersonOperationCompleted Is Nothing) Then
                Me.GetDefaultPersonOperationCompleted = AddressOf Me.OnGetDefaultPersonOperationCompleted
            End If
            Me.InvokeAsync("GetDefaultPerson", New Object() {projectCode, role_id}, Me.GetDefaultPersonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDefaultPersonOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDefaultPersonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDefaultPersonCompleted(Me, New GetDefaultPersonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryProjectRequite", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryProjectRequite(ByVal ProjectCode As String, ByVal Corporation As String, ByVal ServiceType As String, ByVal ManangerA As String, ByVal RefundType As String, ByVal IsNormal As String, ByVal IsPartion As String, ByVal objDate As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryProjectRequite", New Object() {ProjectCode, Corporation, ServiceType, ManangerA, RefundType, IsNormal, IsPartion, objDate, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryProjectRequite(ByVal ProjectCode As String, ByVal Corporation As String, ByVal ServiceType As String, ByVal ManangerA As String, ByVal RefundType As String, ByVal IsNormal As String, ByVal IsPartion As String, ByVal objDate As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryProjectRequite", New Object() {ProjectCode, Corporation, ServiceType, ManangerA, RefundType, IsNormal, IsPartion, objDate, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryProjectRequite(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryProjectRequiteAsync(ByVal ProjectCode As String, ByVal Corporation As String, ByVal ServiceType As String, ByVal ManangerA As String, ByVal RefundType As String, ByVal IsNormal As String, ByVal IsPartion As String, ByVal objDate As String, ByVal userName As String)
            Me.PQueryProjectRequiteAsync(ProjectCode, Corporation, ServiceType, ManangerA, RefundType, IsNormal, IsPartion, objDate, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryProjectRequiteAsync(ByVal ProjectCode As String, ByVal Corporation As String, ByVal ServiceType As String, ByVal ManangerA As String, ByVal RefundType As String, ByVal IsNormal As String, ByVal IsPartion As String, ByVal objDate As String, ByVal userName As String, ByVal userState As Object)
            If (Me.PQueryProjectRequiteOperationCompleted Is Nothing) Then
                Me.PQueryProjectRequiteOperationCompleted = AddressOf Me.OnPQueryProjectRequiteOperationCompleted
            End If
            Me.InvokeAsync("PQueryProjectRequite", New Object() {ProjectCode, Corporation, ServiceType, ManangerA, RefundType, IsNormal, IsPartion, objDate, userName}, Me.PQueryProjectRequiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryProjectRequiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryProjectRequiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryProjectRequiteCompleted(Me, New PQueryProjectRequiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryIntentLetter", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryIntentLetter(ByVal strCondition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryIntentLetter", New Object() {strCondition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryIntentLetter(ByVal strCondition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryIntentLetter", New Object() {strCondition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryIntentLetter(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryIntentLetterAsync(ByVal strCondition As String)
            Me.PQueryIntentLetterAsync(strCondition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryIntentLetterAsync(ByVal strCondition As String, ByVal userState As Object)
            If (Me.PQueryIntentLetterOperationCompleted Is Nothing) Then
                Me.PQueryIntentLetterOperationCompleted = AddressOf Me.OnPQueryIntentLetterOperationCompleted
            End If
            Me.InvokeAsync("PQueryIntentLetter", New Object() {strCondition}, Me.PQueryIntentLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryIntentLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryIntentLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryIntentLetterCompleted(Me, New PQueryIntentLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryIntentLetterInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryIntentLetterInfo(ByVal PutOutType As String, ByVal signStartDate As String, ByVal signEndDate As String, ByVal issueStartDate As String, ByVal issueEndDate As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryIntentLetterInfo", New Object() {PutOutType, signStartDate, signEndDate, issueStartDate, issueEndDate, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryIntentLetterInfo(ByVal PutOutType As String, ByVal signStartDate As String, ByVal signEndDate As String, ByVal issueStartDate As String, ByVal issueEndDate As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryIntentLetterInfo", New Object() {PutOutType, signStartDate, signEndDate, issueStartDate, issueEndDate, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryIntentLetterInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryIntentLetterInfoAsync(ByVal PutOutType As String, ByVal signStartDate As String, ByVal signEndDate As String, ByVal issueStartDate As String, ByVal issueEndDate As String, ByVal userName As String)
            Me.PQueryIntentLetterInfoAsync(PutOutType, signStartDate, signEndDate, issueStartDate, issueEndDate, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryIntentLetterInfoAsync(ByVal PutOutType As String, ByVal signStartDate As String, ByVal signEndDate As String, ByVal issueStartDate As String, ByVal issueEndDate As String, ByVal userName As String, ByVal userState As Object)
            If (Me.PQueryIntentLetterInfoOperationCompleted Is Nothing) Then
                Me.PQueryIntentLetterInfoOperationCompleted = AddressOf Me.OnPQueryIntentLetterInfoOperationCompleted
            End If
            Me.InvokeAsync("PQueryIntentLetterInfo", New Object() {PutOutType, signStartDate, signEndDate, issueStartDate, issueEndDate, userName}, Me.PQueryIntentLetterInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryIntentLetterInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryIntentLetterInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryIntentLetterInfoCompleted(Me, New PQueryIntentLetterInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PCopyOppGuarantee", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PCopyOppGuarantee(ByVal ProjectCode As String, ByVal SourceProjectCode As String, ByVal SourceSerialNum As String, ByVal CreatePerson As String, ByVal CreateDate As Date) As String
            Dim results() As Object = Me.Invoke("PCopyOppGuarantee", New Object() {ProjectCode, SourceProjectCode, SourceSerialNum, CreatePerson, CreateDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginPCopyOppGuarantee(ByVal ProjectCode As String, ByVal SourceProjectCode As String, ByVal SourceSerialNum As String, ByVal CreatePerson As String, ByVal CreateDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PCopyOppGuarantee", New Object() {ProjectCode, SourceProjectCode, SourceSerialNum, CreatePerson, CreateDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPCopyOppGuarantee(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PCopyOppGuaranteeAsync(ByVal ProjectCode As String, ByVal SourceProjectCode As String, ByVal SourceSerialNum As String, ByVal CreatePerson As String, ByVal CreateDate As Date)
            Me.PCopyOppGuaranteeAsync(ProjectCode, SourceProjectCode, SourceSerialNum, CreatePerson, CreateDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PCopyOppGuaranteeAsync(ByVal ProjectCode As String, ByVal SourceProjectCode As String, ByVal SourceSerialNum As String, ByVal CreatePerson As String, ByVal CreateDate As Date, ByVal userState As Object)
            If (Me.PCopyOppGuaranteeOperationCompleted Is Nothing) Then
                Me.PCopyOppGuaranteeOperationCompleted = AddressOf Me.OnPCopyOppGuaranteeOperationCompleted
            End If
            Me.InvokeAsync("PCopyOppGuarantee", New Object() {ProjectCode, SourceProjectCode, SourceSerialNum, CreatePerson, CreateDate}, Me.PCopyOppGuaranteeOperationCompleted, userState)
        End Sub
        
        Private Sub OnPCopyOppGuaranteeOperationCompleted(ByVal arg As Object)
            If (Not (Me.PCopyOppGuaranteeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PCopyOppGuaranteeCompleted(Me, New PCopyOppGuaranteeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGuarantyInfoEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGuarantyInfoEx(ByVal ProjectCode As String, ByVal CorporationName As String, ByVal ItemValue As String, ByVal OppGuaranteeForm As String, ByVal EvaluateDate As Object, ByVal Status As String, ByVal GuarantyType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetGuarantyInfoEx", New Object() {ProjectCode, CorporationName, ItemValue, OppGuaranteeForm, EvaluateDate, Status, GuarantyType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetGuarantyInfoEx(ByVal ProjectCode As String, ByVal CorporationName As String, ByVal ItemValue As String, ByVal OppGuaranteeForm As String, ByVal EvaluateDate As Object, ByVal Status As String, ByVal GuarantyType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetGuarantyInfoEx", New Object() {ProjectCode, CorporationName, ItemValue, OppGuaranteeForm, EvaluateDate, Status, GuarantyType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetGuarantyInfoEx(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGuarantyInfoExAsync(ByVal ProjectCode As String, ByVal CorporationName As String, ByVal ItemValue As String, ByVal OppGuaranteeForm As String, ByVal EvaluateDate As Object, ByVal Status As String, ByVal GuarantyType As String)
            Me.GetGuarantyInfoExAsync(ProjectCode, CorporationName, ItemValue, OppGuaranteeForm, EvaluateDate, Status, GuarantyType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGuarantyInfoExAsync(ByVal ProjectCode As String, ByVal CorporationName As String, ByVal ItemValue As String, ByVal OppGuaranteeForm As String, ByVal EvaluateDate As Object, ByVal Status As String, ByVal GuarantyType As String, ByVal userState As Object)
            If (Me.GetGuarantyInfoExOperationCompleted Is Nothing) Then
                Me.GetGuarantyInfoExOperationCompleted = AddressOf Me.OnGetGuarantyInfoExOperationCompleted
            End If
            Me.InvokeAsync("GetGuarantyInfoEx", New Object() {ProjectCode, CorporationName, ItemValue, OppGuaranteeForm, EvaluateDate, Status, GuarantyType}, Me.GetGuarantyInfoExOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGuarantyInfoExOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGuarantyInfoExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGuarantyInfoExCompleted(Me, New GetGuarantyInfoExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectResponsibleInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectResponsibleInfo(ByVal strSQL_Condition_ProjectResponsible As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectResponsibleInfo", New Object() {strSQL_Condition_ProjectResponsible})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectResponsibleInfo(ByVal strSQL_Condition_ProjectResponsible As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectResponsibleInfo", New Object() {strSQL_Condition_ProjectResponsible}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectResponsibleInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectResponsibleInfoAsync(ByVal strSQL_Condition_ProjectResponsible As String)
            Me.GetProjectResponsibleInfoAsync(strSQL_Condition_ProjectResponsible, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectResponsibleInfoAsync(ByVal strSQL_Condition_ProjectResponsible As String, ByVal userState As Object)
            If (Me.GetProjectResponsibleInfoOperationCompleted Is Nothing) Then
                Me.GetProjectResponsibleInfoOperationCompleted = AddressOf Me.OnGetProjectResponsibleInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectResponsibleInfo", New Object() {strSQL_Condition_ProjectResponsible}, Me.GetProjectResponsibleInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectResponsibleInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectResponsibleInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectResponsibleInfoCompleted(Me, New GetProjectResponsibleInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectResponsible", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectResponsible(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectResponsible", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectResponsible(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectResponsible", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectResponsible(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectResponsibleAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProjectResponsibleAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectResponsibleAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectResponsibleOperationCompleted Is Nothing) Then
                Me.UpdateProjectResponsibleOperationCompleted = AddressOf Me.OnUpdateProjectResponsibleOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectResponsible", New Object() {dstCommit}, Me.UpdateProjectResponsibleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectResponsibleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectResponsibleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectResponsibleCompleted(Me, New UpdateProjectResponsibleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryOppEvaluate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryOppEvaluate(ByVal ProjectCode As String, ByVal CorporationName As String, ByVal ManagerA As String, ByVal Evaluater As String, ByVal EvaluateStatus As String, ByVal BookFrom As String, ByVal BookTo As String, ByVal AffirmFrom As String, ByVal AffirmTo As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryOppEvaluate", New Object() {ProjectCode, CorporationName, ManagerA, Evaluater, EvaluateStatus, BookFrom, BookTo, AffirmFrom, AffirmTo, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryOppEvaluate(ByVal ProjectCode As String, ByVal CorporationName As String, ByVal ManagerA As String, ByVal Evaluater As String, ByVal EvaluateStatus As String, ByVal BookFrom As String, ByVal BookTo As String, ByVal AffirmFrom As String, ByVal AffirmTo As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryOppEvaluate", New Object() {ProjectCode, CorporationName, ManagerA, Evaluater, EvaluateStatus, BookFrom, BookTo, AffirmFrom, AffirmTo, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryOppEvaluate(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryOppEvaluateAsync(ByVal ProjectCode As String, ByVal CorporationName As String, ByVal ManagerA As String, ByVal Evaluater As String, ByVal EvaluateStatus As String, ByVal BookFrom As String, ByVal BookTo As String, ByVal AffirmFrom As String, ByVal AffirmTo As String, ByVal userName As String)
            Me.PQueryOppEvaluateAsync(ProjectCode, CorporationName, ManagerA, Evaluater, EvaluateStatus, BookFrom, BookTo, AffirmFrom, AffirmTo, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryOppEvaluateAsync(ByVal ProjectCode As String, ByVal CorporationName As String, ByVal ManagerA As String, ByVal Evaluater As String, ByVal EvaluateStatus As String, ByVal BookFrom As String, ByVal BookTo As String, ByVal AffirmFrom As String, ByVal AffirmTo As String, ByVal userName As String, ByVal userState As Object)
            If (Me.PQueryOppEvaluateOperationCompleted Is Nothing) Then
                Me.PQueryOppEvaluateOperationCompleted = AddressOf Me.OnPQueryOppEvaluateOperationCompleted
            End If
            Me.InvokeAsync("PQueryOppEvaluate", New Object() {ProjectCode, CorporationName, ManagerA, Evaluater, EvaluateStatus, BookFrom, BookTo, AffirmFrom, AffirmTo, userName}, Me.PQueryOppEvaluateOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryOppEvaluateOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryOppEvaluateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryOppEvaluateCompleted(Me, New PQueryOppEvaluateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWfProjectMessagesInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWfProjectMessagesInfo(ByVal strSQL As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWfProjectMessagesInfo", New Object() {strSQL})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWfProjectMessagesInfo(ByVal strSQL As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWfProjectMessagesInfo", New Object() {strSQL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWfProjectMessagesInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectMessagesInfoAsync(ByVal strSQL As String)
            Me.GetWfProjectMessagesInfoAsync(strSQL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectMessagesInfoAsync(ByVal strSQL As String, ByVal userState As Object)
            If (Me.GetWfProjectMessagesInfoOperationCompleted Is Nothing) Then
                Me.GetWfProjectMessagesInfoOperationCompleted = AddressOf Me.OnGetWfProjectMessagesInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWfProjectMessagesInfo", New Object() {strSQL}, Me.GetWfProjectMessagesInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWfProjectMessagesInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWfProjectMessagesInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWfProjectMessagesInfoCompleted(Me, New GetWfProjectMessagesInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWfProjectMessages", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWfProjectMessages(ByVal ds As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWfProjectMessages", New Object() {ds})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWfProjectMessages(ByVal ds As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWfProjectMessages", New Object() {ds}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWfProjectMessages(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectMessagesAsync(ByVal ds As System.Data.DataSet)
            Me.UpdateWfProjectMessagesAsync(ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectMessagesAsync(ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWfProjectMessagesOperationCompleted Is Nothing) Then
                Me.UpdateWfProjectMessagesOperationCompleted = AddressOf Me.OnUpdateWfProjectMessagesOperationCompleted
            End If
            Me.InvokeAsync("UpdateWfProjectMessages", New Object() {ds}, Me.UpdateWfProjectMessagesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWfProjectMessagesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWfProjectMessagesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWfProjectMessagesCompleted(Me, New UpdateWfProjectMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWfProjectTaskTransferInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWfProjectTaskTransferInfo(ByVal strSQL As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWfProjectTaskTransferInfo", New Object() {strSQL})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWfProjectTaskTransferInfo(ByVal strSQL As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWfProjectTaskTransferInfo", New Object() {strSQL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWfProjectTaskTransferInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectTaskTransferInfoAsync(ByVal strSQL As String)
            Me.GetWfProjectTaskTransferInfoAsync(strSQL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectTaskTransferInfoAsync(ByVal strSQL As String, ByVal userState As Object)
            If (Me.GetWfProjectTaskTransferInfoOperationCompleted Is Nothing) Then
                Me.GetWfProjectTaskTransferInfoOperationCompleted = AddressOf Me.OnGetWfProjectTaskTransferInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWfProjectTaskTransferInfo", New Object() {strSQL}, Me.GetWfProjectTaskTransferInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWfProjectTaskTransferInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWfProjectTaskTransferInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWfProjectTaskTransferInfoCompleted(Me, New GetWfProjectTaskTransferInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWfProjectTaskTransfer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWfProjectTaskTransfer(ByVal ds As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWfProjectTaskTransfer", New Object() {ds})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWfProjectTaskTransfer(ByVal ds As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWfProjectTaskTransfer", New Object() {ds}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWfProjectTaskTransfer(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectTaskTransferAsync(ByVal ds As System.Data.DataSet)
            Me.UpdateWfProjectTaskTransferAsync(ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectTaskTransferAsync(ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWfProjectTaskTransferOperationCompleted Is Nothing) Then
                Me.UpdateWfProjectTaskTransferOperationCompleted = AddressOf Me.OnUpdateWfProjectTaskTransferOperationCompleted
            End If
            Me.InvokeAsync("UpdateWfProjectTaskTransfer", New Object() {ds}, Me.UpdateWfProjectTaskTransferOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWfProjectTaskTransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWfProjectTaskTransferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWfProjectTaskTransferCompleted(Me, New UpdateWfProjectTaskTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWfProjectTimingTaskInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWfProjectTimingTaskInfo(ByVal strSQL As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWfProjectTimingTaskInfo", New Object() {strSQL})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWfProjectTimingTaskInfo(ByVal strSQL As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWfProjectTimingTaskInfo", New Object() {strSQL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWfProjectTimingTaskInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectTimingTaskInfoAsync(ByVal strSQL As String)
            Me.GetWfProjectTimingTaskInfoAsync(strSQL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectTimingTaskInfoAsync(ByVal strSQL As String, ByVal userState As Object)
            If (Me.GetWfProjectTimingTaskInfoOperationCompleted Is Nothing) Then
                Me.GetWfProjectTimingTaskInfoOperationCompleted = AddressOf Me.OnGetWfProjectTimingTaskInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWfProjectTimingTaskInfo", New Object() {strSQL}, Me.GetWfProjectTimingTaskInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWfProjectTimingTaskInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWfProjectTimingTaskInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWfProjectTimingTaskInfoCompleted(Me, New GetWfProjectTimingTaskInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWfProjectTimingTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWfProjectTimingTask(ByVal ds As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWfProjectTimingTask", New Object() {ds})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWfProjectTimingTask(ByVal ds As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWfProjectTimingTask", New Object() {ds}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWfProjectTimingTask(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectTimingTaskAsync(ByVal ds As System.Data.DataSet)
            Me.UpdateWfProjectTimingTaskAsync(ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectTimingTaskAsync(ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWfProjectTimingTaskOperationCompleted Is Nothing) Then
                Me.UpdateWfProjectTimingTaskOperationCompleted = AddressOf Me.OnUpdateWfProjectTimingTaskOperationCompleted
            End If
            Me.InvokeAsync("UpdateWfProjectTimingTask", New Object() {ds}, Me.UpdateWfProjectTimingTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWfProjectTimingTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWfProjectTimingTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWfProjectTimingTaskCompleted(Me, New UpdateWfProjectTimingTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWfProjectTrackInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWfProjectTrackInfo(ByVal strSQL As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWfProjectTrackInfo", New Object() {strSQL})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWfProjectTrackInfo(ByVal strSQL As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWfProjectTrackInfo", New Object() {strSQL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWfProjectTrackInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectTrackInfoAsync(ByVal strSQL As String)
            Me.GetWfProjectTrackInfoAsync(strSQL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectTrackInfoAsync(ByVal strSQL As String, ByVal userState As Object)
            If (Me.GetWfProjectTrackInfoOperationCompleted Is Nothing) Then
                Me.GetWfProjectTrackInfoOperationCompleted = AddressOf Me.OnGetWfProjectTrackInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWfProjectTrackInfo", New Object() {strSQL}, Me.GetWfProjectTrackInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWfProjectTrackInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWfProjectTrackInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWfProjectTrackInfoCompleted(Me, New GetWfProjectTrackInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWfProjectTrack", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWfProjectTrack(ByVal ds As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWfProjectTrack", New Object() {ds})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWfProjectTrack(ByVal ds As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWfProjectTrack", New Object() {ds}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWfProjectTrack(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectTrackAsync(ByVal ds As System.Data.DataSet)
            Me.UpdateWfProjectTrackAsync(ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectTrackAsync(ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWfProjectTrackOperationCompleted Is Nothing) Then
                Me.UpdateWfProjectTrackOperationCompleted = AddressOf Me.OnUpdateWfProjectTrackOperationCompleted
            End If
            Me.InvokeAsync("UpdateWfProjectTrack", New Object() {ds}, Me.UpdateWfProjectTrackOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWfProjectTrackOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWfProjectTrackCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWfProjectTrackCompleted(Me, New UpdateWfProjectTrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWfProjectTaskInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWfProjectTaskInfo(ByVal strSQL As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWfProjectTaskInfo", New Object() {strSQL})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWfProjectTaskInfo(ByVal strSQL As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWfProjectTaskInfo", New Object() {strSQL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWfProjectTaskInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectTaskInfoAsync(ByVal strSQL As String)
            Me.GetWfProjectTaskInfoAsync(strSQL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectTaskInfoAsync(ByVal strSQL As String, ByVal userState As Object)
            If (Me.GetWfProjectTaskInfoOperationCompleted Is Nothing) Then
                Me.GetWfProjectTaskInfoOperationCompleted = AddressOf Me.OnGetWfProjectTaskInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWfProjectTaskInfo", New Object() {strSQL}, Me.GetWfProjectTaskInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWfProjectTaskInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWfProjectTaskInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWfProjectTaskInfoCompleted(Me, New GetWfProjectTaskInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWfProjectTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWfProjectTask(ByVal ds As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWfProjectTask", New Object() {ds})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWfProjectTask(ByVal ds As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWfProjectTask", New Object() {ds}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWfProjectTask(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectTaskAsync(ByVal ds As System.Data.DataSet)
            Me.UpdateWfProjectTaskAsync(ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectTaskAsync(ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWfProjectTaskOperationCompleted Is Nothing) Then
                Me.UpdateWfProjectTaskOperationCompleted = AddressOf Me.OnUpdateWfProjectTaskOperationCompleted
            End If
            Me.InvokeAsync("UpdateWfProjectTask", New Object() {ds}, Me.UpdateWfProjectTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWfProjectTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWfProjectTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWfProjectTaskCompleted(Me, New UpdateWfProjectTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddMsg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMsg(ByVal workFlowID As String, ByVal projectID As String, ByVal taskID As String, ByVal tmpStaffID As String, ByVal messageID As String, ByVal readFlag As String) As Object
            Dim results() As Object = Me.Invoke("AddMsg", New Object() {workFlowID, projectID, taskID, tmpStaffID, messageID, readFlag})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginAddMsg(ByVal workFlowID As String, ByVal projectID As String, ByVal taskID As String, ByVal tmpStaffID As String, ByVal messageID As String, ByVal readFlag As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddMsg", New Object() {workFlowID, projectID, taskID, tmpStaffID, messageID, readFlag}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddMsg(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMsgAsync(ByVal workFlowID As String, ByVal projectID As String, ByVal taskID As String, ByVal tmpStaffID As String, ByVal messageID As String, ByVal readFlag As String)
            Me.AddMsgAsync(workFlowID, projectID, taskID, tmpStaffID, messageID, readFlag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMsgAsync(ByVal workFlowID As String, ByVal projectID As String, ByVal taskID As String, ByVal tmpStaffID As String, ByVal messageID As String, ByVal readFlag As String, ByVal userState As Object)
            If (Me.AddMsgOperationCompleted Is Nothing) Then
                Me.AddMsgOperationCompleted = AddressOf Me.OnAddMsgOperationCompleted
            End If
            Me.InvokeAsync("AddMsg", New Object() {workFlowID, projectID, taskID, tmpStaffID, messageID, readFlag}, Me.AddMsgOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMsgOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMsgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMsgCompleted(Me, New AddMsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectFinanceAnalyse", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchProjectFinanceAnalyse(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectFinanceAnalyse", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectFinanceAnalyse(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectFinanceAnalyse", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectFinanceAnalyse(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectFinanceAnalyseAsync(ByVal Condition As String)
            Me.FetchProjectFinanceAnalyseAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectFinanceAnalyseAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchProjectFinanceAnalyseOperationCompleted Is Nothing) Then
                Me.FetchProjectFinanceAnalyseOperationCompleted = AddressOf Me.OnFetchProjectFinanceAnalyseOperationCompleted
            End If
            Me.InvokeAsync("FetchProjectFinanceAnalyse", New Object() {Condition}, Me.FetchProjectFinanceAnalyseOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectFinanceAnalyseOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectFinanceAnalyseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectFinanceAnalyseCompleted(Me, New FetchProjectFinanceAnalyseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchProjectFinanceAnalyse1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectFinanceAnalyseEx", RequestElementName:="FetchProjectFinanceAnalyseEx", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchProjectFinanceAnalyseExResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchProjectFinanceAnalyse(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String) As <System.Xml.Serialization.XmlElementAttribute("FetchProjectFinanceAnalyseExResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectFinanceAnalyse1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectFinanceAnalyse1(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectFinanceAnalyse1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectFinanceAnalyse1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectFinanceAnalyse1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String)
            Me.FetchProjectFinanceAnalyse1Async(ProjectNo, CorporationNo, Phase, Month, MonthLast, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectFinanceAnalyse1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal userState As Object)
            If (Me.FetchProjectFinanceAnalyse1OperationCompleted Is Nothing) Then
                Me.FetchProjectFinanceAnalyse1OperationCompleted = AddressOf Me.OnFetchProjectFinanceAnalyse1OperationCompleted
            End If
            Me.InvokeAsync("FetchProjectFinanceAnalyse1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, Me.FetchProjectFinanceAnalyse1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectFinanceAnalyse1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectFinanceAnalyse1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectFinanceAnalyse1Completed(Me, New FetchProjectFinanceAnalyse1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateProjectFinanceAnalyse", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateProjectFinanceAnalyse(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateProjectFinanceAnalyse", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateProjectFinanceAnalyse(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateProjectFinanceAnalyse", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateProjectFinanceAnalyse(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateProjectFinanceAnalyseAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String)
            Me.CreateProjectFinanceAnalyseAsync(ProjectNo, CorporationNo, Phase, Month, MonthLast, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateProjectFinanceAnalyseAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal userState As Object)
            If (Me.CreateProjectFinanceAnalyseOperationCompleted Is Nothing) Then
                Me.CreateProjectFinanceAnalyseOperationCompleted = AddressOf Me.OnCreateProjectFinanceAnalyseOperationCompleted
            End If
            Me.InvokeAsync("CreateProjectFinanceAnalyse", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, Me.CreateProjectFinanceAnalyseOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateProjectFinanceAnalyseOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateProjectFinanceAnalyseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateProjectFinanceAnalyseCompleted(Me, New CreateProjectFinanceAnalyseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectFinanceAnalyseIntegration", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchProjectFinanceAnalyseIntegration(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal ThisYear As String, ByVal LastYear1 As String, ByVal LastYear2 As String, ByVal LastYear3 As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectFinanceAnalyseIntegration", New Object() {ProjectNo, CorporationNo, Phase, ThisYear, LastYear1, LastYear2, LastYear3})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectFinanceAnalyseIntegration(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal ThisYear As String, ByVal LastYear1 As String, ByVal LastYear2 As String, ByVal LastYear3 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectFinanceAnalyseIntegration", New Object() {ProjectNo, CorporationNo, Phase, ThisYear, LastYear1, LastYear2, LastYear3}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectFinanceAnalyseIntegration(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectFinanceAnalyseIntegrationAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal ThisYear As String, ByVal LastYear1 As String, ByVal LastYear2 As String, ByVal LastYear3 As String)
            Me.FetchProjectFinanceAnalyseIntegrationAsync(ProjectNo, CorporationNo, Phase, ThisYear, LastYear1, LastYear2, LastYear3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectFinanceAnalyseIntegrationAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal ThisYear As String, ByVal LastYear1 As String, ByVal LastYear2 As String, ByVal LastYear3 As String, ByVal userState As Object)
            If (Me.FetchProjectFinanceAnalyseIntegrationOperationCompleted Is Nothing) Then
                Me.FetchProjectFinanceAnalyseIntegrationOperationCompleted = AddressOf Me.OnFetchProjectFinanceAnalyseIntegrationOperationCompleted
            End If
            Me.InvokeAsync("FetchProjectFinanceAnalyseIntegration", New Object() {ProjectNo, CorporationNo, Phase, ThisYear, LastYear1, LastYear2, LastYear3}, Me.FetchProjectFinanceAnalyseIntegrationOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectFinanceAnalyseIntegrationOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectFinanceAnalyseIntegrationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectFinanceAnalyseIntegrationCompleted(Me, New FetchProjectFinanceAnalyseIntegrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchFinanceAnalyseIndex", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchFinanceAnalyseIndex(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchFinanceAnalyseIndex", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchFinanceAnalyseIndex(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchFinanceAnalyseIndex", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchFinanceAnalyseIndex(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchFinanceAnalyseIndexAsync(ByVal Condition As String)
            Me.FetchFinanceAnalyseIndexAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchFinanceAnalyseIndexAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchFinanceAnalyseIndexOperationCompleted Is Nothing) Then
                Me.FetchFinanceAnalyseIndexOperationCompleted = AddressOf Me.OnFetchFinanceAnalyseIndexOperationCompleted
            End If
            Me.InvokeAsync("FetchFinanceAnalyseIndex", New Object() {Condition}, Me.FetchFinanceAnalyseIndexOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchFinanceAnalyseIndexOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchFinanceAnalyseIndexCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchFinanceAnalyseIndexCompleted(Me, New FetchFinanceAnalyseIndexCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchFinanceAnalyseIndex1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchFinanceAnalyseIndexEx", RequestElementName:="FetchFinanceAnalyseIndexEx", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchFinanceAnalyseIndexExResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchFinanceAnalyseIndex(ByVal IndexType As String, ByVal IndexID As String) As <System.Xml.Serialization.XmlElementAttribute("FetchFinanceAnalyseIndexExResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchFinanceAnalyseIndex1", New Object() {IndexType, IndexID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchFinanceAnalyseIndex1(ByVal IndexType As String, ByVal IndexID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchFinanceAnalyseIndex1", New Object() {IndexType, IndexID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchFinanceAnalyseIndex1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchFinanceAnalyseIndex1Async(ByVal IndexType As String, ByVal IndexID As String)
            Me.FetchFinanceAnalyseIndex1Async(IndexType, IndexID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchFinanceAnalyseIndex1Async(ByVal IndexType As String, ByVal IndexID As String, ByVal userState As Object)
            If (Me.FetchFinanceAnalyseIndex1OperationCompleted Is Nothing) Then
                Me.FetchFinanceAnalyseIndex1OperationCompleted = AddressOf Me.OnFetchFinanceAnalyseIndex1OperationCompleted
            End If
            Me.InvokeAsync("FetchFinanceAnalyseIndex1", New Object() {IndexType, IndexID}, Me.FetchFinanceAnalyseIndex1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchFinanceAnalyseIndex1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchFinanceAnalyseIndex1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchFinanceAnalyseIndex1Completed(Me, New FetchFinanceAnalyseIndex1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectCreditQuality2", RequestElementName:="FetchProjectCreditQuality2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchProjectCreditQuality2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchProjectCreditQuality(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String) As <System.Xml.Serialization.XmlElementAttribute("FetchProjectCreditQuality2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectCreditQuality", New Object() {ProjectNo, CorporationNo, Phase})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectCreditQuality(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectCreditQuality", New Object() {ProjectNo, CorporationNo, Phase}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectCreditQuality(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCreditQualityAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String)
            Me.FetchProjectCreditQualityAsync(ProjectNo, CorporationNo, Phase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCreditQualityAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal userState As Object)
            If (Me.FetchProjectCreditQualityOperationCompleted Is Nothing) Then
                Me.FetchProjectCreditQualityOperationCompleted = AddressOf Me.OnFetchProjectCreditQualityOperationCompleted
            End If
            Me.InvokeAsync("FetchProjectCreditQuality", New Object() {ProjectNo, CorporationNo, Phase}, Me.FetchProjectCreditQualityOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectCreditQualityOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectCreditQualityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectCreditQualityCompleted(Me, New FetchProjectCreditQualityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateProjectCreditQuality", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateProjectCreditQuality(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateProjectCreditQuality", New Object() {ProjectNo, CorporationNo, Phase, Month})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateProjectCreditQuality(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateProjectCreditQuality", New Object() {ProjectNo, CorporationNo, Phase, Month}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateProjectCreditQuality(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateProjectCreditQualityAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String)
            Me.CreateProjectCreditQualityAsync(ProjectNo, CorporationNo, Phase, Month, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateProjectCreditQualityAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal userState As Object)
            If (Me.CreateProjectCreditQualityOperationCompleted Is Nothing) Then
                Me.CreateProjectCreditQualityOperationCompleted = AddressOf Me.OnCreateProjectCreditQualityOperationCompleted
            End If
            Me.InvokeAsync("CreateProjectCreditQuality", New Object() {ProjectNo, CorporationNo, Phase, Month}, Me.CreateProjectCreditQualityOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateProjectCreditQualityOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateProjectCreditQualityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateProjectCreditQualityCompleted(Me, New CreateProjectCreditQualityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectCreditQuality", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectCreditQuality(ByVal dsCommit As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("UpdateProjectCreditQuality", New Object() {dsCommit})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectCreditQuality(ByVal dsCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectCreditQuality", New Object() {dsCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectCreditQuality(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectCreditQualityAsync(ByVal dsCommit As System.Data.DataSet)
            Me.UpdateProjectCreditQualityAsync(dsCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectCreditQualityAsync(ByVal dsCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectCreditQualityOperationCompleted Is Nothing) Then
                Me.UpdateProjectCreditQualityOperationCompleted = AddressOf Me.OnUpdateProjectCreditQualityOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectCreditQuality", New Object() {dsCommit}, Me.UpdateProjectCreditQualityOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectCreditQualityOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectCreditQualityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectCreditQualityCompleted(Me, New UpdateProjectCreditQualityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCreditQualityStandard", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCreditQualityStandard(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCreditQualityStandard", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCreditQualityStandard(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCreditQualityStandard", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCreditQualityStandard(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQualityStandardAsync(ByVal Condition As String)
            Me.FetchCreditQualityStandardAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQualityStandardAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchCreditQualityStandardOperationCompleted Is Nothing) Then
                Me.FetchCreditQualityStandardOperationCompleted = AddressOf Me.OnFetchCreditQualityStandardOperationCompleted
            End If
            Me.InvokeAsync("FetchCreditQualityStandard", New Object() {Condition}, Me.FetchCreditQualityStandardOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCreditQualityStandardOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCreditQualityStandardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCreditQualityStandardCompleted(Me, New FetchCreditQualityStandardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchCreditQualityStandard1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCreditQualityStandard2", RequestElementName:="FetchCreditQualityStandard2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchCreditQualityStandard2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCreditQualityStandard(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String) As <System.Xml.Serialization.XmlElementAttribute("FetchCreditQualityStandard2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCreditQualityStandard1", New Object() {SystemID, IndexType, IndexID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCreditQualityStandard1(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCreditQualityStandard1", New Object() {SystemID, IndexType, IndexID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCreditQualityStandard1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQualityStandard1Async(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String)
            Me.FetchCreditQualityStandard1Async(SystemID, IndexType, IndexID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQualityStandard1Async(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String, ByVal userState As Object)
            If (Me.FetchCreditQualityStandard1OperationCompleted Is Nothing) Then
                Me.FetchCreditQualityStandard1OperationCompleted = AddressOf Me.OnFetchCreditQualityStandard1OperationCompleted
            End If
            Me.InvokeAsync("FetchCreditQualityStandard1", New Object() {SystemID, IndexType, IndexID}, Me.FetchCreditQualityStandard1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCreditQualityStandard1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCreditQualityStandard1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCreditQualityStandard1Completed(Me, New FetchCreditQualityStandard1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCreditQualityIndex", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCreditQualityIndex(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCreditQualityIndex", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCreditQualityIndex(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCreditQualityIndex", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCreditQualityIndex(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQualityIndexAsync(ByVal Condition As String)
            Me.FetchCreditQualityIndexAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQualityIndexAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchCreditQualityIndexOperationCompleted Is Nothing) Then
                Me.FetchCreditQualityIndexOperationCompleted = AddressOf Me.OnFetchCreditQualityIndexOperationCompleted
            End If
            Me.InvokeAsync("FetchCreditQualityIndex", New Object() {Condition}, Me.FetchCreditQualityIndexOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCreditQualityIndexOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCreditQualityIndexCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCreditQualityIndexCompleted(Me, New FetchCreditQualityIndexCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchCreditQualityIndex1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCreditQualityIndex2", RequestElementName:="FetchCreditQualityIndex2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchCreditQualityIndex2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCreditQualityIndex(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String) As <System.Xml.Serialization.XmlElementAttribute("FetchCreditQualityIndex2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCreditQualityIndex1", New Object() {SystemID, IndexType, IndexID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCreditQualityIndex1(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCreditQualityIndex1", New Object() {SystemID, IndexType, IndexID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCreditQualityIndex1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQualityIndex1Async(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String)
            Me.FetchCreditQualityIndex1Async(SystemID, IndexType, IndexID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQualityIndex1Async(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String, ByVal userState As Object)
            If (Me.FetchCreditQualityIndex1OperationCompleted Is Nothing) Then
                Me.FetchCreditQualityIndex1OperationCompleted = AddressOf Me.OnFetchCreditQualityIndex1OperationCompleted
            End If
            Me.InvokeAsync("FetchCreditQualityIndex1", New Object() {SystemID, IndexType, IndexID}, Me.FetchCreditQualityIndex1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCreditQualityIndex1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCreditQualityIndex1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCreditQualityIndex1Completed(Me, New FetchCreditQualityIndex1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectCreditQuantity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchProjectCreditQuantity(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectCreditQuantity", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectCreditQuantity(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectCreditQuantity", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectCreditQuantity(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCreditQuantityAsync(ByVal Condition As String)
            Me.FetchProjectCreditQuantityAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCreditQuantityAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchProjectCreditQuantityOperationCompleted Is Nothing) Then
                Me.FetchProjectCreditQuantityOperationCompleted = AddressOf Me.OnFetchProjectCreditQuantityOperationCompleted
            End If
            Me.InvokeAsync("FetchProjectCreditQuantity", New Object() {Condition}, Me.FetchProjectCreditQuantityOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectCreditQuantityOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectCreditQuantityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectCreditQuantityCompleted(Me, New FetchProjectCreditQuantityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchProjectCreditQuantity1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectCreditQuantity2", RequestElementName:="FetchProjectCreditQuantity2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchProjectCreditQuantity2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchProjectCreditQuantity(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String) As <System.Xml.Serialization.XmlElementAttribute("FetchProjectCreditQuantity2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectCreditQuantity1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectCreditQuantity1(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectCreditQuantity1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectCreditQuantity1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCreditQuantity1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String)
            Me.FetchProjectCreditQuantity1Async(ProjectNo, CorporationNo, Phase, Month, MonthLast, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCreditQuantity1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal userState As Object)
            If (Me.FetchProjectCreditQuantity1OperationCompleted Is Nothing) Then
                Me.FetchProjectCreditQuantity1OperationCompleted = AddressOf Me.OnFetchProjectCreditQuantity1OperationCompleted
            End If
            Me.InvokeAsync("FetchProjectCreditQuantity1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, Me.FetchProjectCreditQuantity1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectCreditQuantity1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectCreditQuantity1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectCreditQuantity1Completed(Me, New FetchProjectCreditQuantity1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DuplicateCreditAppraise", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function DuplicateCreditAppraise(ByVal sourceID As Integer) As Integer
            Dim results() As Object = Me.Invoke("DuplicateCreditAppraise", New Object() {sourceID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginDuplicateCreditAppraise(ByVal sourceID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DuplicateCreditAppraise", New Object() {sourceID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDuplicateCreditAppraise(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DuplicateCreditAppraiseAsync(ByVal sourceID As Integer)
            Me.DuplicateCreditAppraiseAsync(sourceID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DuplicateCreditAppraiseAsync(ByVal sourceID As Integer, ByVal userState As Object)
            If (Me.DuplicateCreditAppraiseOperationCompleted Is Nothing) Then
                Me.DuplicateCreditAppraiseOperationCompleted = AddressOf Me.OnDuplicateCreditAppraiseOperationCompleted
            End If
            Me.InvokeAsync("DuplicateCreditAppraise", New Object() {sourceID}, Me.DuplicateCreditAppraiseOperationCompleted, userState)
        End Sub
        
        Private Sub OnDuplicateCreditAppraiseOperationCompleted(ByVal arg As Object)
            If (Not (Me.DuplicateCreditAppraiseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DuplicateCreditAppraiseCompleted(Me, New DuplicateCreditAppraiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="DuplicateCreditAppraise1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DuplicateCreditAppraise2", RequestElementName:="DuplicateCreditAppraise2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="DuplicateCreditAppraise2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function DuplicateCreditAppraise(ByVal sourceID As Integer, ByVal destinationID As Integer) As <System.Xml.Serialization.XmlElementAttribute("DuplicateCreditAppraise2Result")> Integer
            Dim results() As Object = Me.Invoke("DuplicateCreditAppraise1", New Object() {sourceID, destinationID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginDuplicateCreditAppraise1(ByVal sourceID As Integer, ByVal destinationID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DuplicateCreditAppraise1", New Object() {sourceID, destinationID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDuplicateCreditAppraise1(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DuplicateCreditAppraise1Async(ByVal sourceID As Integer, ByVal destinationID As Integer)
            Me.DuplicateCreditAppraise1Async(sourceID, destinationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DuplicateCreditAppraise1Async(ByVal sourceID As Integer, ByVal destinationID As Integer, ByVal userState As Object)
            If (Me.DuplicateCreditAppraise1OperationCompleted Is Nothing) Then
                Me.DuplicateCreditAppraise1OperationCompleted = AddressOf Me.OnDuplicateCreditAppraise1OperationCompleted
            End If
            Me.InvokeAsync("DuplicateCreditAppraise1", New Object() {sourceID, destinationID}, Me.DuplicateCreditAppraise1OperationCompleted, userState)
        End Sub
        
        Private Sub OnDuplicateCreditAppraise1OperationCompleted(ByVal arg As Object)
            If (Not (Me.DuplicateCreditAppraise1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DuplicateCreditAppraise1Completed(Me, New DuplicateCreditAppraise1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateProjectCreditQuantity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CreateProjectCreditQuantity(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateProjectCreditQuantity", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateProjectCreditQuantity(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateProjectCreditQuantity", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateProjectCreditQuantity(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateProjectCreditQuantityAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String)
            Me.CreateProjectCreditQuantityAsync(ProjectNo, CorporationNo, Phase, Month, MonthLast, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateProjectCreditQuantityAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal userState As Object)
            If (Me.CreateProjectCreditQuantityOperationCompleted Is Nothing) Then
                Me.CreateProjectCreditQuantityOperationCompleted = AddressOf Me.OnCreateProjectCreditQuantityOperationCompleted
            End If
            Me.InvokeAsync("CreateProjectCreditQuantity", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, Me.CreateProjectCreditQuantityOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateProjectCreditQuantityOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateProjectCreditQuantityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateProjectCreditQuantityCompleted(Me, New CreateProjectCreditQuantityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="CreateProjectCreditQuantity1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateProjectCreditQuantityEx", RequestElementName:="CreateProjectCreditQuantityEx", RequestNamespace:="http://tempuri.org/", ResponseElementName:="CreateProjectCreditQuantityExResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CreateProjectCreditQuantity(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal SystemID As Object) As <System.Xml.Serialization.XmlElementAttribute("CreateProjectCreditQuantityExResult")> Boolean
            Dim results() As Object = Me.Invoke("CreateProjectCreditQuantity1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast, SystemID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateProjectCreditQuantity1(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal SystemID As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateProjectCreditQuantity1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast, SystemID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateProjectCreditQuantity1(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateProjectCreditQuantity1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal SystemID As Object)
            Me.CreateProjectCreditQuantity1Async(ProjectNo, CorporationNo, Phase, Month, MonthLast, SystemID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateProjectCreditQuantity1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal SystemID As Object, ByVal userState As Object)
            If (Me.CreateProjectCreditQuantity1OperationCompleted Is Nothing) Then
                Me.CreateProjectCreditQuantity1OperationCompleted = AddressOf Me.OnCreateProjectCreditQuantity1OperationCompleted
            End If
            Me.InvokeAsync("CreateProjectCreditQuantity1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast, SystemID}, Me.CreateProjectCreditQuantity1OperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateProjectCreditQuantity1OperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateProjectCreditQuantity1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateProjectCreditQuantity1Completed(Me, New CreateProjectCreditQuantity1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCreditQuantityStandard", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCreditQuantityStandard(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCreditQuantityStandard", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCreditQuantityStandard(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCreditQuantityStandard", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCreditQuantityStandard(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQuantityStandardAsync(ByVal Condition As String)
            Me.FetchCreditQuantityStandardAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQuantityStandardAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchCreditQuantityStandardOperationCompleted Is Nothing) Then
                Me.FetchCreditQuantityStandardOperationCompleted = AddressOf Me.OnFetchCreditQuantityStandardOperationCompleted
            End If
            Me.InvokeAsync("FetchCreditQuantityStandard", New Object() {Condition}, Me.FetchCreditQuantityStandardOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCreditQuantityStandardOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCreditQuantityStandardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCreditQuantityStandardCompleted(Me, New FetchCreditQuantityStandardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchCreditQuantityStandard1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCreditQuantityStandard2", RequestElementName:="FetchCreditQuantityStandard2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchCreditQuantityStandard2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCreditQuantityStandard(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String) As <System.Xml.Serialization.XmlElementAttribute("FetchCreditQuantityStandard2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCreditQuantityStandard1", New Object() {SystemID, IndexType, IndexID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCreditQuantityStandard1(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCreditQuantityStandard1", New Object() {SystemID, IndexType, IndexID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCreditQuantityStandard1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQuantityStandard1Async(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String)
            Me.FetchCreditQuantityStandard1Async(SystemID, IndexType, IndexID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQuantityStandard1Async(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String, ByVal userState As Object)
            If (Me.FetchCreditQuantityStandard1OperationCompleted Is Nothing) Then
                Me.FetchCreditQuantityStandard1OperationCompleted = AddressOf Me.OnFetchCreditQuantityStandard1OperationCompleted
            End If
            Me.InvokeAsync("FetchCreditQuantityStandard1", New Object() {SystemID, IndexType, IndexID}, Me.FetchCreditQuantityStandard1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCreditQuantityStandard1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCreditQuantityStandard1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCreditQuantityStandard1Completed(Me, New FetchCreditQuantityStandard1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCreditQuantityIndex", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCreditQuantityIndex(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCreditQuantityIndex", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCreditQuantityIndex(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCreditQuantityIndex", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCreditQuantityIndex(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQuantityIndexAsync(ByVal Condition As String)
            Me.FetchCreditQuantityIndexAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQuantityIndexAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchCreditQuantityIndexOperationCompleted Is Nothing) Then
                Me.FetchCreditQuantityIndexOperationCompleted = AddressOf Me.OnFetchCreditQuantityIndexOperationCompleted
            End If
            Me.InvokeAsync("FetchCreditQuantityIndex", New Object() {Condition}, Me.FetchCreditQuantityIndexOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCreditQuantityIndexOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCreditQuantityIndexCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCreditQuantityIndexCompleted(Me, New FetchCreditQuantityIndexCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchCreditQuantityIndex1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCreditQuantityIndex2", RequestElementName:="FetchCreditQuantityIndex2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchCreditQuantityIndex2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCreditQuantityIndex(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String) As <System.Xml.Serialization.XmlElementAttribute("FetchCreditQuantityIndex2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCreditQuantityIndex1", New Object() {SystemID, IndexType, IndexID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCreditQuantityIndex1(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCreditQuantityIndex1", New Object() {SystemID, IndexType, IndexID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCreditQuantityIndex1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQuantityIndex1Async(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String)
            Me.FetchCreditQuantityIndex1Async(SystemID, IndexType, IndexID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCreditQuantityIndex1Async(ByVal SystemID As Integer, ByVal IndexType As String, ByVal IndexID As String, ByVal userState As Object)
            If (Me.FetchCreditQuantityIndex1OperationCompleted Is Nothing) Then
                Me.FetchCreditQuantityIndex1OperationCompleted = AddressOf Me.OnFetchCreditQuantityIndex1OperationCompleted
            End If
            Me.InvokeAsync("FetchCreditQuantityIndex1", New Object() {SystemID, IndexType, IndexID}, Me.FetchCreditQuantityIndex1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCreditQuantityIndex1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCreditQuantityIndex1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCreditQuantityIndex1Completed(Me, New FetchCreditQuantityIndex1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCreditQuantityIndex", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCreditQuantityIndex(ByVal dsCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCreditQuantityIndex", New Object() {dsCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCreditQuantityIndex(ByVal dsCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCreditQuantityIndex", New Object() {dsCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCreditQuantityIndex(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditQuantityIndexAsync(ByVal dsCommit As System.Data.DataSet)
            Me.UpdateCreditQuantityIndexAsync(dsCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditQuantityIndexAsync(ByVal dsCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCreditQuantityIndexOperationCompleted Is Nothing) Then
                Me.UpdateCreditQuantityIndexOperationCompleted = AddressOf Me.OnUpdateCreditQuantityIndexOperationCompleted
            End If
            Me.InvokeAsync("UpdateCreditQuantityIndex", New Object() {dsCommit}, Me.UpdateCreditQuantityIndexOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCreditQuantityIndexOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCreditQuantityIndexCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCreditQuantityIndexCompleted(Me, New UpdateCreditQuantityIndexCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCreditQuantityStandard", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCreditQuantityStandard(ByVal dsCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCreditQuantityStandard", New Object() {dsCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCreditQuantityStandard(ByVal dsCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCreditQuantityStandard", New Object() {dsCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCreditQuantityStandard(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditQuantityStandardAsync(ByVal dsCommit As System.Data.DataSet)
            Me.UpdateCreditQuantityStandardAsync(dsCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditQuantityStandardAsync(ByVal dsCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCreditQuantityStandardOperationCompleted Is Nothing) Then
                Me.UpdateCreditQuantityStandardOperationCompleted = AddressOf Me.OnUpdateCreditQuantityStandardOperationCompleted
            End If
            Me.InvokeAsync("UpdateCreditQuantityStandard", New Object() {dsCommit}, Me.UpdateCreditQuantityStandardOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCreditQuantityStandardOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCreditQuantityStandardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCreditQuantityStandardCompleted(Me, New UpdateCreditQuantityStandardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCreditQualityIndex", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCreditQualityIndex(ByVal dsCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCreditQualityIndex", New Object() {dsCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCreditQualityIndex(ByVal dsCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCreditQualityIndex", New Object() {dsCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCreditQualityIndex(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditQualityIndexAsync(ByVal dsCommit As System.Data.DataSet)
            Me.UpdateCreditQualityIndexAsync(dsCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditQualityIndexAsync(ByVal dsCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCreditQualityIndexOperationCompleted Is Nothing) Then
                Me.UpdateCreditQualityIndexOperationCompleted = AddressOf Me.OnUpdateCreditQualityIndexOperationCompleted
            End If
            Me.InvokeAsync("UpdateCreditQualityIndex", New Object() {dsCommit}, Me.UpdateCreditQualityIndexOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCreditQualityIndexOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCreditQualityIndexCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCreditQualityIndexCompleted(Me, New UpdateCreditQualityIndexCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCreditQualityStandard", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCreditQualityStandard(ByVal dsCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCreditQualityStandard", New Object() {dsCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCreditQualityStandard(ByVal dsCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCreditQualityStandard", New Object() {dsCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCreditQualityStandard(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditQualityStandardAsync(ByVal dsCommit As System.Data.DataSet)
            Me.UpdateCreditQualityStandardAsync(dsCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditQualityStandardAsync(ByVal dsCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCreditQualityStandardOperationCompleted Is Nothing) Then
                Me.UpdateCreditQualityStandardOperationCompleted = AddressOf Me.OnUpdateCreditQualityStandardOperationCompleted
            End If
            Me.InvokeAsync("UpdateCreditQualityStandard", New Object() {dsCommit}, Me.UpdateCreditQualityStandardOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCreditQualityStandardOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCreditQualityStandardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCreditQualityStandardCompleted(Me, New UpdateCreditQualityStandardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCreditAppraiseSystem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCreditAppraiseSystem(ByVal dsCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCreditAppraiseSystem", New Object() {dsCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCreditAppraiseSystem(ByVal dsCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCreditAppraiseSystem", New Object() {dsCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCreditAppraiseSystem(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditAppraiseSystemAsync(ByVal dsCommit As System.Data.DataSet)
            Me.UpdateCreditAppraiseSystemAsync(dsCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditAppraiseSystemAsync(ByVal dsCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCreditAppraiseSystemOperationCompleted Is Nothing) Then
                Me.UpdateCreditAppraiseSystemOperationCompleted = AddressOf Me.OnUpdateCreditAppraiseSystemOperationCompleted
            End If
            Me.InvokeAsync("UpdateCreditAppraiseSystem", New Object() {dsCommit}, Me.UpdateCreditAppraiseSystemOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCreditAppraiseSystemOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCreditAppraiseSystemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCreditAppraiseSystemCompleted(Me, New UpdateCreditAppraiseSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCreditAppraiseSystem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCreditAppraiseSystem(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCreditAppraiseSystem", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCreditAppraiseSystem(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCreditAppraiseSystem", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCreditAppraiseSystem(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCreditAppraiseSystemAsync(ByVal Condition As String)
            Me.FetchCreditAppraiseSystemAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCreditAppraiseSystemAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchCreditAppraiseSystemOperationCompleted Is Nothing) Then
                Me.FetchCreditAppraiseSystemOperationCompleted = AddressOf Me.OnFetchCreditAppraiseSystemOperationCompleted
            End If
            Me.InvokeAsync("FetchCreditAppraiseSystem", New Object() {Condition}, Me.FetchCreditAppraiseSystemOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCreditAppraiseSystemOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCreditAppraiseSystemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCreditAppraiseSystemCompleted(Me, New FetchCreditAppraiseSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCreditIndexType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCreditIndexType(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCreditIndexType", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCreditIndexType(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCreditIndexType", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCreditIndexType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCreditIndexTypeAsync(ByVal Condition As String)
            Me.FetchCreditIndexTypeAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCreditIndexTypeAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchCreditIndexTypeOperationCompleted Is Nothing) Then
                Me.FetchCreditIndexTypeOperationCompleted = AddressOf Me.OnFetchCreditIndexTypeOperationCompleted
            End If
            Me.InvokeAsync("FetchCreditIndexType", New Object() {Condition}, Me.FetchCreditIndexTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCreditIndexTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCreditIndexTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCreditIndexTypeCompleted(Me, New FetchCreditIndexTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCreditIndexType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCreditIndexType(ByVal dsCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCreditIndexType", New Object() {dsCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCreditIndexType(ByVal dsCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCreditIndexType", New Object() {dsCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCreditIndexType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditIndexTypeAsync(ByVal dsCommit As System.Data.DataSet)
            Me.UpdateCreditIndexTypeAsync(dsCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCreditIndexTypeAsync(ByVal dsCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCreditIndexTypeOperationCompleted Is Nothing) Then
                Me.UpdateCreditIndexTypeOperationCompleted = AddressOf Me.OnUpdateCreditIndexTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateCreditIndexType", New Object() {dsCommit}, Me.UpdateCreditIndexTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCreditIndexTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCreditIndexTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCreditIndexTypeCompleted(Me, New UpdateCreditIndexTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectCredit", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchProjectCredit(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectCredit", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectCredit(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectCredit", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectCredit(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCreditAsync(ByVal Condition As String)
            Me.FetchProjectCreditAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCreditAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchProjectCreditOperationCompleted Is Nothing) Then
                Me.FetchProjectCreditOperationCompleted = AddressOf Me.OnFetchProjectCreditOperationCompleted
            End If
            Me.InvokeAsync("FetchProjectCredit", New Object() {Condition}, Me.FetchProjectCreditOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectCreditOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectCreditCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectCreditCompleted(Me, New FetchProjectCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchProjectCredit1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectCredit2", RequestElementName:="FetchProjectCredit2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchProjectCredit2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchProjectCredit(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String) As <System.Xml.Serialization.XmlElementAttribute("FetchProjectCredit2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectCredit1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectCredit1(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectCredit1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectCredit1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCredit1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String)
            Me.FetchProjectCredit1Async(ProjectNo, CorporationNo, Phase, Month, MonthLast, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCredit1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal userState As Object)
            If (Me.FetchProjectCredit1OperationCompleted Is Nothing) Then
                Me.FetchProjectCredit1OperationCompleted = AddressOf Me.OnFetchProjectCredit1OperationCompleted
            End If
            Me.InvokeAsync("FetchProjectCredit1", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, Me.FetchProjectCredit1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectCredit1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectCredit1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectCredit1Completed(Me, New FetchProjectCredit1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateProjectCredit", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateProjectCredit(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateProjectCredit", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateProjectCredit(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateProjectCredit", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateProjectCredit(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateProjectCreditAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String)
            Me.CreateProjectCreditAsync(ProjectNo, CorporationNo, Phase, Month, MonthLast, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateProjectCreditAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal MonthLast As String, ByVal userState As Object)
            If (Me.CreateProjectCreditOperationCompleted Is Nothing) Then
                Me.CreateProjectCreditOperationCompleted = AddressOf Me.OnCreateProjectCreditOperationCompleted
            End If
            Me.InvokeAsync("CreateProjectCredit", New Object() {ProjectNo, CorporationNo, Phase, Month, MonthLast}, Me.CreateProjectCreditOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateProjectCreditOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateProjectCreditCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateProjectCreditCompleted(Me, New CreateProjectCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCommonQueryInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCommonQueryInfo(ByVal strSql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCommonQueryInfo", New Object() {strSql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCommonQueryInfo(ByVal strSql As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCommonQueryInfo", New Object() {strSql}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCommonQueryInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCommonQueryInfoAsync(ByVal strSql As String)
            Me.GetCommonQueryInfoAsync(strSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCommonQueryInfoAsync(ByVal strSql As String, ByVal userState As Object)
            If (Me.GetCommonQueryInfoOperationCompleted Is Nothing) Then
                Me.GetCommonQueryInfoOperationCompleted = AddressOf Me.OnGetCommonQueryInfoOperationCompleted
            End If
            Me.InvokeAsync("GetCommonQueryInfo", New Object() {strSql}, Me.GetCommonQueryInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCommonQueryInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCommonQueryInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCommonQueryInfoCompleted(Me, New GetCommonQueryInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCommonStatisticsInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCommonStatisticsInfo(ByVal condition As String, ByVal tableCondition As String, ByVal orderBy As String, ByVal cutOffDate As Date, ByVal feeStartDate As Date, ByVal feeEndDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCommonStatisticsInfo", New Object() {condition, tableCondition, orderBy, cutOffDate, feeStartDate, feeEndDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCommonStatisticsInfo(ByVal condition As String, ByVal tableCondition As String, ByVal orderBy As String, ByVal cutOffDate As Date, ByVal feeStartDate As Date, ByVal feeEndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCommonStatisticsInfo", New Object() {condition, tableCondition, orderBy, cutOffDate, feeStartDate, feeEndDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCommonStatisticsInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCommonStatisticsInfoAsync(ByVal condition As String, ByVal tableCondition As String, ByVal orderBy As String, ByVal cutOffDate As Date, ByVal feeStartDate As Date, ByVal feeEndDate As Date)
            Me.GetCommonStatisticsInfoAsync(condition, tableCondition, orderBy, cutOffDate, feeStartDate, feeEndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCommonStatisticsInfoAsync(ByVal condition As String, ByVal tableCondition As String, ByVal orderBy As String, ByVal cutOffDate As Date, ByVal feeStartDate As Date, ByVal feeEndDate As Date, ByVal userState As Object)
            If (Me.GetCommonStatisticsInfoOperationCompleted Is Nothing) Then
                Me.GetCommonStatisticsInfoOperationCompleted = AddressOf Me.OnGetCommonStatisticsInfoOperationCompleted
            End If
            Me.InvokeAsync("GetCommonStatisticsInfo", New Object() {condition, tableCondition, orderBy, cutOffDate, feeStartDate, feeEndDate}, Me.GetCommonStatisticsInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCommonStatisticsInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCommonStatisticsInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCommonStatisticsInfoCompleted(Me, New GetCommonStatisticsInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectSearchInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectSearchInfo(ByVal projectCode As String, ByVal enterpriseName As String, ByVal projectManager As String, ByVal phase As String, ByVal status As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectSearchInfo", New Object() {projectCode, enterpriseName, projectManager, phase, status})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectSearchInfo(ByVal projectCode As String, ByVal enterpriseName As String, ByVal projectManager As String, ByVal phase As String, ByVal status As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectSearchInfo", New Object() {projectCode, enterpriseName, projectManager, phase, status}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectSearchInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectSearchInfoAsync(ByVal projectCode As String, ByVal enterpriseName As String, ByVal projectManager As String, ByVal phase As String, ByVal status As String)
            Me.GetProjectSearchInfoAsync(projectCode, enterpriseName, projectManager, phase, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectSearchInfoAsync(ByVal projectCode As String, ByVal enterpriseName As String, ByVal projectManager As String, ByVal phase As String, ByVal status As String, ByVal userState As Object)
            If (Me.GetProjectSearchInfoOperationCompleted Is Nothing) Then
                Me.GetProjectSearchInfoOperationCompleted = AddressOf Me.OnGetProjectSearchInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectSearchInfo", New Object() {projectCode, enterpriseName, projectManager, phase, status}, Me.GetProjectSearchInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectSearchInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectSearchInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectSearchInfoCompleted(Me, New GetProjectSearchInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFinanceReviewData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetFinanceReviewData(ByVal projectCode As String, ByVal phase As String, ByVal ItemType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFinanceReviewData", New Object() {projectCode, phase, ItemType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFinanceReviewData(ByVal projectCode As String, ByVal phase As String, ByVal ItemType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFinanceReviewData", New Object() {projectCode, phase, ItemType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFinanceReviewData(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFinanceReviewDataAsync(ByVal projectCode As String, ByVal phase As String, ByVal ItemType As String)
            Me.GetFinanceReviewDataAsync(projectCode, phase, ItemType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFinanceReviewDataAsync(ByVal projectCode As String, ByVal phase As String, ByVal ItemType As String, ByVal userState As Object)
            If (Me.GetFinanceReviewDataOperationCompleted Is Nothing) Then
                Me.GetFinanceReviewDataOperationCompleted = AddressOf Me.OnGetFinanceReviewDataOperationCompleted
            End If
            Me.InvokeAsync("GetFinanceReviewData", New Object() {projectCode, phase, ItemType}, Me.GetFinanceReviewDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFinanceReviewDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFinanceReviewDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFinanceReviewDataCompleted(Me, New GetFinanceReviewDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="GetFinanceReviewData1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFinanceReviewDataEx", RequestElementName:="GetFinanceReviewDataEx", RequestNamespace:="http://tempuri.org/", ResponseElementName:="GetFinanceReviewDataExResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetFinanceReviewData(ByVal projectCode As String, ByVal CorporationCode As String, ByVal phase As String, ByVal ItemType As String) As <System.Xml.Serialization.XmlElementAttribute("GetFinanceReviewDataExResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFinanceReviewData1", New Object() {projectCode, CorporationCode, phase, ItemType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFinanceReviewData1(ByVal projectCode As String, ByVal CorporationCode As String, ByVal phase As String, ByVal ItemType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFinanceReviewData1", New Object() {projectCode, CorporationCode, phase, ItemType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFinanceReviewData1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFinanceReviewData1Async(ByVal projectCode As String, ByVal CorporationCode As String, ByVal phase As String, ByVal ItemType As String)
            Me.GetFinanceReviewData1Async(projectCode, CorporationCode, phase, ItemType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFinanceReviewData1Async(ByVal projectCode As String, ByVal CorporationCode As String, ByVal phase As String, ByVal ItemType As String, ByVal userState As Object)
            If (Me.GetFinanceReviewData1OperationCompleted Is Nothing) Then
                Me.GetFinanceReviewData1OperationCompleted = AddressOf Me.OnGetFinanceReviewData1OperationCompleted
            End If
            Me.InvokeAsync("GetFinanceReviewData1", New Object() {projectCode, CorporationCode, phase, ItemType}, Me.GetFinanceReviewData1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFinanceReviewData1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFinanceReviewData1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFinanceReviewData1Completed(Me, New GetFinanceReviewData1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectInfoEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectInfoEx(ByVal strSql_Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectInfoEx", New Object() {strSql_Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectInfoEx(ByVal strSql_Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectInfoEx", New Object() {strSql_Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectInfoEx(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectInfoExAsync(ByVal strSql_Condition As String)
            Me.GetProjectInfoExAsync(strSql_Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectInfoExAsync(ByVal strSql_Condition As String, ByVal userState As Object)
            If (Me.GetProjectInfoExOperationCompleted Is Nothing) Then
                Me.GetProjectInfoExOperationCompleted = AddressOf Me.OnGetProjectInfoExOperationCompleted
            End If
            Me.InvokeAsync("GetProjectInfoEx", New Object() {strSql_Condition}, Me.GetProjectInfoExOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectInfoExOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectInfoExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectInfoExCompleted(Me, New GetProjectInfoExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReGuaranteeProjectInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReGuaranteeProjectInfo(ByVal strSql_Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReGuaranteeProjectInfo", New Object() {strSql_Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReGuaranteeProjectInfo(ByVal strSql_Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReGuaranteeProjectInfo", New Object() {strSql_Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReGuaranteeProjectInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReGuaranteeProjectInfoAsync(ByVal strSql_Condition As String)
            Me.GetReGuaranteeProjectInfoAsync(strSql_Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReGuaranteeProjectInfoAsync(ByVal strSql_Condition As String, ByVal userState As Object)
            If (Me.GetReGuaranteeProjectInfoOperationCompleted Is Nothing) Then
                Me.GetReGuaranteeProjectInfoOperationCompleted = AddressOf Me.OnGetReGuaranteeProjectInfoOperationCompleted
            End If
            Me.InvokeAsync("GetReGuaranteeProjectInfo", New Object() {strSql_Condition}, Me.GetReGuaranteeProjectInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReGuaranteeProjectInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReGuaranteeProjectInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReGuaranteeProjectInfoCompleted(Me, New GetReGuaranteeProjectInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryProjectInfoEx", RequestElementName:="GetQueryProjectInfoEx", RequestNamespace:="http://tempuri.org/", ResponseElementName:="GetQueryProjectInfoExResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetQueryProjectInfo(ByVal projectCode As String, ByVal enterpriseName As String, ByVal projectManager As String, ByVal phase As String, ByVal status As String) As <System.Xml.Serialization.XmlElementAttribute("GetQueryProjectInfoExResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQueryProjectInfo", New Object() {projectCode, enterpriseName, projectManager, phase, status})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQueryProjectInfo(ByVal projectCode As String, ByVal enterpriseName As String, ByVal projectManager As String, ByVal phase As String, ByVal status As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQueryProjectInfo", New Object() {projectCode, enterpriseName, projectManager, phase, status}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQueryProjectInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQueryProjectInfoAsync(ByVal projectCode As String, ByVal enterpriseName As String, ByVal projectManager As String, ByVal phase As String, ByVal status As String)
            Me.GetQueryProjectInfoAsync(projectCode, enterpriseName, projectManager, phase, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryProjectInfoAsync(ByVal projectCode As String, ByVal enterpriseName As String, ByVal projectManager As String, ByVal phase As String, ByVal status As String, ByVal userState As Object)
            If (Me.GetQueryProjectInfoOperationCompleted Is Nothing) Then
                Me.GetQueryProjectInfoOperationCompleted = AddressOf Me.OnGetQueryProjectInfoOperationCompleted
            End If
            Me.InvokeAsync("GetQueryProjectInfo", New Object() {projectCode, enterpriseName, projectManager, phase, status}, Me.GetQueryProjectInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryProjectInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryProjectInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryProjectInfoCompleted(Me, New GetQueryProjectInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="GetQueryProjectInfo1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryProjectInfo", RequestElementName:="GetQueryProjectInfo", RequestNamespace:="http://tempuri.org/", ResponseElementName:="GetQueryProjectInfoResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetQueryProjectInfo(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal DistrictName As String, ByVal Phase As String, ByVal ApplyDateFrom As Date, ByVal ApplyDateTo As Date) As <System.Xml.Serialization.XmlElementAttribute("GetQueryProjectInfoResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQueryProjectInfo1", New Object() {ProjectNo, CorporationNo, CorporationName, DistrictName, Phase, ApplyDateFrom, ApplyDateTo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQueryProjectInfo1(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal DistrictName As String, ByVal Phase As String, ByVal ApplyDateFrom As Date, ByVal ApplyDateTo As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQueryProjectInfo1", New Object() {ProjectNo, CorporationNo, CorporationName, DistrictName, Phase, ApplyDateFrom, ApplyDateTo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQueryProjectInfo1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQueryProjectInfo1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal DistrictName As String, ByVal Phase As String, ByVal ApplyDateFrom As Date, ByVal ApplyDateTo As Date)
            Me.GetQueryProjectInfo1Async(ProjectNo, CorporationNo, CorporationName, DistrictName, Phase, ApplyDateFrom, ApplyDateTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryProjectInfo1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal DistrictName As String, ByVal Phase As String, ByVal ApplyDateFrom As Date, ByVal ApplyDateTo As Date, ByVal userState As Object)
            If (Me.GetQueryProjectInfo1OperationCompleted Is Nothing) Then
                Me.GetQueryProjectInfo1OperationCompleted = AddressOf Me.OnGetQueryProjectInfo1OperationCompleted
            End If
            Me.InvokeAsync("GetQueryProjectInfo1", New Object() {ProjectNo, CorporationNo, CorporationName, DistrictName, Phase, ApplyDateFrom, ApplyDateTo}, Me.GetQueryProjectInfo1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryProjectInfo1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryProjectInfo1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryProjectInfo1Completed(Me, New GetQueryProjectInfo1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMeetProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMeetProject(ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMeetProject", New Object() {startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMeetProject(ByVal startDate As Date, ByVal endDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMeetProject", New Object() {startDate, endDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMeetProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMeetProjectAsync(ByVal startDate As Date, ByVal endDate As Date)
            Me.GetMeetProjectAsync(startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMeetProjectAsync(ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetMeetProjectOperationCompleted Is Nothing) Then
                Me.GetMeetProjectOperationCompleted = AddressOf Me.OnGetMeetProjectOperationCompleted
            End If
            Me.InvokeAsync("GetMeetProject", New Object() {startDate, endDate}, Me.GetMeetProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMeetProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMeetProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMeetProjectCompleted(Me, New GetMeetProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOverdueProjectList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOverdueProjectList(ByVal ProjectCode As String, ByVal ServiceType As String, ByVal StartTime As String, ByVal EndTime As String, ByVal vchPMA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOverdueProjectList", New Object() {ProjectCode, ServiceType, StartTime, EndTime, vchPMA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOverdueProjectList(ByVal ProjectCode As String, ByVal ServiceType As String, ByVal StartTime As String, ByVal EndTime As String, ByVal vchPMA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOverdueProjectList", New Object() {ProjectCode, ServiceType, StartTime, EndTime, vchPMA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOverdueProjectList(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOverdueProjectListAsync(ByVal ProjectCode As String, ByVal ServiceType As String, ByVal StartTime As String, ByVal EndTime As String, ByVal vchPMA As String, ByVal userName As String)
            Me.GetOverdueProjectListAsync(ProjectCode, ServiceType, StartTime, EndTime, vchPMA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOverdueProjectListAsync(ByVal ProjectCode As String, ByVal ServiceType As String, ByVal StartTime As String, ByVal EndTime As String, ByVal vchPMA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.GetOverdueProjectListOperationCompleted Is Nothing) Then
                Me.GetOverdueProjectListOperationCompleted = AddressOf Me.OnGetOverdueProjectListOperationCompleted
            End If
            Me.InvokeAsync("GetOverdueProjectList", New Object() {ProjectCode, ServiceType, StartTime, EndTime, vchPMA, userName}, Me.GetOverdueProjectListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOverdueProjectListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOverdueProjectListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOverdueProjectListCompleted(Me, New GetOverdueProjectListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryFirstProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQueryFirstProject(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As String, ByVal ToDate As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQueryFirstProject", New Object() {ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate, vchAcceptBranch, vchPMA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQueryFirstProject(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As String, ByVal ToDate As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQueryFirstProject", New Object() {ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate, vchAcceptBranch, vchPMA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQueryFirstProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQueryFirstProjectAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As String, ByVal ToDate As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String)
            Me.GetQueryFirstProjectAsync(ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate, vchAcceptBranch, vchPMA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryFirstProjectAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As String, ByVal ToDate As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.GetQueryFirstProjectOperationCompleted Is Nothing) Then
                Me.GetQueryFirstProjectOperationCompleted = AddressOf Me.OnGetQueryFirstProjectOperationCompleted
            End If
            Me.InvokeAsync("GetQueryFirstProject", New Object() {ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate, vchAcceptBranch, vchPMA, userName}, Me.GetQueryFirstProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryFirstProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryFirstProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryFirstProjectCompleted(Me, New GetQueryFirstProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryCorporationAttendee", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQueryCorporationAttendee(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As Date, ByVal ToDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQueryCorporationAttendee", New Object() {ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQueryCorporationAttendee(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As Date, ByVal ToDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQueryCorporationAttendee", New Object() {ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQueryCorporationAttendee(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQueryCorporationAttendeeAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As Date, ByVal ToDate As Date)
            Me.GetQueryCorporationAttendeeAsync(ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryCorporationAttendeeAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As Date, ByVal ToDate As Date, ByVal userState As Object)
            If (Me.GetQueryCorporationAttendeeOperationCompleted Is Nothing) Then
                Me.GetQueryCorporationAttendeeOperationCompleted = AddressOf Me.OnGetQueryCorporationAttendeeOperationCompleted
            End If
            Me.InvokeAsync("GetQueryCorporationAttendee", New Object() {ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate}, Me.GetQueryCorporationAttendeeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryCorporationAttendeeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryCorporationAttendeeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryCorporationAttendeeCompleted(Me, New GetQueryCorporationAttendeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryPauseProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQueryPauseProject(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As String, ByVal ToDate As String, ByVal vchPMA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQueryPauseProject", New Object() {ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate, vchPMA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQueryPauseProject(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As String, ByVal ToDate As String, ByVal vchPMA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQueryPauseProject", New Object() {ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate, vchPMA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQueryPauseProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQueryPauseProjectAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As String, ByVal ToDate As String, ByVal vchPMA As String, ByVal userName As String)
            Me.GetQueryPauseProjectAsync(ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate, vchPMA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryPauseProjectAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationName As String, ByVal Phase As String, ByVal ServiceType As String, ByVal FromDate As String, ByVal ToDate As String, ByVal vchPMA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.GetQueryPauseProjectOperationCompleted Is Nothing) Then
                Me.GetQueryPauseProjectOperationCompleted = AddressOf Me.OnGetQueryPauseProjectOperationCompleted
            End If
            Me.InvokeAsync("GetQueryPauseProject", New Object() {ProjectNo, CorporationNo, CorporationName, Phase, ServiceType, FromDate, ToDate, vchPMA, userName}, Me.GetQueryPauseProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryPauseProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryPauseProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryPauseProjectCompleted(Me, New GetQueryPauseProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaturityProjectReview", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaturityProjectReview(ByVal ServiceType As String, ByVal StartDate As String, ByVal EndDate As String, ByVal vchPMA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMaturityProjectReview", New Object() {ServiceType, StartDate, EndDate, vchPMA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMaturityProjectReview(ByVal ServiceType As String, ByVal StartDate As String, ByVal EndDate As String, ByVal vchPMA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMaturityProjectReview", New Object() {ServiceType, StartDate, EndDate, vchPMA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMaturityProjectReview(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaturityProjectReviewAsync(ByVal ServiceType As String, ByVal StartDate As String, ByVal EndDate As String, ByVal vchPMA As String, ByVal userName As String)
            Me.GetMaturityProjectReviewAsync(ServiceType, StartDate, EndDate, vchPMA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaturityProjectReviewAsync(ByVal ServiceType As String, ByVal StartDate As String, ByVal EndDate As String, ByVal vchPMA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.GetMaturityProjectReviewOperationCompleted Is Nothing) Then
                Me.GetMaturityProjectReviewOperationCompleted = AddressOf Me.OnGetMaturityProjectReviewOperationCompleted
            End If
            Me.InvokeAsync("GetMaturityProjectReview", New Object() {ServiceType, StartDate, EndDate, vchPMA, userName}, Me.GetMaturityProjectReviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaturityProjectReviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaturityProjectReviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaturityProjectReviewCompleted(Me, New GetMaturityProjectReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOnVouchProjectReview", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOnVouchProjectReview(ByVal StartDate As Date, ByVal EndDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOnVouchProjectReview", New Object() {StartDate, EndDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOnVouchProjectReview(ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOnVouchProjectReview", New Object() {StartDate, EndDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOnVouchProjectReview(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOnVouchProjectReviewAsync(ByVal StartDate As Date, ByVal EndDate As Date)
            Me.GetOnVouchProjectReviewAsync(StartDate, EndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOnVouchProjectReviewAsync(ByVal StartDate As Date, ByVal EndDate As Date, ByVal userState As Object)
            If (Me.GetOnVouchProjectReviewOperationCompleted Is Nothing) Then
                Me.GetOnVouchProjectReviewOperationCompleted = AddressOf Me.OnGetOnVouchProjectReviewOperationCompleted
            End If
            Me.InvokeAsync("GetOnVouchProjectReview", New Object() {StartDate, EndDate}, Me.GetOnVouchProjectReviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOnVouchProjectReviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOnVouchProjectReviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOnVouchProjectReviewCompleted(Me, New GetOnVouchProjectReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectAssignReview", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectAssignReview(ByVal StartDate As Date, ByVal EndDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectAssignReview", New Object() {StartDate, EndDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectAssignReview(ByVal StartDate As Date, ByVal EndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectAssignReview", New Object() {StartDate, EndDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectAssignReview(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectAssignReviewAsync(ByVal StartDate As Date, ByVal EndDate As Date)
            Me.GetProjectAssignReviewAsync(StartDate, EndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectAssignReviewAsync(ByVal StartDate As Date, ByVal EndDate As Date, ByVal userState As Object)
            If (Me.GetProjectAssignReviewOperationCompleted Is Nothing) Then
                Me.GetProjectAssignReviewOperationCompleted = AddressOf Me.OnGetProjectAssignReviewOperationCompleted
            End If
            Me.InvokeAsync("GetProjectAssignReview", New Object() {StartDate, EndDate}, Me.GetProjectAssignReviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectAssignReviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectAssignReviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectAssignReviewCompleted(Me, New GetProjectAssignReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTerminateProjectReview", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTerminateProjectReview(ByVal ServiceType As String, ByVal StartDate As String, ByVal EndDate As String, ByVal vchPMA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTerminateProjectReview", New Object() {ServiceType, StartDate, EndDate, vchPMA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTerminateProjectReview(ByVal ServiceType As String, ByVal StartDate As String, ByVal EndDate As String, ByVal vchPMA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTerminateProjectReview", New Object() {ServiceType, StartDate, EndDate, vchPMA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTerminateProjectReview(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTerminateProjectReviewAsync(ByVal ServiceType As String, ByVal StartDate As String, ByVal EndDate As String, ByVal vchPMA As String, ByVal userName As String)
            Me.GetTerminateProjectReviewAsync(ServiceType, StartDate, EndDate, vchPMA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTerminateProjectReviewAsync(ByVal ServiceType As String, ByVal StartDate As String, ByVal EndDate As String, ByVal vchPMA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.GetTerminateProjectReviewOperationCompleted Is Nothing) Then
                Me.GetTerminateProjectReviewOperationCompleted = AddressOf Me.OnGetTerminateProjectReviewOperationCompleted
            End If
            Me.InvokeAsync("GetTerminateProjectReview", New Object() {ServiceType, StartDate, EndDate, vchPMA, userName}, Me.GetTerminateProjectReviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTerminateProjectReviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTerminateProjectReviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTerminateProjectReviewCompleted(Me, New GetTerminateProjectReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRefundDebtProjectList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRefundDebtProjectList(ByVal ProjectCode As String, ByVal ServiceType As String, ByVal StartTime As String, ByVal EndTime As String, ByVal vchPMA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRefundDebtProjectList", New Object() {ProjectCode, ServiceType, StartTime, EndTime, vchPMA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRefundDebtProjectList(ByVal ProjectCode As String, ByVal ServiceType As String, ByVal StartTime As String, ByVal EndTime As String, ByVal vchPMA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRefundDebtProjectList", New Object() {ProjectCode, ServiceType, StartTime, EndTime, vchPMA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRefundDebtProjectList(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRefundDebtProjectListAsync(ByVal ProjectCode As String, ByVal ServiceType As String, ByVal StartTime As String, ByVal EndTime As String, ByVal vchPMA As String, ByVal userName As String)
            Me.GetRefundDebtProjectListAsync(ProjectCode, ServiceType, StartTime, EndTime, vchPMA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRefundDebtProjectListAsync(ByVal ProjectCode As String, ByVal ServiceType As String, ByVal StartTime As String, ByVal EndTime As String, ByVal vchPMA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.GetRefundDebtProjectListOperationCompleted Is Nothing) Then
                Me.GetRefundDebtProjectListOperationCompleted = AddressOf Me.OnGetRefundDebtProjectListOperationCompleted
            End If
            Me.InvokeAsync("GetRefundDebtProjectList", New Object() {ProjectCode, ServiceType, StartTime, EndTime, vchPMA, userName}, Me.GetRefundDebtProjectListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRefundDebtProjectListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRefundDebtProjectListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRefundDebtProjectListCompleted(Me, New GetRefundDebtProjectListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNeedMeetProjectInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNeedMeetProjectInfo(ByVal ProjectList As String, ByVal ConferenceCode As String, ByVal Status As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetNeedMeetProjectInfo", New Object() {ProjectList, ConferenceCode, Status})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetNeedMeetProjectInfo(ByVal ProjectList As String, ByVal ConferenceCode As String, ByVal Status As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetNeedMeetProjectInfo", New Object() {ProjectList, ConferenceCode, Status}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetNeedMeetProjectInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNeedMeetProjectInfoAsync(ByVal ProjectList As String, ByVal ConferenceCode As String, ByVal Status As String)
            Me.GetNeedMeetProjectInfoAsync(ProjectList, ConferenceCode, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNeedMeetProjectInfoAsync(ByVal ProjectList As String, ByVal ConferenceCode As String, ByVal Status As String, ByVal userState As Object)
            If (Me.GetNeedMeetProjectInfoOperationCompleted Is Nothing) Then
                Me.GetNeedMeetProjectInfoOperationCompleted = AddressOf Me.OnGetNeedMeetProjectInfoOperationCompleted
            End If
            Me.InvokeAsync("GetNeedMeetProjectInfo", New Object() {ProjectList, ConferenceCode, Status}, Me.GetNeedMeetProjectInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNeedMeetProjectInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNeedMeetProjectInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNeedMeetProjectInfoCompleted(Me, New GetNeedMeetProjectInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWfTaskStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWfTaskStatus() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWfTaskStatus", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWfTaskStatus(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWfTaskStatus", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWfTaskStatus(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWfTaskStatusAsync()
            Me.GetWfTaskStatusAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWfTaskStatusAsync(ByVal userState As Object)
            If (Me.GetWfTaskStatusOperationCompleted Is Nothing) Then
                Me.GetWfTaskStatusOperationCompleted = AddressOf Me.OnGetWfTaskStatusOperationCompleted
            End If
            Me.InvokeAsync("GetWfTaskStatus", New Object(-1) {}, Me.GetWfTaskStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWfTaskStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWfTaskStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWfTaskStatusCompleted(Me, New GetWfTaskStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryStatisticsAssuranceInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQueryStatisticsAssuranceInfo(ByVal Month_start As String, ByVal Month_end As String, ByVal Type As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQueryStatisticsAssuranceInfo", New Object() {Month_start, Month_end, Type, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQueryStatisticsAssuranceInfo(ByVal Month_start As String, ByVal Month_end As String, ByVal Type As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQueryStatisticsAssuranceInfo", New Object() {Month_start, Month_end, Type, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQueryStatisticsAssuranceInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQueryStatisticsAssuranceInfoAsync(ByVal Month_start As String, ByVal Month_end As String, ByVal Type As String, ByVal userName As String)
            Me.GetQueryStatisticsAssuranceInfoAsync(Month_start, Month_end, Type, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryStatisticsAssuranceInfoAsync(ByVal Month_start As String, ByVal Month_end As String, ByVal Type As String, ByVal userName As String, ByVal userState As Object)
            If (Me.GetQueryStatisticsAssuranceInfoOperationCompleted Is Nothing) Then
                Me.GetQueryStatisticsAssuranceInfoOperationCompleted = AddressOf Me.OnGetQueryStatisticsAssuranceInfoOperationCompleted
            End If
            Me.InvokeAsync("GetQueryStatisticsAssuranceInfo", New Object() {Month_start, Month_end, Type, userName}, Me.GetQueryStatisticsAssuranceInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryStatisticsAssuranceInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryStatisticsAssuranceInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryStatisticsAssuranceInfoCompleted(Me, New GetQueryStatisticsAssuranceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryStatisticsRegionInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQueryStatisticsRegionInfo(ByVal DateFrom As Date, ByVal DateTo As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQueryStatisticsRegionInfo", New Object() {DateFrom, DateTo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQueryStatisticsRegionInfo(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQueryStatisticsRegionInfo", New Object() {DateFrom, DateTo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQueryStatisticsRegionInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQueryStatisticsRegionInfoAsync(ByVal DateFrom As Date, ByVal DateTo As Date)
            Me.GetQueryStatisticsRegionInfoAsync(DateFrom, DateTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryStatisticsRegionInfoAsync(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal userState As Object)
            If (Me.GetQueryStatisticsRegionInfoOperationCompleted Is Nothing) Then
                Me.GetQueryStatisticsRegionInfoOperationCompleted = AddressOf Me.OnGetQueryStatisticsRegionInfoOperationCompleted
            End If
            Me.InvokeAsync("GetQueryStatisticsRegionInfo", New Object() {DateFrom, DateTo}, Me.GetQueryStatisticsRegionInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryStatisticsRegionInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryStatisticsRegionInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryStatisticsRegionInfoCompleted(Me, New GetQueryStatisticsRegionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryStatisticsBankInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQueryStatisticsBankInfo(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal iType As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQueryStatisticsBankInfo", New Object() {DateFrom, DateTo, iType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQueryStatisticsBankInfo(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal iType As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQueryStatisticsBankInfo", New Object() {DateFrom, DateTo, iType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQueryStatisticsBankInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQueryStatisticsBankInfoAsync(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal iType As Integer)
            Me.GetQueryStatisticsBankInfoAsync(DateFrom, DateTo, iType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryStatisticsBankInfoAsync(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal iType As Integer, ByVal userState As Object)
            If (Me.GetQueryStatisticsBankInfoOperationCompleted Is Nothing) Then
                Me.GetQueryStatisticsBankInfoOperationCompleted = AddressOf Me.OnGetQueryStatisticsBankInfoOperationCompleted
            End If
            Me.InvokeAsync("GetQueryStatisticsBankInfo", New Object() {DateFrom, DateTo, iType}, Me.GetQueryStatisticsBankInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryStatisticsBankInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryStatisticsBankInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryStatisticsBankInfoCompleted(Me, New GetQueryStatisticsBankInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryStatisticsIndustryInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQueryStatisticsIndustryInfo(ByVal DateFrom As Date, ByVal DateTo As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQueryStatisticsIndustryInfo", New Object() {DateFrom, DateTo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQueryStatisticsIndustryInfo(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQueryStatisticsIndustryInfo", New Object() {DateFrom, DateTo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQueryStatisticsIndustryInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQueryStatisticsIndustryInfoAsync(ByVal DateFrom As Date, ByVal DateTo As Date)
            Me.GetQueryStatisticsIndustryInfoAsync(DateFrom, DateTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryStatisticsIndustryInfoAsync(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal userState As Object)
            If (Me.GetQueryStatisticsIndustryInfoOperationCompleted Is Nothing) Then
                Me.GetQueryStatisticsIndustryInfoOperationCompleted = AddressOf Me.OnGetQueryStatisticsIndustryInfoOperationCompleted
            End If
            Me.InvokeAsync("GetQueryStatisticsIndustryInfo", New Object() {DateFrom, DateTo}, Me.GetQueryStatisticsIndustryInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryStatisticsIndustryInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryStatisticsIndustryInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryStatisticsIndustryInfoCompleted(Me, New GetQueryStatisticsIndustryInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryStatisticsServiceTypeInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQueryStatisticsServiceTypeInfo(ByVal DateFrom As Date, ByVal DateTo As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQueryStatisticsServiceTypeInfo", New Object() {DateFrom, DateTo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQueryStatisticsServiceTypeInfo(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQueryStatisticsServiceTypeInfo", New Object() {DateFrom, DateTo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQueryStatisticsServiceTypeInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQueryStatisticsServiceTypeInfoAsync(ByVal DateFrom As Date, ByVal DateTo As Date)
            Me.GetQueryStatisticsServiceTypeInfoAsync(DateFrom, DateTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryStatisticsServiceTypeInfoAsync(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal userState As Object)
            If (Me.GetQueryStatisticsServiceTypeInfoOperationCompleted Is Nothing) Then
                Me.GetQueryStatisticsServiceTypeInfoOperationCompleted = AddressOf Me.OnGetQueryStatisticsServiceTypeInfoOperationCompleted
            End If
            Me.InvokeAsync("GetQueryStatisticsServiceTypeInfo", New Object() {DateFrom, DateTo}, Me.GetQueryStatisticsServiceTypeInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryStatisticsServiceTypeInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryStatisticsServiceTypeInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryStatisticsServiceTypeInfoCompleted(Me, New GetQueryStatisticsServiceTypeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectScheduleInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectScheduleInfo(ByVal projectID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectScheduleInfo", New Object() {projectID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectScheduleInfo(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectScheduleInfo", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectScheduleInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectScheduleInfoAsync(ByVal projectID As String)
            Me.GetProjectScheduleInfoAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectScheduleInfoAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.GetProjectScheduleInfoOperationCompleted Is Nothing) Then
                Me.GetProjectScheduleInfoOperationCompleted = AddressOf Me.OnGetProjectScheduleInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectScheduleInfo", New Object() {projectID}, Me.GetProjectScheduleInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectScheduleInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectScheduleInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectScheduleInfoCompleted(Me, New GetProjectScheduleInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportFinanceData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportFinanceData(ByVal CorporationCode As String, ByVal FromProjectCode As String, ByVal FromPhase As String, ByVal FromMonth As String, ByVal ToCorporationCode As String, ByVal ToProjectCode As String, ByVal ToPhase As String, ByVal CreatePerson As String, ByVal CreateDate As Date, ByVal DeleteOriginalData As Boolean) As String
            Dim results() As Object = Me.Invoke("ImportFinanceData", New Object() {CorporationCode, FromProjectCode, FromPhase, FromMonth, ToCorporationCode, ToProjectCode, ToPhase, CreatePerson, CreateDate, DeleteOriginalData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginImportFinanceData(ByVal CorporationCode As String, ByVal FromProjectCode As String, ByVal FromPhase As String, ByVal FromMonth As String, ByVal ToCorporationCode As String, ByVal ToProjectCode As String, ByVal ToPhase As String, ByVal CreatePerson As String, ByVal CreateDate As Date, ByVal DeleteOriginalData As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ImportFinanceData", New Object() {CorporationCode, FromProjectCode, FromPhase, FromMonth, ToCorporationCode, ToProjectCode, ToPhase, CreatePerson, CreateDate, DeleteOriginalData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndImportFinanceData(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportFinanceDataAsync(ByVal CorporationCode As String, ByVal FromProjectCode As String, ByVal FromPhase As String, ByVal FromMonth As String, ByVal ToCorporationCode As String, ByVal ToProjectCode As String, ByVal ToPhase As String, ByVal CreatePerson As String, ByVal CreateDate As Date, ByVal DeleteOriginalData As Boolean)
            Me.ImportFinanceDataAsync(CorporationCode, FromProjectCode, FromPhase, FromMonth, ToCorporationCode, ToProjectCode, ToPhase, CreatePerson, CreateDate, DeleteOriginalData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportFinanceDataAsync(ByVal CorporationCode As String, ByVal FromProjectCode As String, ByVal FromPhase As String, ByVal FromMonth As String, ByVal ToCorporationCode As String, ByVal ToProjectCode As String, ByVal ToPhase As String, ByVal CreatePerson As String, ByVal CreateDate As Date, ByVal DeleteOriginalData As Boolean, ByVal userState As Object)
            If (Me.ImportFinanceDataOperationCompleted Is Nothing) Then
                Me.ImportFinanceDataOperationCompleted = AddressOf Me.OnImportFinanceDataOperationCompleted
            End If
            Me.InvokeAsync("ImportFinanceData", New Object() {CorporationCode, FromProjectCode, FromPhase, FromMonth, ToCorporationCode, ToProjectCode, ToPhase, CreatePerson, CreateDate, DeleteOriginalData}, Me.ImportFinanceDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportFinanceDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportFinanceDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportFinanceDataCompleted(Me, New ImportFinanceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteAntiAssureCompany", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteAntiAssureCompany(ByVal project_code As String, ByVal corporation_code As String) As Object
            Dim results() As Object = Me.Invoke("DeleteAntiAssureCompany", New Object() {project_code, corporation_code})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteAntiAssureCompany(ByVal project_code As String, ByVal corporation_code As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteAntiAssureCompany", New Object() {project_code, corporation_code}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteAntiAssureCompany(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAntiAssureCompanyAsync(ByVal project_code As String, ByVal corporation_code As String)
            Me.DeleteAntiAssureCompanyAsync(project_code, corporation_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAntiAssureCompanyAsync(ByVal project_code As String, ByVal corporation_code As String, ByVal userState As Object)
            If (Me.DeleteAntiAssureCompanyOperationCompleted Is Nothing) Then
                Me.DeleteAntiAssureCompanyOperationCompleted = AddressOf Me.OnDeleteAntiAssureCompanyOperationCompleted
            End If
            Me.InvokeAsync("DeleteAntiAssureCompany", New Object() {project_code, corporation_code}, Me.DeleteAntiAssureCompanyOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAntiAssureCompanyOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAntiAssureCompanyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAntiAssureCompanyCompleted(Me, New DeleteAntiAssureCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DelProject(ByVal ProjectCode As String) As String
            Dim results() As Object = Me.Invoke("DelProject", New Object() {ProjectCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDelProject(ByVal ProjectCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DelProject", New Object() {ProjectCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDelProject(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DelProjectAsync(ByVal ProjectCode As String)
            Me.DelProjectAsync(ProjectCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelProjectAsync(ByVal ProjectCode As String, ByVal userState As Object)
            If (Me.DelProjectOperationCompleted Is Nothing) Then
                Me.DelProjectOperationCompleted = AddressOf Me.OnDelProjectOperationCompleted
            End If
            Me.InvokeAsync("DelProject", New Object() {ProjectCode}, Me.DelProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelProjectCompleted(Me, New DelProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskProjectList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetTaskProjectList(ByVal taskID As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTaskProjectList", New Object() {taskID, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTaskProjectList(ByVal taskID As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTaskProjectList", New Object() {taskID, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTaskProjectList(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskProjectListAsync(ByVal taskID As String, ByVal userName As String)
            Me.GetTaskProjectListAsync(taskID, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskProjectListAsync(ByVal taskID As String, ByVal userName As String, ByVal userState As Object)
            If (Me.GetTaskProjectListOperationCompleted Is Nothing) Then
                Me.GetTaskProjectListOperationCompleted = AddressOf Me.OnGetTaskProjectListOperationCompleted
            End If
            Me.InvokeAsync("GetTaskProjectList", New Object() {taskID, userName}, Me.GetTaskProjectListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskProjectListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskProjectListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskProjectListCompleted(Me, New GetTaskProjectListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="GetTaskProjectList1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskProjectListEx", RequestElementName:="GetTaskProjectListEx", RequestNamespace:="http://tempuri.org/", ResponseElementName:="GetTaskProjectListExResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetTaskProjectList(ByVal taskID As String, ByVal userName As String, ByVal flag As Integer) As <System.Xml.Serialization.XmlElementAttribute("GetTaskProjectListExResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTaskProjectList1", New Object() {taskID, userName, flag})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTaskProjectList1(ByVal taskID As String, ByVal userName As String, ByVal flag As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTaskProjectList1", New Object() {taskID, userName, flag}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTaskProjectList1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskProjectList1Async(ByVal taskID As String, ByVal userName As String, ByVal flag As Integer)
            Me.GetTaskProjectList1Async(taskID, userName, flag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskProjectList1Async(ByVal taskID As String, ByVal userName As String, ByVal flag As Integer, ByVal userState As Object)
            If (Me.GetTaskProjectList1OperationCompleted Is Nothing) Then
                Me.GetTaskProjectList1OperationCompleted = AddressOf Me.OnGetTaskProjectList1OperationCompleted
            End If
            Me.InvokeAsync("GetTaskProjectList1", New Object() {taskID, userName, flag}, Me.GetTaskProjectList1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskProjectList1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskProjectList1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskProjectList1Completed(Me, New GetTaskProjectList1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConferenceProjectList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConferenceProjectList(ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetConferenceProjectList", New Object() {userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetConferenceProjectList(ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetConferenceProjectList", New Object() {userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetConferenceProjectList(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConferenceProjectListAsync(ByVal userName As String)
            Me.GetConferenceProjectListAsync(userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConferenceProjectListAsync(ByVal userName As String, ByVal userState As Object)
            If (Me.GetConferenceProjectListOperationCompleted Is Nothing) Then
                Me.GetConferenceProjectListOperationCompleted = AddressOf Me.OnGetConferenceProjectListOperationCompleted
            End If
            Me.InvokeAsync("GetConferenceProjectList", New Object() {userName}, Me.GetConferenceProjectListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConferenceProjectListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConferenceProjectListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConferenceProjectListCompleted(Me, New GetConferenceProjectListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchFinancialAnalysisInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchFinancialAnalysisInfo(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal ThisYear As String, ByVal LastYear1 As String, ByVal LastYear2 As String, ByVal LastYear3 As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchFinancialAnalysisInfo", New Object() {ProjectNo, CorporationNo, Phase, ThisYear, LastYear1, LastYear2, LastYear3})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchFinancialAnalysisInfo(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal ThisYear As String, ByVal LastYear1 As String, ByVal LastYear2 As String, ByVal LastYear3 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchFinancialAnalysisInfo", New Object() {ProjectNo, CorporationNo, Phase, ThisYear, LastYear1, LastYear2, LastYear3}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchFinancialAnalysisInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchFinancialAnalysisInfoAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal ThisYear As String, ByVal LastYear1 As String, ByVal LastYear2 As String, ByVal LastYear3 As String)
            Me.FetchFinancialAnalysisInfoAsync(ProjectNo, CorporationNo, Phase, ThisYear, LastYear1, LastYear2, LastYear3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchFinancialAnalysisInfoAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal ThisYear As String, ByVal LastYear1 As String, ByVal LastYear2 As String, ByVal LastYear3 As String, ByVal userState As Object)
            If (Me.FetchFinancialAnalysisInfoOperationCompleted Is Nothing) Then
                Me.FetchFinancialAnalysisInfoOperationCompleted = AddressOf Me.OnFetchFinancialAnalysisInfoOperationCompleted
            End If
            Me.InvokeAsync("FetchFinancialAnalysisInfo", New Object() {ProjectNo, CorporationNo, Phase, ThisYear, LastYear1, LastYear2, LastYear3}, Me.FetchFinancialAnalysisInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchFinancialAnalysisInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchFinancialAnalysisInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchFinancialAnalysisInfoCompleted(Me, New FetchFinancialAnalysisInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNeedSignatureProjectInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNeedSignatureProjectInfo(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetNeedSignatureProjectInfo", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetNeedSignatureProjectInfo(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetNeedSignatureProjectInfo", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetNeedSignatureProjectInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNeedSignatureProjectInfoAsync(ByVal Condition As String)
            Me.GetNeedSignatureProjectInfoAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNeedSignatureProjectInfoAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetNeedSignatureProjectInfoOperationCompleted Is Nothing) Then
                Me.GetNeedSignatureProjectInfoOperationCompleted = AddressOf Me.OnGetNeedSignatureProjectInfoOperationCompleted
            End If
            Me.InvokeAsync("GetNeedSignatureProjectInfo", New Object() {Condition}, Me.GetNeedSignatureProjectInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNeedSignatureProjectInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNeedSignatureProjectInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNeedSignatureProjectInfoCompleted(Me, New GetNeedSignatureProjectInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchOppositeGuaranteeAssurer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchOppositeGuaranteeAssurer(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchOppositeGuaranteeAssurer", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchOppositeGuaranteeAssurer(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchOppositeGuaranteeAssurer", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchOppositeGuaranteeAssurer(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchOppositeGuaranteeAssurerAsync(ByVal Condition As String)
            Me.FetchOppositeGuaranteeAssurerAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchOppositeGuaranteeAssurerAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchOppositeGuaranteeAssurerOperationCompleted Is Nothing) Then
                Me.FetchOppositeGuaranteeAssurerOperationCompleted = AddressOf Me.OnFetchOppositeGuaranteeAssurerOperationCompleted
            End If
            Me.InvokeAsync("FetchOppositeGuaranteeAssurer", New Object() {Condition}, Me.FetchOppositeGuaranteeAssurerOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchOppositeGuaranteeAssurerOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchOppositeGuaranteeAssurerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchOppositeGuaranteeAssurerCompleted(Me, New FetchOppositeGuaranteeAssurerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectGuaranteeForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchProjectGuaranteeForm(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectGuaranteeForm", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectGuaranteeForm(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectGuaranteeForm", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectGuaranteeForm(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectGuaranteeFormAsync(ByVal Condition As String)
            Me.FetchProjectGuaranteeFormAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectGuaranteeFormAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchProjectGuaranteeFormOperationCompleted Is Nothing) Then
                Me.FetchProjectGuaranteeFormOperationCompleted = AddressOf Me.OnFetchProjectGuaranteeFormOperationCompleted
            End If
            Me.InvokeAsync("FetchProjectGuaranteeForm", New Object() {Condition}, Me.FetchProjectGuaranteeFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectGuaranteeFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectGuaranteeFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectGuaranteeFormCompleted(Me, New FetchProjectGuaranteeFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAcceptVouchData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAcceptVouchData(ByVal ProjectCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAcceptVouchData", New Object() {ProjectCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAcceptVouchData(ByVal ProjectCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAcceptVouchData", New Object() {ProjectCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAcceptVouchData(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAcceptVouchDataAsync(ByVal ProjectCode As String)
            Me.GetAcceptVouchDataAsync(ProjectCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAcceptVouchDataAsync(ByVal ProjectCode As String, ByVal userState As Object)
            If (Me.GetAcceptVouchDataOperationCompleted Is Nothing) Then
                Me.GetAcceptVouchDataOperationCompleted = AddressOf Me.OnGetAcceptVouchDataOperationCompleted
            End If
            Me.InvokeAsync("GetAcceptVouchData", New Object() {ProjectCode}, Me.GetAcceptVouchDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAcceptVouchDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAcceptVouchDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAcceptVouchDataCompleted(Me, New GetAcceptVouchDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskListInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskListInfo(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTaskListInfo", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTaskListInfo(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTaskListInfo", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTaskListInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskListInfoAsync(ByVal Condition As String)
            Me.GetTaskListInfoAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskListInfoAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetTaskListInfoOperationCompleted Is Nothing) Then
                Me.GetTaskListInfoOperationCompleted = AddressOf Me.OnGetTaskListInfoOperationCompleted
            End If
            Me.InvokeAsync("GetTaskListInfo", New Object() {Condition}, Me.GetTaskListInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskListInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskListInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskListInfoCompleted(Me, New GetTaskListInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReviewListInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReviewListInfo() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReviewListInfo", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReviewListInfo(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReviewListInfo", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReviewListInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReviewListInfoAsync()
            Me.GetReviewListInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReviewListInfoAsync(ByVal userState As Object)
            If (Me.GetReviewListInfoOperationCompleted Is Nothing) Then
                Me.GetReviewListInfoOperationCompleted = AddressOf Me.OnGetReviewListInfoOperationCompleted
            End If
            Me.InvokeAsync("GetReviewListInfo", New Object(-1) {}, Me.GetReviewListInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReviewListInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReviewListInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReviewListInfoCompleted(Me, New GetReviewListInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDraftOutContractListInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDraftOutContractListInfo() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDraftOutContractListInfo", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDraftOutContractListInfo(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDraftOutContractListInfo", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDraftOutContractListInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDraftOutContractListInfoAsync()
            Me.GetDraftOutContractListInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDraftOutContractListInfoAsync(ByVal userState As Object)
            If (Me.GetDraftOutContractListInfoOperationCompleted Is Nothing) Then
                Me.GetDraftOutContractListInfoOperationCompleted = AddressOf Me.OnGetDraftOutContractListInfoOperationCompleted
            End If
            Me.InvokeAsync("GetDraftOutContractListInfo", New Object(-1) {}, Me.GetDraftOutContractListInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDraftOutContractListInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDraftOutContractListInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDraftOutContractListInfoCompleted(Me, New GetDraftOutContractListInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCapitialEvaluatedListInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCapitialEvaluatedListInfo() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCapitialEvaluatedListInfo", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCapitialEvaluatedListInfo(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCapitialEvaluatedListInfo", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCapitialEvaluatedListInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCapitialEvaluatedListInfoAsync()
            Me.GetCapitialEvaluatedListInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCapitialEvaluatedListInfoAsync(ByVal userState As Object)
            If (Me.GetCapitialEvaluatedListInfoOperationCompleted Is Nothing) Then
                Me.GetCapitialEvaluatedListInfoOperationCompleted = AddressOf Me.OnGetCapitialEvaluatedListInfoOperationCompleted
            End If
            Me.InvokeAsync("GetCapitialEvaluatedListInfo", New Object(-1) {}, Me.GetCapitialEvaluatedListInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCapitialEvaluatedListInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCapitialEvaluatedListInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCapitialEvaluatedListInfoCompleted(Me, New GetCapitialEvaluatedListInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetManagerAppraiseListInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetManagerAppraiseListInfo() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetManagerAppraiseListInfo", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetManagerAppraiseListInfo(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetManagerAppraiseListInfo", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetManagerAppraiseListInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetManagerAppraiseListInfoAsync()
            Me.GetManagerAppraiseListInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetManagerAppraiseListInfoAsync(ByVal userState As Object)
            If (Me.GetManagerAppraiseListInfoOperationCompleted Is Nothing) Then
                Me.GetManagerAppraiseListInfoOperationCompleted = AddressOf Me.OnGetManagerAppraiseListInfoOperationCompleted
            End If
            Me.InvokeAsync("GetManagerAppraiseListInfo", New Object(-1) {}, Me.GetManagerAppraiseListInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetManagerAppraiseListInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetManagerAppraiseListInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetManagerAppraiseListInfoCompleted(Me, New GetManagerAppraiseListInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTeamAppraiseListInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTeamAppraiseListInfo() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTeamAppraiseListInfo", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTeamAppraiseListInfo(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTeamAppraiseListInfo", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTeamAppraiseListInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTeamAppraiseListInfoAsync()
            Me.GetTeamAppraiseListInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTeamAppraiseListInfoAsync(ByVal userState As Object)
            If (Me.GetTeamAppraiseListInfoOperationCompleted Is Nothing) Then
                Me.GetTeamAppraiseListInfoOperationCompleted = AddressOf Me.OnGetTeamAppraiseListInfoOperationCompleted
            End If
            Me.InvokeAsync("GetTeamAppraiseListInfo", New Object(-1) {}, Me.GetTeamAppraiseListInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTeamAppraiseListInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTeamAppraiseListInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTeamAppraiseListInfoCompleted(Me, New GetTeamAppraiseListInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRefundProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRefundProcess(ByVal projectcode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRefundProcess", New Object() {projectcode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRefundProcess(ByVal projectcode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRefundProcess", New Object() {projectcode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRefundProcess(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRefundProcessAsync(ByVal projectcode As String)
            Me.GetRefundProcessAsync(projectcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRefundProcessAsync(ByVal projectcode As String, ByVal userState As Object)
            If (Me.GetRefundProcessOperationCompleted Is Nothing) Then
                Me.GetRefundProcessOperationCompleted = AddressOf Me.OnGetRefundProcessOperationCompleted
            End If
            Me.InvokeAsync("GetRefundProcess", New Object() {projectcode}, Me.GetRefundProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRefundProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRefundProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRefundProcessCompleted(Me, New GetRefundProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryAcceptProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryAcceptProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal accept_date_start As String, ByVal accept_date_end As String, ByVal apply_bank As String, ByVal belong_area As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryAcceptProject", New Object() {project_code, enterprise_name, apply_service_type, accept_date_start, accept_date_end, apply_bank, belong_area, vchAcceptBranch, vchPMA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryAcceptProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal accept_date_start As String, ByVal accept_date_end As String, ByVal apply_bank As String, ByVal belong_area As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryAcceptProject", New Object() {project_code, enterprise_name, apply_service_type, accept_date_start, accept_date_end, apply_bank, belong_area, vchAcceptBranch, vchPMA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryAcceptProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryAcceptProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal accept_date_start As String, ByVal accept_date_end As String, ByVal apply_bank As String, ByVal belong_area As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String)
            Me.FQueryAcceptProjectAsync(project_code, enterprise_name, apply_service_type, accept_date_start, accept_date_end, apply_bank, belong_area, vchAcceptBranch, vchPMA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryAcceptProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal accept_date_start As String, ByVal accept_date_end As String, ByVal apply_bank As String, ByVal belong_area As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryAcceptProjectOperationCompleted Is Nothing) Then
                Me.FQueryAcceptProjectOperationCompleted = AddressOf Me.OnFQueryAcceptProjectOperationCompleted
            End If
            Me.InvokeAsync("FQueryAcceptProject", New Object() {project_code, enterprise_name, apply_service_type, accept_date_start, accept_date_end, apply_bank, belong_area, vchAcceptBranch, vchPMA, userName}, Me.FQueryAcceptProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryAcceptProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryAcceptProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryAcceptProjectCompleted(Me, New FQueryAcceptProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryPresentingProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryPresentingProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal evial_date_start As String, ByVal evial_date_end As String, ByVal belong_district As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal team_name As String, ByVal manager_a As String, ByVal evial_conclusion As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryPresentingProject", New Object() {project_code, enterprise_name, apply_service_type, evial_date_start, evial_date_end, belong_district, belong_trade, ownership_type, team_name, manager_a, evial_conclusion, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryPresentingProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal evial_date_start As String, ByVal evial_date_end As String, ByVal belong_district As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal team_name As String, ByVal manager_a As String, ByVal evial_conclusion As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryPresentingProject", New Object() {project_code, enterprise_name, apply_service_type, evial_date_start, evial_date_end, belong_district, belong_trade, ownership_type, team_name, manager_a, evial_conclusion, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryPresentingProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryPresentingProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal evial_date_start As String, ByVal evial_date_end As String, ByVal belong_district As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal team_name As String, ByVal manager_a As String, ByVal evial_conclusion As String, ByVal userName As String)
            Me.FQueryPresentingProjectAsync(project_code, enterprise_name, apply_service_type, evial_date_start, evial_date_end, belong_district, belong_trade, ownership_type, team_name, manager_a, evial_conclusion, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryPresentingProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal evial_date_start As String, ByVal evial_date_end As String, ByVal belong_district As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal team_name As String, ByVal manager_a As String, ByVal evial_conclusion As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryPresentingProjectOperationCompleted Is Nothing) Then
                Me.FQueryPresentingProjectOperationCompleted = AddressOf Me.OnFQueryPresentingProjectOperationCompleted
            End If
            Me.InvokeAsync("FQueryPresentingProject", New Object() {project_code, enterprise_name, apply_service_type, evial_date_start, evial_date_end, belong_district, belong_trade, ownership_type, team_name, manager_a, evial_conclusion, userName}, Me.FQueryPresentingProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryPresentingProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryPresentingProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryPresentingProjectCompleted(Me, New FQueryPresentingProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryAllocateProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryAllocateProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal assign_date_start As String, ByVal assign_date_end As String, ByVal manager_a As String, ByVal manager_b As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryAllocateProject", New Object() {project_code, enterprise_name, apply_service_type, assign_date_start, assign_date_end, manager_a, manager_b, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryAllocateProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal assign_date_start As String, ByVal assign_date_end As String, ByVal manager_a As String, ByVal manager_b As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryAllocateProject", New Object() {project_code, enterprise_name, apply_service_type, assign_date_start, assign_date_end, manager_a, manager_b, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryAllocateProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryAllocateProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal assign_date_start As String, ByVal assign_date_end As String, ByVal manager_a As String, ByVal manager_b As String, ByVal userName As String)
            Me.FQueryAllocateProjectAsync(project_code, enterprise_name, apply_service_type, assign_date_start, assign_date_end, manager_a, manager_b, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryAllocateProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal assign_date_start As String, ByVal assign_date_end As String, ByVal manager_a As String, ByVal manager_b As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryAllocateProjectOperationCompleted Is Nothing) Then
                Me.FQueryAllocateProjectOperationCompleted = AddressOf Me.OnFQueryAllocateProjectOperationCompleted
            End If
            Me.InvokeAsync("FQueryAllocateProject", New Object() {project_code, enterprise_name, apply_service_type, assign_date_start, assign_date_end, manager_a, manager_b, userName}, Me.FQueryAllocateProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryAllocateProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryAllocateProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryAllocateProjectCompleted(Me, New FQueryAllocateProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryLoanProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryLoanProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal loan_date_start As String, ByVal loan_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryLoanProject", New Object() {project_code, enterprise_name, service_type, loan_date_start, loan_date_end, manager_a, bank, branch_bank, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryLoanProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal loan_date_start As String, ByVal loan_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryLoanProject", New Object() {project_code, enterprise_name, service_type, loan_date_start, loan_date_end, manager_a, bank, branch_bank, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryLoanProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryLoanProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal loan_date_start As String, ByVal loan_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String)
            Me.FQueryLoanProjectAsync(project_code, enterprise_name, service_type, loan_date_start, loan_date_end, manager_a, bank, branch_bank, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryLoanProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal loan_date_start As String, ByVal loan_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryLoanProjectOperationCompleted Is Nothing) Then
                Me.FQueryLoanProjectOperationCompleted = AddressOf Me.OnFQueryLoanProjectOperationCompleted
            End If
            Me.InvokeAsync("FQueryLoanProject", New Object() {project_code, enterprise_name, service_type, loan_date_start, loan_date_end, manager_a, bank, branch_bank, userName}, Me.FQueryLoanProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryLoanProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryLoanProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryLoanProjectCompleted(Me, New FQueryLoanProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQuerySignProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQuerySignProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal sign_date_start As String, ByVal sign_date_end As String, ByVal belong_district As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQuerySignProject", New Object() {project_code, enterprise_name, service_type, sign_date_start, sign_date_end, belong_district, belong_trade, ownership_type, manager_a, bank, branch_bank, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQuerySignProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal sign_date_start As String, ByVal sign_date_end As String, ByVal belong_district As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQuerySignProject", New Object() {project_code, enterprise_name, service_type, sign_date_start, sign_date_end, belong_district, belong_trade, ownership_type, manager_a, bank, branch_bank, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQuerySignProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQuerySignProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal sign_date_start As String, ByVal sign_date_end As String, ByVal belong_district As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String)
            Me.FQuerySignProjectAsync(project_code, enterprise_name, service_type, sign_date_start, sign_date_end, belong_district, belong_trade, ownership_type, manager_a, bank, branch_bank, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQuerySignProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal sign_date_start As String, ByVal sign_date_end As String, ByVal belong_district As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQuerySignProjectOperationCompleted Is Nothing) Then
                Me.FQuerySignProjectOperationCompleted = AddressOf Me.OnFQuerySignProjectOperationCompleted
            End If
            Me.InvokeAsync("FQuerySignProject", New Object() {project_code, enterprise_name, service_type, sign_date_start, sign_date_end, belong_district, belong_trade, ownership_type, manager_a, bank, branch_bank, userName}, Me.FQuerySignProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQuerySignProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQuerySignProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQuerySignProjectCompleted(Me, New FQuerySignProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PQueryFirstTrialProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PQueryFirstTrialProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal accept_date_start As String, ByVal accept_date_end As String, ByVal apply_bank As String, ByVal belong_area As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PQueryFirstTrialProject", New Object() {project_code, enterprise_name, apply_service_type, accept_date_start, accept_date_end, apply_bank, belong_area, belong_trade, ownership_type, vchAcceptBranch, vchPMA, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginPQueryFirstTrialProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal accept_date_start As String, ByVal accept_date_end As String, ByVal apply_bank As String, ByVal belong_area As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PQueryFirstTrialProject", New Object() {project_code, enterprise_name, apply_service_type, accept_date_start, accept_date_end, apply_bank, belong_area, belong_trade, ownership_type, vchAcceptBranch, vchPMA, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPQueryFirstTrialProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PQueryFirstTrialProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal accept_date_start As String, ByVal accept_date_end As String, ByVal apply_bank As String, ByVal belong_area As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String)
            Me.PQueryFirstTrialProjectAsync(project_code, enterprise_name, apply_service_type, accept_date_start, accept_date_end, apply_bank, belong_area, belong_trade, ownership_type, vchAcceptBranch, vchPMA, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PQueryFirstTrialProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal apply_service_type As String, ByVal accept_date_start As String, ByVal accept_date_end As String, ByVal apply_bank As String, ByVal belong_area As String, ByVal belong_trade As String, ByVal ownership_type As String, ByVal vchAcceptBranch As String, ByVal vchPMA As String, ByVal userName As String, ByVal userState As Object)
            If (Me.PQueryFirstTrialProjectOperationCompleted Is Nothing) Then
                Me.PQueryFirstTrialProjectOperationCompleted = AddressOf Me.OnPQueryFirstTrialProjectOperationCompleted
            End If
            Me.InvokeAsync("PQueryFirstTrialProject", New Object() {project_code, enterprise_name, apply_service_type, accept_date_start, accept_date_end, apply_bank, belong_area, belong_trade, ownership_type, vchAcceptBranch, vchPMA, userName}, Me.PQueryFirstTrialProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnPQueryFirstTrialProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.PQueryFirstTrialProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PQueryFirstTrialProjectCompleted(Me, New PQueryFirstTrialProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryCreditProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryCreditProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal today_date As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryCreditProject", New Object() {project_code, enterprise_name, service_type, today_date, manager_a, bank, branch_bank, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryCreditProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal today_date As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryCreditProject", New Object() {project_code, enterprise_name, service_type, today_date, manager_a, bank, branch_bank, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryCreditProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryCreditProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal today_date As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String)
            Me.FQueryCreditProjectAsync(project_code, enterprise_name, service_type, today_date, manager_a, bank, branch_bank, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryCreditProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal today_date As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryCreditProjectOperationCompleted Is Nothing) Then
                Me.FQueryCreditProjectOperationCompleted = AddressOf Me.OnFQueryCreditProjectOperationCompleted
            End If
            Me.InvokeAsync("FQueryCreditProject", New Object() {project_code, enterprise_name, service_type, today_date, manager_a, bank, branch_bank, userName}, Me.FQueryCreditProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryCreditProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryCreditProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryCreditProjectCompleted(Me, New FQueryCreditProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryRecantProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryRecantProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryRecantProject", New Object() {project_code, enterprise_name, service_type, date_start, date_end, manager_a, bank, branch_bank, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryRecantProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryRecantProject", New Object() {project_code, enterprise_name, service_type, date_start, date_end, manager_a, bank, branch_bank, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryRecantProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryRecantProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String)
            Me.FQueryRecantProjectAsync(project_code, enterprise_name, service_type, date_start, date_end, manager_a, bank, branch_bank, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryRecantProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryRecantProjectOperationCompleted Is Nothing) Then
                Me.FQueryRecantProjectOperationCompleted = AddressOf Me.OnFQueryRecantProjectOperationCompleted
            End If
            Me.InvokeAsync("FQueryRecantProject", New Object() {project_code, enterprise_name, service_type, date_start, date_end, manager_a, bank, branch_bank, userName}, Me.FQueryRecantProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryRecantProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryRecantProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryRecantProjectCompleted(Me, New FQueryRecantProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryProcessingProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryProcessingProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal manager_a As String, ByVal manager_b As String, ByVal phase As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryProcessingProject", New Object() {project_code, enterprise_name, service_type, date_start, manager_a, manager_b, phase, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryProcessingProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal manager_a As String, ByVal manager_b As String, ByVal phase As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryProcessingProject", New Object() {project_code, enterprise_name, service_type, date_start, manager_a, manager_b, phase, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryProcessingProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryProcessingProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal manager_a As String, ByVal manager_b As String, ByVal phase As String, ByVal userName As String)
            Me.FQueryProcessingProjectAsync(project_code, enterprise_name, service_type, date_start, manager_a, manager_b, phase, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryProcessingProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal manager_a As String, ByVal manager_b As String, ByVal phase As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryProcessingProjectOperationCompleted Is Nothing) Then
                Me.FQueryProcessingProjectOperationCompleted = AddressOf Me.OnFQueryProcessingProjectOperationCompleted
            End If
            Me.InvokeAsync("FQueryProcessingProject", New Object() {project_code, enterprise_name, service_type, date_start, manager_a, manager_b, phase, userName}, Me.FQueryProcessingProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryProcessingProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryProcessingProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryProcessingProjectCompleted(Me, New FQueryProcessingProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryRegionProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryRegionProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal cooperate_area As String, ByVal phase As String, ByVal vchPMA As String, ByVal userName As String, ByVal recommend_type As String, ByVal opinion As String, ByVal exempt As String, ByVal trial_conclusion As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryRegionProject", New Object() {project_code, enterprise_name, service_type, date_start, date_end, cooperate_area, phase, vchPMA, userName, recommend_type, opinion, exempt, trial_conclusion})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryRegionProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal cooperate_area As String, ByVal phase As String, ByVal vchPMA As String, ByVal userName As String, ByVal recommend_type As String, ByVal opinion As String, ByVal exempt As String, ByVal trial_conclusion As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryRegionProject", New Object() {project_code, enterprise_name, service_type, date_start, date_end, cooperate_area, phase, vchPMA, userName, recommend_type, opinion, exempt, trial_conclusion}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryRegionProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryRegionProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal cooperate_area As String, ByVal phase As String, ByVal vchPMA As String, ByVal userName As String, ByVal recommend_type As String, ByVal opinion As String, ByVal exempt As String, ByVal trial_conclusion As String)
            Me.FQueryRegionProjectAsync(project_code, enterprise_name, service_type, date_start, date_end, cooperate_area, phase, vchPMA, userName, recommend_type, opinion, exempt, trial_conclusion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryRegionProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal cooperate_area As String, ByVal phase As String, ByVal vchPMA As String, ByVal userName As String, ByVal recommend_type As String, ByVal opinion As String, ByVal exempt As String, ByVal trial_conclusion As String, ByVal userState As Object)
            If (Me.FQueryRegionProjectOperationCompleted Is Nothing) Then
                Me.FQueryRegionProjectOperationCompleted = AddressOf Me.OnFQueryRegionProjectOperationCompleted
            End If
            Me.InvokeAsync("FQueryRegionProject", New Object() {project_code, enterprise_name, service_type, date_start, date_end, cooperate_area, phase, vchPMA, userName, recommend_type, opinion, exempt, trial_conclusion}, Me.FQueryRegionProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryRegionProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryRegionProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryRegionProjectCompleted(Me, New FQueryRegionProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryRequiteProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryRequiteProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal refund_date_start As String, ByVal refund_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal refund_type As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryRequiteProject", New Object() {project_code, enterprise_name, service_type, refund_date_start, refund_date_end, manager_a, bank, refund_type, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryRequiteProject(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal refund_date_start As String, ByVal refund_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal refund_type As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryRequiteProject", New Object() {project_code, enterprise_name, service_type, refund_date_start, refund_date_end, manager_a, bank, refund_type, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryRequiteProject(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryRequiteProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal refund_date_start As String, ByVal refund_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal refund_type As String, ByVal userName As String)
            Me.FQueryRequiteProjectAsync(project_code, enterprise_name, service_type, refund_date_start, refund_date_end, manager_a, bank, refund_type, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryRequiteProjectAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal refund_date_start As String, ByVal refund_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal refund_type As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryRequiteProjectOperationCompleted Is Nothing) Then
                Me.FQueryRequiteProjectOperationCompleted = AddressOf Me.OnFQueryRequiteProjectOperationCompleted
            End If
            Me.InvokeAsync("FQueryRequiteProject", New Object() {project_code, enterprise_name, service_type, refund_date_start, refund_date_end, manager_a, bank, refund_type, userName}, Me.FQueryRequiteProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryRequiteProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryRequiteProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryRequiteProjectCompleted(Me, New FQueryRequiteProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryChargeStatistics", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryChargeStatistics(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal manager_a As String, ByVal item_name As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryChargeStatistics", New Object() {project_code, enterprise_name, service_type, date_start, date_end, manager_a, item_name, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryChargeStatistics(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal manager_a As String, ByVal item_name As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryChargeStatistics", New Object() {project_code, enterprise_name, service_type, date_start, date_end, manager_a, item_name, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryChargeStatistics(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryChargeStatisticsAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal manager_a As String, ByVal item_name As String, ByVal userName As String)
            Me.FQueryChargeStatisticsAsync(project_code, enterprise_name, service_type, date_start, date_end, manager_a, item_name, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryChargeStatisticsAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal date_start As String, ByVal date_end As String, ByVal manager_a As String, ByVal item_name As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryChargeStatisticsOperationCompleted Is Nothing) Then
                Me.FQueryChargeStatisticsOperationCompleted = AddressOf Me.OnFQueryChargeStatisticsOperationCompleted
            End If
            Me.InvokeAsync("FQueryChargeStatistics", New Object() {project_code, enterprise_name, service_type, date_start, date_end, manager_a, item_name, userName}, Me.FQueryChargeStatisticsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryChargeStatisticsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryChargeStatisticsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryChargeStatisticsCompleted(Me, New FQueryChargeStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTaskTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTaskTemplate(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateTaskTemplate", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateTaskTemplate(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateTaskTemplate", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateTaskTemplate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTaskTemplateAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateTaskTemplateAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTaskTemplateAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateTaskTemplateOperationCompleted Is Nothing) Then
                Me.UpdateTaskTemplateOperationCompleted = AddressOf Me.OnUpdateTaskTemplateOperationCompleted
            End If
            Me.InvokeAsync("UpdateTaskTemplate", New Object() {dstCommit}, Me.UpdateTaskTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTaskTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTaskTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTaskTemplateCompleted(Me, New UpdateTaskTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOppositeGuaranteeAssurerInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOppositeGuaranteeAssurerInfo(ByVal strSQL_Condition_OppositeGuaranteeAssurer As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOppositeGuaranteeAssurerInfo", New Object() {strSQL_Condition_OppositeGuaranteeAssurer})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOppositeGuaranteeAssurerInfo(ByVal strSQL_Condition_OppositeGuaranteeAssurer As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOppositeGuaranteeAssurerInfo", New Object() {strSQL_Condition_OppositeGuaranteeAssurer}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOppositeGuaranteeAssurerInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOppositeGuaranteeAssurerInfoAsync(ByVal strSQL_Condition_OppositeGuaranteeAssurer As String)
            Me.GetOppositeGuaranteeAssurerInfoAsync(strSQL_Condition_OppositeGuaranteeAssurer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOppositeGuaranteeAssurerInfoAsync(ByVal strSQL_Condition_OppositeGuaranteeAssurer As String, ByVal userState As Object)
            If (Me.GetOppositeGuaranteeAssurerInfoOperationCompleted Is Nothing) Then
                Me.GetOppositeGuaranteeAssurerInfoOperationCompleted = AddressOf Me.OnGetOppositeGuaranteeAssurerInfoOperationCompleted
            End If
            Me.InvokeAsync("GetOppositeGuaranteeAssurerInfo", New Object() {strSQL_Condition_OppositeGuaranteeAssurer}, Me.GetOppositeGuaranteeAssurerInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOppositeGuaranteeAssurerInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOppositeGuaranteeAssurerInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOppositeGuaranteeAssurerInfoCompleted(Me, New GetOppositeGuaranteeAssurerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOppositeGuaranteeAssurer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOppositeGuaranteeAssurer(ByVal OppositeGuaranteeAssurerSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateOppositeGuaranteeAssurer", New Object() {OppositeGuaranteeAssurerSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateOppositeGuaranteeAssurer(ByVal OppositeGuaranteeAssurerSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateOppositeGuaranteeAssurer", New Object() {OppositeGuaranteeAssurerSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateOppositeGuaranteeAssurer(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOppositeGuaranteeAssurerAsync(ByVal OppositeGuaranteeAssurerSet As System.Data.DataSet)
            Me.UpdateOppositeGuaranteeAssurerAsync(OppositeGuaranteeAssurerSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOppositeGuaranteeAssurerAsync(ByVal OppositeGuaranteeAssurerSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateOppositeGuaranteeAssurerOperationCompleted Is Nothing) Then
                Me.UpdateOppositeGuaranteeAssurerOperationCompleted = AddressOf Me.OnUpdateOppositeGuaranteeAssurerOperationCompleted
            End If
            Me.InvokeAsync("UpdateOppositeGuaranteeAssurer", New Object() {OppositeGuaranteeAssurerSet}, Me.UpdateOppositeGuaranteeAssurerOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOppositeGuaranteeAssurerOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOppositeGuaranteeAssurerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOppositeGuaranteeAssurerCompleted(Me, New UpdateOppositeGuaranteeAssurerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTechnologyType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTechnologyType(ByVal TechnologyTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTechnologyType", New Object() {TechnologyTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTechnologyType(ByVal TechnologyTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTechnologyType", New Object() {TechnologyTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTechnologyType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTechnologyTypeAsync(ByVal TechnologyTypeNo As String)
            Me.GetTechnologyTypeAsync(TechnologyTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTechnologyTypeAsync(ByVal TechnologyTypeNo As String, ByVal userState As Object)
            If (Me.GetTechnologyTypeOperationCompleted Is Nothing) Then
                Me.GetTechnologyTypeOperationCompleted = AddressOf Me.OnGetTechnologyTypeOperationCompleted
            End If
            Me.InvokeAsync("GetTechnologyType", New Object() {TechnologyTypeNo}, Me.GetTechnologyTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTechnologyTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTechnologyTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTechnologyTypeCompleted(Me, New GetTechnologyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTechnologyType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTechnologyType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateTechnologyType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateTechnologyType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateTechnologyType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateTechnologyType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTechnologyTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateTechnologyTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTechnologyTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateTechnologyTypeOperationCompleted Is Nothing) Then
                Me.UpdateTechnologyTypeOperationCompleted = AddressOf Me.OnUpdateTechnologyTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateTechnologyType", New Object() {dstCommit}, Me.UpdateTechnologyTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTechnologyTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTechnologyTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTechnologyTypeCompleted(Me, New UpdateTechnologyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTerminateType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTerminateType(ByVal TerminateTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTerminateType", New Object() {TerminateTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTerminateType(ByVal TerminateTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTerminateType", New Object() {TerminateTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTerminateType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTerminateTypeAsync(ByVal TerminateTypeNo As String)
            Me.GetTerminateTypeAsync(TerminateTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTerminateTypeAsync(ByVal TerminateTypeNo As String, ByVal userState As Object)
            If (Me.GetTerminateTypeOperationCompleted Is Nothing) Then
                Me.GetTerminateTypeOperationCompleted = AddressOf Me.OnGetTerminateTypeOperationCompleted
            End If
            Me.InvokeAsync("GetTerminateType", New Object() {TerminateTypeNo}, Me.GetTerminateTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTerminateTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTerminateTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTerminateTypeCompleted(Me, New GetTerminateTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTerminateType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTerminateType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateTerminateType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateTerminateType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateTerminateType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateTerminateType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTerminateTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateTerminateTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTerminateTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateTerminateTypeOperationCompleted Is Nothing) Then
                Me.UpdateTerminateTypeOperationCompleted = AddressOf Me.OnUpdateTerminateTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateTerminateType", New Object() {dstCommit}, Me.UpdateTerminateTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTerminateTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTerminateTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTerminateTypeCompleted(Me, New UpdateTerminateTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUser(ByVal UserID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUser", New Object() {UserID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUser(ByVal UserID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUser", New Object() {UserID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUser(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserAsync(ByVal UserID As String)
            Me.GetUserAsync(UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserAsync(ByVal UserID As String, ByVal userState As Object)
            If (Me.GetUserOperationCompleted Is Nothing) Then
                Me.GetUserOperationCompleted = AddressOf Me.OnGetUserOperationCompleted
            End If
            Me.InvokeAsync("GetUser", New Object() {UserID}, Me.GetUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserCompleted(Me, New GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUser(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateUser", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateUser(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateUser", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateUser(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateUserAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateUserOperationCompleted Is Nothing) Then
                Me.UpdateUserOperationCompleted = AddressOf Me.OnUpdateUserOperationCompleted
            End If
            Me.InvokeAsync("UpdateUser", New Object() {dstCommit}, Me.UpdateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserCompleted(Me, New UpdateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkLogInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWorkLogInfo(ByVal strSQL_Condition_WorkLog As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWorkLogInfo", New Object() {strSQL_Condition_WorkLog})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWorkLogInfo(ByVal strSQL_Condition_WorkLog As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWorkLogInfo", New Object() {strSQL_Condition_WorkLog}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWorkLogInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWorkLogInfoAsync(ByVal strSQL_Condition_WorkLog As String)
            Me.GetWorkLogInfoAsync(strSQL_Condition_WorkLog, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWorkLogInfoAsync(ByVal strSQL_Condition_WorkLog As String, ByVal userState As Object)
            If (Me.GetWorkLogInfoOperationCompleted Is Nothing) Then
                Me.GetWorkLogInfoOperationCompleted = AddressOf Me.OnGetWorkLogInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWorkLogInfo", New Object() {strSQL_Condition_WorkLog}, Me.GetWorkLogInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWorkLogInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWorkLogInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWorkLogInfoCompleted(Me, New GetWorkLogInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWorkLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWorkLog(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWorkLog", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWorkLog(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWorkLog", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWorkLog(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWorkLogAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateWorkLogAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWorkLogAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWorkLogOperationCompleted Is Nothing) Then
                Me.UpdateWorkLogOperationCompleted = AddressOf Me.OnUpdateWorkLogOperationCompleted
            End If
            Me.InvokeAsync("UpdateWorkLog", New Object() {dstCommit}, Me.UpdateWorkLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWorkLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWorkLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWorkLogCompleted(Me, New UpdateWorkLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectEndCaseInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectEndCaseInfo(ByVal strSQL_Condition_ProjectEndCase As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectEndCaseInfo", New Object() {strSQL_Condition_ProjectEndCase})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectEndCaseInfo(ByVal strSQL_Condition_ProjectEndCase As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectEndCaseInfo", New Object() {strSQL_Condition_ProjectEndCase}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectEndCaseInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectEndCaseInfoAsync(ByVal strSQL_Condition_ProjectEndCase As String)
            Me.GetProjectEndCaseInfoAsync(strSQL_Condition_ProjectEndCase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectEndCaseInfoAsync(ByVal strSQL_Condition_ProjectEndCase As String, ByVal userState As Object)
            If (Me.GetProjectEndCaseInfoOperationCompleted Is Nothing) Then
                Me.GetProjectEndCaseInfoOperationCompleted = AddressOf Me.OnGetProjectEndCaseInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectEndCaseInfo", New Object() {strSQL_Condition_ProjectEndCase}, Me.GetProjectEndCaseInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectEndCaseInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectEndCaseInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectEndCaseInfoCompleted(Me, New GetProjectEndCaseInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectEndCase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectEndCase(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectEndCase", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectEndCase(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectEndCase", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectEndCase(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectEndCaseAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProjectEndCaseAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectEndCaseAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectEndCaseOperationCompleted Is Nothing) Then
                Me.UpdateProjectEndCaseOperationCompleted = AddressOf Me.OnUpdateProjectEndCaseOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectEndCase", New Object() {dstCommit}, Me.UpdateProjectEndCaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectEndCaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectEndCaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectEndCaseCompleted(Me, New UpdateProjectEndCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRiskClass", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRiskClass(ByVal RiskClassNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRiskClass", New Object() {RiskClassNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRiskClass(ByVal RiskClassNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRiskClass", New Object() {RiskClassNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRiskClass(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRiskClassAsync(ByVal RiskClassNo As String)
            Me.GetRiskClassAsync(RiskClassNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRiskClassAsync(ByVal RiskClassNo As String, ByVal userState As Object)
            If (Me.GetRiskClassOperationCompleted Is Nothing) Then
                Me.GetRiskClassOperationCompleted = AddressOf Me.OnGetRiskClassOperationCompleted
            End If
            Me.InvokeAsync("GetRiskClass", New Object() {RiskClassNo}, Me.GetRiskClassOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRiskClassOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRiskClassCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRiskClassCompleted(Me, New GetRiskClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRiskClass", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRiskClass(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateRiskClass", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateRiskClass(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateRiskClass", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateRiskClass(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRiskClassAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateRiskClassAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRiskClassAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateRiskClassOperationCompleted Is Nothing) Then
                Me.UpdateRiskClassOperationCompleted = AddressOf Me.OnUpdateRiskClassOperationCompleted
            End If
            Me.InvokeAsync("UpdateRiskClass", New Object() {dstCommit}, Me.UpdateRiskClassOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRiskClassOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRiskClassCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRiskClassCompleted(Me, New UpdateRiskClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPhase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPhase(ByVal PhaseNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPhase", New Object() {PhaseNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPhase(ByVal PhaseNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPhase", New Object() {PhaseNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPhase(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPhaseAsync(ByVal PhaseNo As String)
            Me.GetPhaseAsync(PhaseNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPhaseAsync(ByVal PhaseNo As String, ByVal userState As Object)
            If (Me.GetPhaseOperationCompleted Is Nothing) Then
                Me.GetPhaseOperationCompleted = AddressOf Me.OnGetPhaseOperationCompleted
            End If
            Me.InvokeAsync("GetPhase", New Object() {PhaseNo}, Me.GetPhaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPhaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPhaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPhaseCompleted(Me, New GetPhaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePhase", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePhase(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdatePhase", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdatePhase(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdatePhase", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdatePhase(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePhaseAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdatePhaseAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePhaseAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdatePhaseOperationCompleted Is Nothing) Then
                Me.UpdatePhaseOperationCompleted = AddressOf Me.OnUpdatePhaseOperationCompleted
            End If
            Me.InvokeAsync("UpdatePhase", New Object() {dstCommit}, Me.UpdatePhaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePhaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePhaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePhaseCompleted(Me, New UpdatePhaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTeam", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTeam(ByVal TeamID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTeam", New Object() {TeamID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTeam(ByVal TeamID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTeam", New Object() {TeamID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTeam(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTeamAsync(ByVal TeamID As String)
            Me.GetTeamAsync(TeamID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTeamAsync(ByVal TeamID As String, ByVal userState As Object)
            If (Me.GetTeamOperationCompleted Is Nothing) Then
                Me.GetTeamOperationCompleted = AddressOf Me.OnGetTeamOperationCompleted
            End If
            Me.InvokeAsync("GetTeam", New Object() {TeamID}, Me.GetTeamOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTeamOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTeamCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTeamCompleted(Me, New GetTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffTeam", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStaffTeam(ByVal TeamID As String, ByVal StaffID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStaffTeam", New Object() {TeamID, StaffID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetStaffTeam(ByVal TeamID As String, ByVal StaffID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetStaffTeam", New Object() {TeamID, StaffID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetStaffTeam(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStaffTeamAsync(ByVal TeamID As String, ByVal StaffID As String)
            Me.GetStaffTeamAsync(TeamID, StaffID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStaffTeamAsync(ByVal TeamID As String, ByVal StaffID As String, ByVal userState As Object)
            If (Me.GetStaffTeamOperationCompleted Is Nothing) Then
                Me.GetStaffTeamOperationCompleted = AddressOf Me.OnGetStaffTeamOperationCompleted
            End If
            Me.InvokeAsync("GetStaffTeam", New Object() {TeamID, StaffID}, Me.GetStaffTeamOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStaffTeamOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStaffTeamCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStaffTeamCompleted(Me, New GetStaffTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTeam", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTeam(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateTeam", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateTeam(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateTeam", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateTeam(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTeamAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateTeamAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTeamAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateTeamOperationCompleted Is Nothing) Then
                Me.UpdateTeamOperationCompleted = AddressOf Me.OnUpdateTeamOperationCompleted
            End If
            Me.InvokeAsync("UpdateTeam", New Object() {dstCommit}, Me.UpdateTeamOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTeamOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTeamCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTeamCompleted(Me, New UpdateTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateStaffTeam", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateStaffTeam(ByVal rstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateStaffTeam", New Object() {rstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateStaffTeam(ByVal rstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateStaffTeam", New Object() {rstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateStaffTeam(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateStaffTeamAsync(ByVal rstCommit As System.Data.DataSet)
            Me.UpdateStaffTeamAsync(rstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateStaffTeamAsync(ByVal rstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateStaffTeamOperationCompleted Is Nothing) Then
                Me.UpdateStaffTeamOperationCompleted = AddressOf Me.OnUpdateStaffTeamOperationCompleted
            End If
            Me.InvokeAsync("UpdateStaffTeam", New Object() {rstCommit}, Me.UpdateStaffTeamOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateStaffTeamOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateStaffTeamCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateStaffTeamCompleted(Me, New UpdateStaffTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaff", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStaff(ByVal StaffID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStaff", New Object() {StaffID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetStaff(ByVal StaffID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetStaff", New Object() {StaffID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetStaff(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStaffAsync(ByVal StaffID As String)
            Me.GetStaffAsync(StaffID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStaffAsync(ByVal StaffID As String, ByVal userState As Object)
            If (Me.GetStaffOperationCompleted Is Nothing) Then
                Me.GetStaffOperationCompleted = AddressOf Me.OnGetStaffOperationCompleted
            End If
            Me.InvokeAsync("GetStaff", New Object() {StaffID}, Me.GetStaffOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStaffOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStaffCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStaffCompleted(Me, New GetStaffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffRole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStaffRole(ByVal RoleID As String, ByVal StaffID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStaffRole", New Object() {RoleID, StaffID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetStaffRole(ByVal RoleID As String, ByVal StaffID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetStaffRole", New Object() {RoleID, StaffID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetStaffRole(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStaffRoleAsync(ByVal RoleID As String, ByVal StaffID As String)
            Me.GetStaffRoleAsync(RoleID, StaffID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStaffRoleAsync(ByVal RoleID As String, ByVal StaffID As String, ByVal userState As Object)
            If (Me.GetStaffRoleOperationCompleted Is Nothing) Then
                Me.GetStaffRoleOperationCompleted = AddressOf Me.OnGetStaffRoleOperationCompleted
            End If
            Me.InvokeAsync("GetStaffRole", New Object() {RoleID, StaffID}, Me.GetStaffRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStaffRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStaffRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStaffRoleCompleted(Me, New GetStaffRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffByRoleID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStaffByRoleID(ByVal RoleID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStaffByRoleID", New Object() {RoleID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetStaffByRoleID(ByVal RoleID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetStaffByRoleID", New Object() {RoleID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetStaffByRoleID(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStaffByRoleIDAsync(ByVal RoleID As String)
            Me.GetStaffByRoleIDAsync(RoleID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStaffByRoleIDAsync(ByVal RoleID As String, ByVal userState As Object)
            If (Me.GetStaffByRoleIDOperationCompleted Is Nothing) Then
                Me.GetStaffByRoleIDOperationCompleted = AddressOf Me.OnGetStaffByRoleIDOperationCompleted
            End If
            Me.InvokeAsync("GetStaffByRoleID", New Object() {RoleID}, Me.GetStaffByRoleIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStaffByRoleIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStaffByRoleIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStaffByRoleIDCompleted(Me, New GetStaffByRoleIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffEX", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStaffEX(ByVal TeamID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStaffEX", New Object() {TeamID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetStaffEX(ByVal TeamID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetStaffEX", New Object() {TeamID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetStaffEX(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStaffEXAsync(ByVal TeamID As String)
            Me.GetStaffEXAsync(TeamID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStaffEXAsync(ByVal TeamID As String, ByVal userState As Object)
            If (Me.GetStaffEXOperationCompleted Is Nothing) Then
                Me.GetStaffEXOperationCompleted = AddressOf Me.OnGetStaffEXOperationCompleted
            End If
            Me.InvokeAsync("GetStaffEX", New Object() {TeamID}, Me.GetStaffEXOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStaffEXOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStaffEXCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStaffEXCompleted(Me, New GetStaffEXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateStaff", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateStaff(ByVal rstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateStaff", New Object() {rstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateStaff(ByVal rstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateStaff", New Object() {rstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateStaff(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateStaffAsync(ByVal rstCommit As System.Data.DataSet)
            Me.UpdateStaffAsync(rstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateStaffAsync(ByVal rstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateStaffOperationCompleted Is Nothing) Then
                Me.UpdateStaffOperationCompleted = AddressOf Me.OnUpdateStaffOperationCompleted
            End If
            Me.InvokeAsync("UpdateStaff", New Object() {rstCommit}, Me.UpdateStaffOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateStaffOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateStaffCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateStaffCompleted(Me, New UpdateStaffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectOpinionBySerialID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectOpinionBySerialID(ByVal SerialID As Long) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectOpinionBySerialID", New Object() {SerialID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectOpinionBySerialID(ByVal SerialID As Long, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectOpinionBySerialID", New Object() {SerialID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectOpinionBySerialID(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectOpinionBySerialIDAsync(ByVal SerialID As Long)
            Me.GetProjectOpinionBySerialIDAsync(SerialID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectOpinionBySerialIDAsync(ByVal SerialID As Long, ByVal userState As Object)
            If (Me.GetProjectOpinionBySerialIDOperationCompleted Is Nothing) Then
                Me.GetProjectOpinionBySerialIDOperationCompleted = AddressOf Me.OnGetProjectOpinionBySerialIDOperationCompleted
            End If
            Me.InvokeAsync("GetProjectOpinionBySerialID", New Object() {SerialID}, Me.GetProjectOpinionBySerialIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectOpinionBySerialIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectOpinionBySerialIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectOpinionBySerialIDCompleted(Me, New GetProjectOpinionBySerialIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectOpinionByProjectNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectOpinionByProjectNo(ByVal ProjectNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectOpinionByProjectNo", New Object() {ProjectNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectOpinionByProjectNo(ByVal ProjectNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectOpinionByProjectNo", New Object() {ProjectNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectOpinionByProjectNo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectOpinionByProjectNoAsync(ByVal ProjectNo As String)
            Me.GetProjectOpinionByProjectNoAsync(ProjectNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectOpinionByProjectNoAsync(ByVal ProjectNo As String, ByVal userState As Object)
            If (Me.GetProjectOpinionByProjectNoOperationCompleted Is Nothing) Then
                Me.GetProjectOpinionByProjectNoOperationCompleted = AddressOf Me.OnGetProjectOpinionByProjectNoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectOpinionByProjectNo", New Object() {ProjectNo}, Me.GetProjectOpinionByProjectNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectOpinionByProjectNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectOpinionByProjectNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectOpinionByProjectNoCompleted(Me, New GetProjectOpinionByProjectNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectOpinion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectOpinion(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectOpinion", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectOpinion(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectOpinion", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectOpinion(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectOpinionAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProjectOpinionAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectOpinionAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectOpinionOperationCompleted Is Nothing) Then
                Me.UpdateProjectOpinionOperationCompleted = AddressOf Me.OnUpdateProjectOpinionOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectOpinion", New Object() {dstCommit}, Me.UpdateProjectOpinionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectOpinionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectOpinionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectOpinionCompleted(Me, New UpdateProjectOpinionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectOpinionAndProjectAccountDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectOpinionAndProjectAccountDetail(ByVal ProjectOpinionASet As System.Data.DataSet, ByVal ProjectAccountDetailSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectOpinionAndProjectAccountDetail", New Object() {ProjectOpinionASet, ProjectAccountDetailSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectOpinionAndProjectAccountDetail(ByVal ProjectOpinionASet As System.Data.DataSet, ByVal ProjectAccountDetailSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectOpinionAndProjectAccountDetail", New Object() {ProjectOpinionASet, ProjectAccountDetailSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectOpinionAndProjectAccountDetail(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectOpinionAndProjectAccountDetailAsync(ByVal ProjectOpinionASet As System.Data.DataSet, ByVal ProjectAccountDetailSet As System.Data.DataSet)
            Me.UpdateProjectOpinionAndProjectAccountDetailAsync(ProjectOpinionASet, ProjectAccountDetailSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectOpinionAndProjectAccountDetailAsync(ByVal ProjectOpinionASet As System.Data.DataSet, ByVal ProjectAccountDetailSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectOpinionAndProjectAccountDetailOperationCompleted Is Nothing) Then
                Me.UpdateProjectOpinionAndProjectAccountDetailOperationCompleted = AddressOf Me.OnUpdateProjectOpinionAndProjectAccountDetailOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectOpinionAndProjectAccountDetail", New Object() {ProjectOpinionASet, ProjectAccountDetailSet}, Me.UpdateProjectOpinionAndProjectAccountDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectOpinionAndProjectAccountDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectOpinionAndProjectAccountDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectOpinionAndProjectAccountDetailCompleted(Me, New UpdateProjectOpinionAndProjectAccountDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectFileByCondition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectFileByCondition(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectFileByCondition", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectFileByCondition(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectFileByCondition", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectFileByCondition(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectFileByConditionAsync(ByVal Condition As String)
            Me.GetProjectFileByConditionAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectFileByConditionAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetProjectFileByConditionOperationCompleted Is Nothing) Then
                Me.GetProjectFileByConditionOperationCompleted = AddressOf Me.OnGetProjectFileByConditionOperationCompleted
            End If
            Me.InvokeAsync("GetProjectFileByCondition", New Object() {Condition}, Me.GetProjectFileByConditionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectFileByConditionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectFileByConditionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectFileByConditionCompleted(Me, New GetProjectFileByConditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectFileImageByCondition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectFileImageByCondition(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectFileImageByCondition", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectFileImageByCondition(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectFileImageByCondition", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectFileImageByCondition(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectFileImageByConditionAsync(ByVal Condition As String)
            Me.GetProjectFileImageByConditionAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectFileImageByConditionAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetProjectFileImageByConditionOperationCompleted Is Nothing) Then
                Me.GetProjectFileImageByConditionOperationCompleted = AddressOf Me.OnGetProjectFileImageByConditionOperationCompleted
            End If
            Me.InvokeAsync("GetProjectFileImageByCondition", New Object() {Condition}, Me.GetProjectFileImageByConditionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectFileImageByConditionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectFileImageByConditionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectFileImageByConditionCompleted(Me, New GetProjectFileImageByConditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectFile(ByVal ProjectNo As String, ByVal ItemNo As String, ByVal ItemTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectFile", New Object() {ProjectNo, ItemNo, ItemTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectFile(ByVal ProjectNo As String, ByVal ItemNo As String, ByVal ItemTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectFile", New Object() {ProjectNo, ItemNo, ItemTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectFile(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectFileAsync(ByVal ProjectNo As String, ByVal ItemNo As String, ByVal ItemTypeNo As String)
            Me.GetProjectFileAsync(ProjectNo, ItemNo, ItemTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectFileAsync(ByVal ProjectNo As String, ByVal ItemNo As String, ByVal ItemTypeNo As String, ByVal userState As Object)
            If (Me.GetProjectFileOperationCompleted Is Nothing) Then
                Me.GetProjectFileOperationCompleted = AddressOf Me.OnGetProjectFileOperationCompleted
            End If
            Me.InvokeAsync("GetProjectFile", New Object() {ProjectNo, ItemNo, ItemTypeNo}, Me.GetProjectFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectFileCompleted(Me, New GetProjectFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRelationID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRelationID() As Long
            Dim results() As Object = Me.Invoke("GetRelationID", New Object(-1) {})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRelationID(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRelationID", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRelationID(ByVal asyncResult As System.IAsyncResult) As Long
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRelationIDAsync()
            Me.GetRelationIDAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRelationIDAsync(ByVal userState As Object)
            If (Me.GetRelationIDOperationCompleted Is Nothing) Then
                Me.GetRelationIDOperationCompleted = AddressOf Me.OnGetRelationIDOperationCompleted
            End If
            Me.InvokeAsync("GetRelationID", New Object(-1) {}, Me.GetRelationIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRelationIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRelationIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRelationIDCompleted(Me, New GetRelationIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectFileImage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectFileImage(ByVal ProjectNo As String, ByVal ItemNo As String, ByVal ItemTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectFileImage", New Object() {ProjectNo, ItemNo, ItemTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectFileImage(ByVal ProjectNo As String, ByVal ItemNo As String, ByVal ItemTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectFileImage", New Object() {ProjectNo, ItemNo, ItemTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectFileImage(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectFileImageAsync(ByVal ProjectNo As String, ByVal ItemNo As String, ByVal ItemTypeNo As String)
            Me.GetProjectFileImageAsync(ProjectNo, ItemNo, ItemTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectFileImageAsync(ByVal ProjectNo As String, ByVal ItemNo As String, ByVal ItemTypeNo As String, ByVal userState As Object)
            If (Me.GetProjectFileImageOperationCompleted Is Nothing) Then
                Me.GetProjectFileImageOperationCompleted = AddressOf Me.OnGetProjectFileImageOperationCompleted
            End If
            Me.InvokeAsync("GetProjectFileImage", New Object() {ProjectNo, ItemNo, ItemTypeNo}, Me.GetProjectFileImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectFileImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectFileImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectFileImageCompleted(Me, New GetProjectFileImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectFile(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectFile", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectFile(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectFile", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectFile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectFileAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProjectFileAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectFileAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectFileOperationCompleted Is Nothing) Then
                Me.UpdateProjectFileOperationCompleted = AddressOf Me.OnUpdateProjectFileOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectFile", New Object() {dstCommit}, Me.UpdateProjectFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectFileCompleted(Me, New UpdateProjectFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectFileImage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectFileImage(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectFileImage", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectFileImage(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectFileImage", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectFileImage(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectFileImageAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProjectFileImageAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectFileImageAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectFileImageOperationCompleted Is Nothing) Then
                Me.UpdateProjectFileImageOperationCompleted = AddressOf Me.OnUpdateProjectFileImageOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectFileImage", New Object() {dstCommit}, Me.UpdateProjectFileImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectFileImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectFileImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectFileImageCompleted(Me, New UpdateProjectFileImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileTemplateByCondition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFileTemplateByCondition(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFileTemplateByCondition", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFileTemplateByCondition(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFileTemplateByCondition", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFileTemplateByCondition(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFileTemplateByConditionAsync(ByVal Condition As String)
            Me.GetFileTemplateByConditionAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFileTemplateByConditionAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetFileTemplateByConditionOperationCompleted Is Nothing) Then
                Me.GetFileTemplateByConditionOperationCompleted = AddressOf Me.OnGetFileTemplateByConditionOperationCompleted
            End If
            Me.InvokeAsync("GetFileTemplateByCondition", New Object() {Condition}, Me.GetFileTemplateByConditionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFileTemplateByConditionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFileTemplateByConditionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFileTemplateByConditionCompleted(Me, New GetFileTemplateByConditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileTemplateEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFileTemplateEx(ByVal ItemType As String, ByVal ItemNo As String, ByVal Version As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFileTemplateEx", New Object() {ItemType, ItemNo, Version})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFileTemplateEx(ByVal ItemType As String, ByVal ItemNo As String, ByVal Version As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFileTemplateEx", New Object() {ItemType, ItemNo, Version}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFileTemplateEx(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFileTemplateExAsync(ByVal ItemType As String, ByVal ItemNo As String, ByVal Version As String)
            Me.GetFileTemplateExAsync(ItemType, ItemNo, Version, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFileTemplateExAsync(ByVal ItemType As String, ByVal ItemNo As String, ByVal Version As String, ByVal userState As Object)
            If (Me.GetFileTemplateExOperationCompleted Is Nothing) Then
                Me.GetFileTemplateExOperationCompleted = AddressOf Me.OnGetFileTemplateExOperationCompleted
            End If
            Me.InvokeAsync("GetFileTemplateEx", New Object() {ItemType, ItemNo, Version}, Me.GetFileTemplateExOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFileTemplateExOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFileTemplateExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFileTemplateExCompleted(Me, New GetFileTemplateExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFileTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFileTemplate(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateFileTemplate", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateFileTemplate(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateFileTemplate", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateFileTemplate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFileTemplateAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateFileTemplateAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFileTemplateAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateFileTemplateOperationCompleted Is Nothing) Then
                Me.UpdateFileTemplateOperationCompleted = AddressOf Me.OnUpdateFileTemplateOperationCompleted
            End If
            Me.InvokeAsync("UpdateFileTemplate", New Object() {dstCommit}, Me.UpdateFileTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFileTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFileTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFileTemplateCompleted(Me, New UpdateFileTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLoanForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoanForm(ByVal LoanFormNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLoanForm", New Object() {LoanFormNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLoanForm(ByVal LoanFormNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLoanForm", New Object() {LoanFormNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLoanForm(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoanFormAsync(ByVal LoanFormNo As String)
            Me.GetLoanFormAsync(LoanFormNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoanFormAsync(ByVal LoanFormNo As String, ByVal userState As Object)
            If (Me.GetLoanFormOperationCompleted Is Nothing) Then
                Me.GetLoanFormOperationCompleted = AddressOf Me.OnGetLoanFormOperationCompleted
            End If
            Me.InvokeAsync("GetLoanForm", New Object() {LoanFormNo}, Me.GetLoanFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoanFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoanFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoanFormCompleted(Me, New GetLoanFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLoanForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLoanForm(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateLoanForm", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateLoanForm(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateLoanForm", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateLoanForm(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLoanFormAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateLoanFormAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLoanFormAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateLoanFormOperationCompleted Is Nothing) Then
                Me.UpdateLoanFormOperationCompleted = AddressOf Me.OnUpdateLoanFormOperationCompleted
            End If
            Me.InvokeAsync("UpdateLoanForm", New Object() {dstCommit}, Me.UpdateLoanFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLoanFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLoanFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLoanFormCompleted(Me, New UpdateLoanFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWfProjectTaskAttendeeInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWfProjectTaskAttendeeInfo(ByVal strSQL_Condition_WfProjectTaskAttendee As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWfProjectTaskAttendeeInfo", New Object() {strSQL_Condition_WfProjectTaskAttendee})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWfProjectTaskAttendeeInfo(ByVal strSQL_Condition_WfProjectTaskAttendee As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWfProjectTaskAttendeeInfo", New Object() {strSQL_Condition_WfProjectTaskAttendee}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWfProjectTaskAttendeeInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectTaskAttendeeInfoAsync(ByVal strSQL_Condition_WfProjectTaskAttendee As String)
            Me.GetWfProjectTaskAttendeeInfoAsync(strSQL_Condition_WfProjectTaskAttendee, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWfProjectTaskAttendeeInfoAsync(ByVal strSQL_Condition_WfProjectTaskAttendee As String, ByVal userState As Object)
            If (Me.GetWfProjectTaskAttendeeInfoOperationCompleted Is Nothing) Then
                Me.GetWfProjectTaskAttendeeInfoOperationCompleted = AddressOf Me.OnGetWfProjectTaskAttendeeInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWfProjectTaskAttendeeInfo", New Object() {strSQL_Condition_WfProjectTaskAttendee}, Me.GetWfProjectTaskAttendeeInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWfProjectTaskAttendeeInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWfProjectTaskAttendeeInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWfProjectTaskAttendeeInfoCompleted(Me, New GetWfProjectTaskAttendeeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWfProjectTaskAttendee", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWfProjectTaskAttendee(ByVal WfProjectTaskAttendeeSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWfProjectTaskAttendee", New Object() {WfProjectTaskAttendeeSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWfProjectTaskAttendee(ByVal WfProjectTaskAttendeeSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWfProjectTaskAttendee", New Object() {WfProjectTaskAttendeeSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWfProjectTaskAttendee(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectTaskAttendeeAsync(ByVal WfProjectTaskAttendeeSet As System.Data.DataSet)
            Me.UpdateWfProjectTaskAttendeeAsync(WfProjectTaskAttendeeSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWfProjectTaskAttendeeAsync(ByVal WfProjectTaskAttendeeSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWfProjectTaskAttendeeOperationCompleted Is Nothing) Then
                Me.UpdateWfProjectTaskAttendeeOperationCompleted = AddressOf Me.OnUpdateWfProjectTaskAttendeeOperationCompleted
            End If
            Me.InvokeAsync("UpdateWfProjectTaskAttendee", New Object() {WfProjectTaskAttendeeSet}, Me.UpdateWfProjectTaskAttendeeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWfProjectTaskAttendeeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWfProjectTaskAttendeeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWfProjectTaskAttendeeCompleted(Me, New UpdateWfProjectTaskAttendeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransCondition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransCondition(ByVal WorkflowID As String, ByVal projectID As String, ByVal TaskID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTransCondition", New Object() {WorkflowID, projectID, TaskID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTransCondition(ByVal WorkflowID As String, ByVal projectID As String, ByVal TaskID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTransCondition", New Object() {WorkflowID, projectID, TaskID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTransCondition(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransConditionAsync(ByVal WorkflowID As String, ByVal projectID As String, ByVal TaskID As String)
            Me.GetTransConditionAsync(WorkflowID, projectID, TaskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransConditionAsync(ByVal WorkflowID As String, ByVal projectID As String, ByVal TaskID As String, ByVal userState As Object)
            If (Me.GetTransConditionOperationCompleted Is Nothing) Then
                Me.GetTransConditionOperationCompleted = AddressOf Me.OnGetTransConditionOperationCompleted
            End If
            Me.InvokeAsync("GetTransCondition", New Object() {WorkflowID, projectID, TaskID}, Me.GetTransConditionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransConditionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransConditionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransConditionCompleted(Me, New GetTransConditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectTaskTransferInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectTaskTransferInfo(ByVal strSQL_Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectTaskTransferInfo", New Object() {strSQL_Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectTaskTransferInfo(ByVal strSQL_Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectTaskTransferInfo", New Object() {strSQL_Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectTaskTransferInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectTaskTransferInfoAsync(ByVal strSQL_Condition As String)
            Me.GetProjectTaskTransferInfoAsync(strSQL_Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectTaskTransferInfoAsync(ByVal strSQL_Condition As String, ByVal userState As Object)
            If (Me.GetProjectTaskTransferInfoOperationCompleted Is Nothing) Then
                Me.GetProjectTaskTransferInfoOperationCompleted = AddressOf Me.OnGetProjectTaskTransferInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectTaskTransferInfo", New Object() {strSQL_Condition}, Me.GetProjectTaskTransferInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectTaskTransferInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectTaskTransferInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectTaskTransferInfoCompleted(Me, New GetProjectTaskTransferInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CreateProcess(ByVal workFlowID As String, ByVal projectID As String, ByVal userID As String) As String
            Dim results() As Object = Me.Invoke("CreateProcess", New Object() {workFlowID, projectID, userID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateProcess(ByVal workFlowID As String, ByVal projectID As String, ByVal userID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateProcess", New Object() {workFlowID, projectID, userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateProcess(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateProcessAsync(ByVal workFlowID As String, ByVal projectID As String, ByVal userID As String)
            Me.CreateProcessAsync(workFlowID, projectID, userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateProcessAsync(ByVal workFlowID As String, ByVal projectID As String, ByVal userID As String, ByVal userState As Object)
            If (Me.CreateProcessOperationCompleted Is Nothing) Then
                Me.CreateProcessOperationCompleted = AddressOf Me.OnCreateProcessOperationCompleted
            End If
            Me.InvokeAsync("CreateProcess", New Object() {workFlowID, projectID, userID}, Me.CreateProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateProcessCompleted(Me, New CreateProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="CreateProcess1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateProcessEx", RequestElementName:="CreateProcessEx", RequestNamespace:="http://tempuri.org/", ResponseElementName:="CreateProcessExResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function CreateProcess(ByVal workFlowID As String, ByVal projectID As String, ByVal userID As String, ByVal phase As String) As <System.Xml.Serialization.XmlElementAttribute("CreateProcessExResult")> String
            Dim results() As Object = Me.Invoke("CreateProcess1", New Object() {workFlowID, projectID, userID, phase})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateProcess1(ByVal workFlowID As String, ByVal projectID As String, ByVal userID As String, ByVal phase As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateProcess1", New Object() {workFlowID, projectID, userID, phase}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateProcess1(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateProcess1Async(ByVal workFlowID As String, ByVal projectID As String, ByVal userID As String, ByVal phase As String)
            Me.CreateProcess1Async(workFlowID, projectID, userID, phase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateProcess1Async(ByVal workFlowID As String, ByVal projectID As String, ByVal userID As String, ByVal phase As String, ByVal userState As Object)
            If (Me.CreateProcess1OperationCompleted Is Nothing) Then
                Me.CreateProcess1OperationCompleted = AddressOf Me.OnCreateProcess1OperationCompleted
            End If
            Me.InvokeAsync("CreateProcess1", New Object() {workFlowID, projectID, userID, phase}, Me.CreateProcess1OperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateProcess1OperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateProcess1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateProcess1Completed(Me, New CreateProcess1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/suspendProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function suspendProcess(ByVal projectID As String, ByVal delayDay As Integer) As String
            Dim results() As Object = Me.Invoke("suspendProcess", New Object() {projectID, delayDay})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginsuspendProcess(ByVal projectID As String, ByVal delayDay As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("suspendProcess", New Object() {projectID, delayDay}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndsuspendProcess(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub suspendProcessAsync(ByVal projectID As String, ByVal delayDay As Integer)
            Me.suspendProcessAsync(projectID, delayDay, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub suspendProcessAsync(ByVal projectID As String, ByVal delayDay As Integer, ByVal userState As Object)
            If (Me.suspendProcessOperationCompleted Is Nothing) Then
                Me.suspendProcessOperationCompleted = AddressOf Me.OnsuspendProcessOperationCompleted
            End If
            Me.InvokeAsync("suspendProcess", New Object() {projectID, delayDay}, Me.suspendProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnsuspendProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.suspendProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent suspendProcessCompleted(Me, New suspendProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/resumeProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function resumeProcess(ByVal projectID As String) As String
            Dim results() As Object = Me.Invoke("resumeProcess", New Object() {projectID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginresumeProcess(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("resumeProcess", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndresumeProcess(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub resumeProcessAsync(ByVal projectID As String)
            Me.resumeProcessAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub resumeProcessAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.resumeProcessOperationCompleted Is Nothing) Then
                Me.resumeProcessOperationCompleted = AddressOf Me.OnresumeProcessOperationCompleted
            End If
            Me.InvokeAsync("resumeProcess", New Object() {projectID}, Me.resumeProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnresumeProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.resumeProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent resumeProcessCompleted(Me, New resumeProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isSuspendProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isSuspendProcess(ByVal projectID As String) As Boolean
            Dim results() As Object = Me.Invoke("isSuspendProcess", New Object() {projectID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginisSuspendProcess(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("isSuspendProcess", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndisSuspendProcess(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isSuspendProcessAsync(ByVal projectID As String)
            Me.isSuspendProcessAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isSuspendProcessAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.isSuspendProcessOperationCompleted Is Nothing) Then
                Me.isSuspendProcessOperationCompleted = AddressOf Me.OnisSuspendProcessOperationCompleted
            End If
            Me.InvokeAsync("isSuspendProcess", New Object() {projectID}, Me.isSuspendProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnisSuspendProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.isSuspendProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isSuspendProcessCompleted(Me, New isSuspendProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/finishedTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function finishedTask(ByVal workFlowID As String, ByVal projectID As String, ByVal finishedTaskID As String, ByVal finishedFlag As String, ByVal userID As String) As String
            Dim results() As Object = Me.Invoke("finishedTask", New Object() {workFlowID, projectID, finishedTaskID, finishedFlag, userID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginfinishedTask(ByVal workFlowID As String, ByVal projectID As String, ByVal finishedTaskID As String, ByVal finishedFlag As String, ByVal userID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("finishedTask", New Object() {workFlowID, projectID, finishedTaskID, finishedFlag, userID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndfinishedTask(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub finishedTaskAsync(ByVal workFlowID As String, ByVal projectID As String, ByVal finishedTaskID As String, ByVal finishedFlag As String, ByVal userID As String)
            Me.finishedTaskAsync(workFlowID, projectID, finishedTaskID, finishedFlag, userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub finishedTaskAsync(ByVal workFlowID As String, ByVal projectID As String, ByVal finishedTaskID As String, ByVal finishedFlag As String, ByVal userID As String, ByVal userState As Object)
            If (Me.finishedTaskOperationCompleted Is Nothing) Then
                Me.finishedTaskOperationCompleted = AddressOf Me.OnfinishedTaskOperationCompleted
            End If
            Me.InvokeAsync("finishedTask", New Object() {workFlowID, projectID, finishedTaskID, finishedFlag, userID}, Me.finishedTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnfinishedTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.finishedTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent finishedTaskCompleted(Me, New finishedTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="finishedTask1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/finishedTaskEx", RequestElementName:="finishedTaskEx", RequestNamespace:="http://tempuri.org/", ResponseElementName:="finishedTaskExResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function finishedTask(ByVal workFlowID As String, ByVal projectID As String, ByVal finishedTaskID As String, ByVal finishedFlag As String, ByVal userID As String, ByVal flag As Integer) As <System.Xml.Serialization.XmlElementAttribute("finishedTaskExResult")> String
            Dim results() As Object = Me.Invoke("finishedTask1", New Object() {workFlowID, projectID, finishedTaskID, finishedFlag, userID, flag})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginfinishedTask1(ByVal workFlowID As String, ByVal projectID As String, ByVal finishedTaskID As String, ByVal finishedFlag As String, ByVal userID As String, ByVal flag As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("finishedTask1", New Object() {workFlowID, projectID, finishedTaskID, finishedFlag, userID, flag}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndfinishedTask1(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub finishedTask1Async(ByVal workFlowID As String, ByVal projectID As String, ByVal finishedTaskID As String, ByVal finishedFlag As String, ByVal userID As String, ByVal flag As Integer)
            Me.finishedTask1Async(workFlowID, projectID, finishedTaskID, finishedFlag, userID, flag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub finishedTask1Async(ByVal workFlowID As String, ByVal projectID As String, ByVal finishedTaskID As String, ByVal finishedFlag As String, ByVal userID As String, ByVal flag As Integer, ByVal userState As Object)
            If (Me.finishedTask1OperationCompleted Is Nothing) Then
                Me.finishedTask1OperationCompleted = AddressOf Me.OnfinishedTask1OperationCompleted
            End If
            Me.InvokeAsync("finishedTask1", New Object() {workFlowID, projectID, finishedTaskID, finishedFlag, userID, flag}, Me.finishedTask1OperationCompleted, userState)
        End Sub
        
        Private Sub OnfinishedTask1OperationCompleted(ByVal arg As Object)
            If (Not (Me.finishedTask1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent finishedTask1Completed(Me, New finishedTask1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RefreshConference", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RefreshConference() As String
            Dim results() As Object = Me.Invoke("RefreshConference", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginRefreshConference(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RefreshConference", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRefreshConference(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RefreshConferenceAsync()
            Me.RefreshConferenceAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RefreshConferenceAsync(ByVal userState As Object)
            If (Me.RefreshConferenceOperationCompleted Is Nothing) Then
                Me.RefreshConferenceOperationCompleted = AddressOf Me.OnRefreshConferenceOperationCompleted
            End If
            Me.InvokeAsync("RefreshConference", New Object(-1) {}, Me.RefreshConferenceOperationCompleted, userState)
        End Sub
        
        Private Sub OnRefreshConferenceOperationCompleted(ByVal arg As Object)
            If (Not (Me.RefreshConferenceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RefreshConferenceCompleted(Me, New RefreshConferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FinishedReviewConferencePlan", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FinishedReviewConferencePlan(ByVal ConferenceCode As String) As String
            Dim results() As Object = Me.Invoke("FinishedReviewConferencePlan", New Object() {ConferenceCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginFinishedReviewConferencePlan(ByVal ConferenceCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FinishedReviewConferencePlan", New Object() {ConferenceCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFinishedReviewConferencePlan(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FinishedReviewConferencePlanAsync(ByVal ConferenceCode As String)
            Me.FinishedReviewConferencePlanAsync(ConferenceCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FinishedReviewConferencePlanAsync(ByVal ConferenceCode As String, ByVal userState As Object)
            If (Me.FinishedReviewConferencePlanOperationCompleted Is Nothing) Then
                Me.FinishedReviewConferencePlanOperationCompleted = AddressOf Me.OnFinishedReviewConferencePlanOperationCompleted
            End If
            Me.InvokeAsync("FinishedReviewConferencePlan", New Object() {ConferenceCode}, Me.FinishedReviewConferencePlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnFinishedReviewConferencePlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.FinishedReviewConferencePlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FinishedReviewConferencePlanCompleted(Me, New FinishedReviewConferencePlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelReviewConferencePlan", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelReviewConferencePlan(ByVal ConferenceCode As String) As String
            Dim results() As Object = Me.Invoke("CancelReviewConferencePlan", New Object() {ConferenceCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCancelReviewConferencePlan(ByVal ConferenceCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CancelReviewConferencePlan", New Object() {ConferenceCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCancelReviewConferencePlan(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelReviewConferencePlanAsync(ByVal ConferenceCode As String)
            Me.CancelReviewConferencePlanAsync(ConferenceCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelReviewConferencePlanAsync(ByVal ConferenceCode As String, ByVal userState As Object)
            If (Me.CancelReviewConferencePlanOperationCompleted Is Nothing) Then
                Me.CancelReviewConferencePlanOperationCompleted = AddressOf Me.OnCancelReviewConferencePlanOperationCompleted
            End If
            Me.InvokeAsync("CancelReviewConferencePlan", New Object() {ConferenceCode}, Me.CancelReviewConferencePlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelReviewConferencePlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelReviewConferencePlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelReviewConferencePlanCompleted(Me, New CancelReviewConferencePlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelReviewConferencePlanProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelReviewConferencePlanProject(ByVal projectID As String) As String
            Dim results() As Object = Me.Invoke("CancelReviewConferencePlanProject", New Object() {projectID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCancelReviewConferencePlanProject(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CancelReviewConferencePlanProject", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCancelReviewConferencePlanProject(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelReviewConferencePlanProjectAsync(ByVal projectID As String)
            Me.CancelReviewConferencePlanProjectAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelReviewConferencePlanProjectAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.CancelReviewConferencePlanProjectOperationCompleted Is Nothing) Then
                Me.CancelReviewConferencePlanProjectOperationCompleted = AddressOf Me.OnCancelReviewConferencePlanProjectOperationCompleted
            End If
            Me.InvokeAsync("CancelReviewConferencePlanProject", New Object() {projectID}, Me.CancelReviewConferencePlanProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelReviewConferencePlanProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelReviewConferencePlanProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelReviewConferencePlanProjectCompleted(Me, New CancelReviewConferencePlanProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelSignaturePlan", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelSignaturePlan(ByVal SignaturePlanCode As Integer) As String
            Dim results() As Object = Me.Invoke("CancelSignaturePlan", New Object() {SignaturePlanCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCancelSignaturePlan(ByVal SignaturePlanCode As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CancelSignaturePlan", New Object() {SignaturePlanCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCancelSignaturePlan(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelSignaturePlanAsync(ByVal SignaturePlanCode As Integer)
            Me.CancelSignaturePlanAsync(SignaturePlanCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelSignaturePlanAsync(ByVal SignaturePlanCode As Integer, ByVal userState As Object)
            If (Me.CancelSignaturePlanOperationCompleted Is Nothing) Then
                Me.CancelSignaturePlanOperationCompleted = AddressOf Me.OnCancelSignaturePlanOperationCompleted
            End If
            Me.InvokeAsync("CancelSignaturePlan", New Object() {SignaturePlanCode}, Me.CancelSignaturePlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelSignaturePlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelSignaturePlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelSignaturePlanCompleted(Me, New CancelSignaturePlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelSignaturePlanProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelSignaturePlanProject(ByVal projectID As String) As String
            Dim results() As Object = Me.Invoke("CancelSignaturePlanProject", New Object() {projectID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCancelSignaturePlanProject(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CancelSignaturePlanProject", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCancelSignaturePlanProject(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelSignaturePlanProjectAsync(ByVal projectID As String)
            Me.CancelSignaturePlanProjectAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelSignaturePlanProjectAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.CancelSignaturePlanProjectOperationCompleted Is Nothing) Then
                Me.CancelSignaturePlanProjectOperationCompleted = AddressOf Me.OnCancelSignaturePlanProjectOperationCompleted
            End If
            Me.InvokeAsync("CancelSignaturePlanProject", New Object() {projectID}, Me.CancelSignaturePlanProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelSignaturePlanProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelSignaturePlanProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelSignaturePlanProjectCompleted(Me, New CancelSignaturePlanProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReMeetingPlan", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReMeetingPlan(ByVal projectID As String) As String
            Dim results() As Object = Me.Invoke("ReMeetingPlan", New Object() {projectID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginReMeetingPlan(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ReMeetingPlan", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndReMeetingPlan(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReMeetingPlanAsync(ByVal projectID As String)
            Me.ReMeetingPlanAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReMeetingPlanAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.ReMeetingPlanOperationCompleted Is Nothing) Then
                Me.ReMeetingPlanOperationCompleted = AddressOf Me.OnReMeetingPlanOperationCompleted
            End If
            Me.InvokeAsync("ReMeetingPlan", New Object() {projectID}, Me.ReMeetingPlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnReMeetingPlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReMeetingPlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReMeetingPlanCompleted(Me, New ReMeetingPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReLoanApplication", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReLoanApplication(ByVal projectID As String) As String
            Dim results() As Object = Me.Invoke("ReLoanApplication", New Object() {projectID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginReLoanApplication(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ReLoanApplication", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndReLoanApplication(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReLoanApplicationAsync(ByVal projectID As String)
            Me.ReLoanApplicationAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReLoanApplicationAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.ReLoanApplicationOperationCompleted Is Nothing) Then
                Me.ReLoanApplicationOperationCompleted = AddressOf Me.OnReLoanApplicationOperationCompleted
            End If
            Me.InvokeAsync("ReLoanApplication", New Object() {projectID}, Me.ReLoanApplicationOperationCompleted, userState)
        End Sub
        
        Private Sub OnReLoanApplicationOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReLoanApplicationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReLoanApplicationCompleted(Me, New ReLoanApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FinishedSignaturePlan", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FinishedSignaturePlan(ByVal SignaturePlanCode As Integer) As String
            Dim results() As Object = Me.Invoke("FinishedSignaturePlan", New Object() {SignaturePlanCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginFinishedSignaturePlan(ByVal SignaturePlanCode As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FinishedSignaturePlan", New Object() {SignaturePlanCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFinishedSignaturePlan(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FinishedSignaturePlanAsync(ByVal SignaturePlanCode As Integer)
            Me.FinishedSignaturePlanAsync(SignaturePlanCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FinishedSignaturePlanAsync(ByVal SignaturePlanCode As Integer, ByVal userState As Object)
            If (Me.FinishedSignaturePlanOperationCompleted Is Nothing) Then
                Me.FinishedSignaturePlanOperationCompleted = AddressOf Me.OnFinishedSignaturePlanOperationCompleted
            End If
            Me.InvokeAsync("FinishedSignaturePlan", New Object() {SignaturePlanCode}, Me.FinishedSignaturePlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnFinishedSignaturePlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.FinishedSignaturePlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FinishedSignaturePlanCompleted(Me, New FinishedSignaturePlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/rollbackTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function rollbackTask(ByVal workFlowID As String, ByVal projectID As String, ByVal taskID As String, ByVal userID As String, ByVal rollbackMsg As String) As String
            Dim results() As Object = Me.Invoke("rollbackTask", New Object() {workFlowID, projectID, taskID, userID, rollbackMsg})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginrollbackTask(ByVal workFlowID As String, ByVal projectID As String, ByVal taskID As String, ByVal userID As String, ByVal rollbackMsg As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("rollbackTask", New Object() {workFlowID, projectID, taskID, userID, rollbackMsg}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndrollbackTask(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub rollbackTaskAsync(ByVal workFlowID As String, ByVal projectID As String, ByVal taskID As String, ByVal userID As String, ByVal rollbackMsg As String)
            Me.rollbackTaskAsync(workFlowID, projectID, taskID, userID, rollbackMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub rollbackTaskAsync(ByVal workFlowID As String, ByVal projectID As String, ByVal taskID As String, ByVal userID As String, ByVal rollbackMsg As String, ByVal userState As Object)
            If (Me.rollbackTaskOperationCompleted Is Nothing) Then
                Me.rollbackTaskOperationCompleted = AddressOf Me.OnrollbackTaskOperationCompleted
            End If
            Me.InvokeAsync("rollbackTask", New Object() {workFlowID, projectID, taskID, userID, rollbackMsg}, Me.rollbackTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnrollbackTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.rollbackTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent rollbackTaskCompleted(Me, New rollbackTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/cancelProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cancelProcess(ByVal projectID As String) As String
            Dim results() As Object = Me.Invoke("cancelProcess", New Object() {projectID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BegincancelProcess(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("cancelProcess", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndcancelProcess(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelProcessAsync(ByVal projectID As String)
            Me.cancelProcessAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelProcessAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.cancelProcessOperationCompleted Is Nothing) Then
                Me.cancelProcessOperationCompleted = AddressOf Me.OncancelProcessOperationCompleted
            End If
            Me.InvokeAsync("cancelProcess", New Object() {projectID}, Me.cancelProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelProcessCompleted(Me, New cancelProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SplitPrjoect", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SplitPrjoect(ByVal fatherProjectID As String, ByVal sonProjectID As String) As String
            Dim results() As Object = Me.Invoke("SplitPrjoect", New Object() {fatherProjectID, sonProjectID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginSplitPrjoect(ByVal fatherProjectID As String, ByVal sonProjectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SplitPrjoect", New Object() {fatherProjectID, sonProjectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSplitPrjoect(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SplitPrjoectAsync(ByVal fatherProjectID As String, ByVal sonProjectID As String)
            Me.SplitPrjoectAsync(fatherProjectID, sonProjectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SplitPrjoectAsync(ByVal fatherProjectID As String, ByVal sonProjectID As String, ByVal userState As Object)
            If (Me.SplitPrjoectOperationCompleted Is Nothing) Then
                Me.SplitPrjoectOperationCompleted = AddressOf Me.OnSplitPrjoectOperationCompleted
            End If
            Me.InvokeAsync("SplitPrjoect", New Object() {fatherProjectID, sonProjectID}, Me.SplitPrjoectOperationCompleted, userState)
        End Sub
        
        Private Sub OnSplitPrjoectOperationCompleted(ByVal arg As Object)
            If (Not (Me.SplitPrjoectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SplitPrjoectCompleted(Me, New SplitPrjoectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function deleteProcess(ByVal workFlowID As String) As Object
            Dim results() As Object = Me.Invoke("deleteProcess", New Object() {workFlowID})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BegindeleteProcess(ByVal workFlowID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("deleteProcess", New Object() {workFlowID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EnddeleteProcess(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub deleteProcessAsync(ByVal workFlowID As String)
            Me.deleteProcessAsync(workFlowID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub deleteProcessAsync(ByVal workFlowID As String, ByVal userState As Object)
            If (Me.deleteProcessOperationCompleted Is Nothing) Then
                Me.deleteProcessOperationCompleted = AddressOf Me.OndeleteProcessOperationCompleted
            End If
            Me.InvokeAsync("deleteProcess", New Object() {workFlowID}, Me.deleteProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OndeleteProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.deleteProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent deleteProcessCompleted(Me, New deleteProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/modifiyProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function modifiyProcess(ByVal workFlowID As String) As Object
            Dim results() As Object = Me.Invoke("modifiyProcess", New Object() {workFlowID})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginmodifiyProcess(ByVal workFlowID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("modifiyProcess", New Object() {workFlowID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndmodifiyProcess(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub modifiyProcessAsync(ByVal workFlowID As String)
            Me.modifiyProcessAsync(workFlowID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub modifiyProcessAsync(ByVal workFlowID As String, ByVal userState As Object)
            If (Me.modifiyProcessOperationCompleted Is Nothing) Then
                Me.modifiyProcessOperationCompleted = AddressOf Me.OnmodifiyProcessOperationCompleted
            End If
            Me.InvokeAsync("modifiyProcess", New Object() {workFlowID}, Me.modifiyProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnmodifiyProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.modifiyProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent modifiyProcessCompleted(Me, New modifiyProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/consignTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function consignTask(ByVal staffID As String, ByVal roleID As String, ByVal consigner As String, ByVal isCurrent As Boolean) As String
            Dim results() As Object = Me.Invoke("consignTask", New Object() {staffID, roleID, consigner, isCurrent})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginconsignTask(ByVal staffID As String, ByVal roleID As String, ByVal consigner As String, ByVal isCurrent As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("consignTask", New Object() {staffID, roleID, consigner, isCurrent}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndconsignTask(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub consignTaskAsync(ByVal staffID As String, ByVal roleID As String, ByVal consigner As String, ByVal isCurrent As Boolean)
            Me.consignTaskAsync(staffID, roleID, consigner, isCurrent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub consignTaskAsync(ByVal staffID As String, ByVal roleID As String, ByVal consigner As String, ByVal isCurrent As Boolean, ByVal userState As Object)
            If (Me.consignTaskOperationCompleted Is Nothing) Then
                Me.consignTaskOperationCompleted = AddressOf Me.OnconsignTaskOperationCompleted
            End If
            Me.InvokeAsync("consignTask", New Object() {staffID, roleID, consigner, isCurrent}, Me.consignTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnconsignTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.consignTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent consignTaskCompleted(Me, New consignTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelconsignTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelconsignTask(ByVal srcPerson As String, ByVal staffID As String, ByVal roleID As String, ByVal isCurrent As Boolean) As String
            Dim results() As Object = Me.Invoke("CancelconsignTask", New Object() {srcPerson, staffID, roleID, isCurrent})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCancelconsignTask(ByVal srcPerson As String, ByVal staffID As String, ByVal roleID As String, ByVal isCurrent As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CancelconsignTask", New Object() {srcPerson, staffID, roleID, isCurrent}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCancelconsignTask(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelconsignTaskAsync(ByVal srcPerson As String, ByVal staffID As String, ByVal roleID As String, ByVal isCurrent As Boolean)
            Me.CancelconsignTaskAsync(srcPerson, staffID, roleID, isCurrent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelconsignTaskAsync(ByVal srcPerson As String, ByVal staffID As String, ByVal roleID As String, ByVal isCurrent As Boolean, ByVal userState As Object)
            If (Me.CancelconsignTaskOperationCompleted Is Nothing) Then
                Me.CancelconsignTaskOperationCompleted = AddressOf Me.OnCancelconsignTaskOperationCompleted
            End If
            Me.InvokeAsync("CancelconsignTask", New Object() {srcPerson, staffID, roleID, isCurrent}, Me.CancelconsignTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelconsignTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelconsignTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelconsignTaskCompleted(Me, New CancelconsignTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartTaskByManual", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartTaskByManual(ByVal workflowID As String, ByVal projectID As String, ByVal taskID As String) As String
            Dim results() As Object = Me.Invoke("StartTaskByManual", New Object() {workflowID, projectID, taskID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginStartTaskByManual(ByVal workflowID As String, ByVal projectID As String, ByVal taskID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StartTaskByManual", New Object() {workflowID, projectID, taskID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStartTaskByManual(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartTaskByManualAsync(ByVal workflowID As String, ByVal projectID As String, ByVal taskID As String)
            Me.StartTaskByManualAsync(workflowID, projectID, taskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartTaskByManualAsync(ByVal workflowID As String, ByVal projectID As String, ByVal taskID As String, ByVal userState As Object)
            If (Me.StartTaskByManualOperationCompleted Is Nothing) Then
                Me.StartTaskByManualOperationCompleted = AddressOf Me.OnStartTaskByManualOperationCompleted
            End If
            Me.InvokeAsync("StartTaskByManual", New Object() {workflowID, projectID, taskID}, Me.StartTaskByManualOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartTaskByManualOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartTaskByManualCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartTaskByManualCompleted(Me, New StartTaskByManualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LookUpMessage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LookUpMessage(ByVal strCondition_ProjectMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LookUpMessage", New Object() {strCondition_ProjectMessage})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginLookUpMessage(ByVal strCondition_ProjectMessage As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LookUpMessage", New Object() {strCondition_ProjectMessage}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLookUpMessage(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LookUpMessageAsync(ByVal strCondition_ProjectMessage As String)
            Me.LookUpMessageAsync(strCondition_ProjectMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LookUpMessageAsync(ByVal strCondition_ProjectMessage As String, ByVal userState As Object)
            If (Me.LookUpMessageOperationCompleted Is Nothing) Then
                Me.LookUpMessageOperationCompleted = AddressOf Me.OnLookUpMessageOperationCompleted
            End If
            Me.InvokeAsync("LookUpMessage", New Object() {strCondition_ProjectMessage}, Me.LookUpMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnLookUpMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.LookUpMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LookUpMessageCompleted(Me, New LookUpMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateMessage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMessage(ByVal MessageSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateMessage", New Object() {MessageSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateMessage(ByVal MessageSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateMessage", New Object() {MessageSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateMessage(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMessageAsync(ByVal MessageSet As System.Data.DataSet)
            Me.UpdateMessageAsync(MessageSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMessageAsync(ByVal MessageSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateMessageOperationCompleted Is Nothing) Then
                Me.UpdateMessageOperationCompleted = AddressOf Me.OnUpdateMessageOperationCompleted
            End If
            Me.InvokeAsync("UpdateMessage", New Object() {MessageSet}, Me.UpdateMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMessageCompleted(Me, New UpdateMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LookUpWorking", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LookUpWorking(ByVal UserID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LookUpWorking", New Object() {UserID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginLookUpWorking(ByVal UserID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LookUpWorking", New Object() {UserID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLookUpWorking(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LookUpWorkingAsync(ByVal UserID As String)
            Me.LookUpWorkingAsync(UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LookUpWorkingAsync(ByVal UserID As String, ByVal userState As Object)
            If (Me.LookUpWorkingOperationCompleted Is Nothing) Then
                Me.LookUpWorkingOperationCompleted = AddressOf Me.OnLookUpWorkingOperationCompleted
            End If
            Me.InvokeAsync("LookUpWorking", New Object() {UserID}, Me.LookUpWorkingOperationCompleted, userState)
        End Sub
        
        Private Sub OnLookUpWorkingOperationCompleted(ByVal arg As Object)
            If (Not (Me.LookUpWorkingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LookUpWorkingCompleted(Me, New LookUpWorkingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LookUpWorkingEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LookUpWorkingEx(ByVal sql_Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LookUpWorkingEx", New Object() {sql_Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginLookUpWorkingEx(ByVal sql_Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LookUpWorkingEx", New Object() {sql_Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLookUpWorkingEx(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LookUpWorkingExAsync(ByVal sql_Condition As String)
            Me.LookUpWorkingExAsync(sql_Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LookUpWorkingExAsync(ByVal sql_Condition As String, ByVal userState As Object)
            If (Me.LookUpWorkingExOperationCompleted Is Nothing) Then
                Me.LookUpWorkingExOperationCompleted = AddressOf Me.OnLookUpWorkingExOperationCompleted
            End If
            Me.InvokeAsync("LookUpWorkingEx", New Object() {sql_Condition}, Me.LookUpWorkingExOperationCompleted, userState)
        End Sub
        
        Private Sub OnLookUpWorkingExOperationCompleted(ByVal arg As Object)
            If (Not (Me.LookUpWorkingExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LookUpWorkingExCompleted(Me, New LookUpWorkingExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllBusinessTasks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllBusinessTasks(ByVal workflowID As String, ByVal projectID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAllBusinessTasks", New Object() {workflowID, projectID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAllBusinessTasks(ByVal workflowID As String, ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAllBusinessTasks", New Object() {workflowID, projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAllBusinessTasks(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllBusinessTasksAsync(ByVal workflowID As String, ByVal projectID As String)
            Me.GetAllBusinessTasksAsync(workflowID, projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllBusinessTasksAsync(ByVal workflowID As String, ByVal projectID As String, ByVal userState As Object)
            If (Me.GetAllBusinessTasksOperationCompleted Is Nothing) Then
                Me.GetAllBusinessTasksOperationCompleted = AddressOf Me.OnGetAllBusinessTasksOperationCompleted
            End If
            Me.InvokeAsync("GetAllBusinessTasks", New Object() {workflowID, projectID}, Me.GetAllBusinessTasksOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllBusinessTasksOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllBusinessTasksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllBusinessTasksCompleted(Me, New GetAllBusinessTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LookUpStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LookUpStatus(ByVal workFlowID As String) As Object
            Dim results() As Object = Me.Invoke("LookUpStatus", New Object() {workFlowID})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginLookUpStatus(ByVal workFlowID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LookUpStatus", New Object() {workFlowID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLookUpStatus(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LookUpStatusAsync(ByVal workFlowID As String)
            Me.LookUpStatusAsync(workFlowID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LookUpStatusAsync(ByVal workFlowID As String, ByVal userState As Object)
            If (Me.LookUpStatusOperationCompleted Is Nothing) Then
                Me.LookUpStatusOperationCompleted = AddressOf Me.OnLookUpStatusOperationCompleted
            End If
            Me.InvokeAsync("LookUpStatus", New Object() {workFlowID}, Me.LookUpStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnLookUpStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.LookUpStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LookUpStatusCompleted(Me, New LookUpStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRefundType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRefundType(ByVal RefundTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRefundType", New Object() {RefundTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRefundType(ByVal RefundTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRefundType", New Object() {RefundTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRefundType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRefundTypeAsync(ByVal RefundTypeNo As String)
            Me.GetRefundTypeAsync(RefundTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRefundTypeAsync(ByVal RefundTypeNo As String, ByVal userState As Object)
            If (Me.GetRefundTypeOperationCompleted Is Nothing) Then
                Me.GetRefundTypeOperationCompleted = AddressOf Me.OnGetRefundTypeOperationCompleted
            End If
            Me.InvokeAsync("GetRefundType", New Object() {RefundTypeNo}, Me.GetRefundTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRefundTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRefundTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRefundTypeCompleted(Me, New GetRefundTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRefundType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRefundType(ByVal dstCommit As System.Data.DataSet) As Integer
            Dim results() As Object = Me.Invoke("UpdateRefundType", New Object() {dstCommit})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateRefundType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateRefundType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateRefundType(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRefundTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateRefundTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRefundTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateRefundTypeOperationCompleted Is Nothing) Then
                Me.UpdateRefundTypeOperationCompleted = AddressOf Me.OnUpdateRefundTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateRefundType", New Object() {dstCommit}, Me.UpdateRefundTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRefundTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRefundTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRefundTypeCompleted(Me, New UpdateRefundTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLoanProvideForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoanProvideForm(ByVal LoanProvideFormNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLoanProvideForm", New Object() {LoanProvideFormNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLoanProvideForm(ByVal LoanProvideFormNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLoanProvideForm", New Object() {LoanProvideFormNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLoanProvideForm(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoanProvideFormAsync(ByVal LoanProvideFormNo As String)
            Me.GetLoanProvideFormAsync(LoanProvideFormNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoanProvideFormAsync(ByVal LoanProvideFormNo As String, ByVal userState As Object)
            If (Me.GetLoanProvideFormOperationCompleted Is Nothing) Then
                Me.GetLoanProvideFormOperationCompleted = AddressOf Me.OnGetLoanProvideFormOperationCompleted
            End If
            Me.InvokeAsync("GetLoanProvideForm", New Object() {LoanProvideFormNo}, Me.GetLoanProvideFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoanProvideFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoanProvideFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoanProvideFormCompleted(Me, New GetLoanProvideFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLoanProvideForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLoanProvideForm(ByVal dstCommit As System.Data.DataSet) As Integer
            Dim results() As Object = Me.Invoke("UpdateLoanProvideForm", New Object() {dstCommit})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateLoanProvideForm(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateLoanProvideForm", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateLoanProvideForm(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLoanProvideFormAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateLoanProvideFormAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLoanProvideFormAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateLoanProvideFormOperationCompleted Is Nothing) Then
                Me.UpdateLoanProvideFormOperationCompleted = AddressOf Me.OnUpdateLoanProvideFormOperationCompleted
            End If
            Me.InvokeAsync("UpdateLoanProvideForm", New Object() {dstCommit}, Me.UpdateLoanProvideFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLoanProvideFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLoanProvideFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLoanProvideFormCompleted(Me, New UpdateLoanProvideFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLoanChargeManner", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoanChargeManner(ByVal LoanChargeMannerNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLoanChargeManner", New Object() {LoanChargeMannerNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLoanChargeManner(ByVal LoanChargeMannerNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLoanChargeManner", New Object() {LoanChargeMannerNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLoanChargeManner(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoanChargeMannerAsync(ByVal LoanChargeMannerNo As String)
            Me.GetLoanChargeMannerAsync(LoanChargeMannerNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoanChargeMannerAsync(ByVal LoanChargeMannerNo As String, ByVal userState As Object)
            If (Me.GetLoanChargeMannerOperationCompleted Is Nothing) Then
                Me.GetLoanChargeMannerOperationCompleted = AddressOf Me.OnGetLoanChargeMannerOperationCompleted
            End If
            Me.InvokeAsync("GetLoanChargeManner", New Object() {LoanChargeMannerNo}, Me.GetLoanChargeMannerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoanChargeMannerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoanChargeMannerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoanChargeMannerCompleted(Me, New GetLoanChargeMannerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLoanChargeManner", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLoanChargeManner(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateLoanChargeManner", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateLoanChargeManner(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateLoanChargeManner", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateLoanChargeManner(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLoanChargeMannerAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateLoanChargeMannerAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLoanChargeMannerAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateLoanChargeMannerOperationCompleted Is Nothing) Then
                Me.UpdateLoanChargeMannerOperationCompleted = AddressOf Me.OnUpdateLoanChargeMannerOperationCompleted
            End If
            Me.InvokeAsync("UpdateLoanChargeManner", New Object() {dstCommit}, Me.UpdateLoanChargeMannerOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLoanChargeMannerOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLoanChargeMannerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLoanChargeMannerCompleted(Me, New UpdateLoanChargeMannerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSystemID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetSystemID() As Integer
            Dim results() As Object = Me.Invoke("GetSystemID", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSystemID(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSystemID", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSystemID(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSystemIDAsync()
            Me.GetSystemIDAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSystemIDAsync(ByVal userState As Object)
            If (Me.GetSystemIDOperationCompleted Is Nothing) Then
                Me.GetSystemIDOperationCompleted = AddressOf Me.OnGetSystemIDOperationCompleted
            End If
            Me.InvokeAsync("GetSystemID", New Object(-1) {}, Me.GetSystemIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSystemIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSystemIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSystemIDCompleted(Me, New GetSystemIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="GetSystemID1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSystemIDEx", RequestElementName:="GetSystemIDEx", RequestNamespace:="http://tempuri.org/", ResponseElementName:="GetSystemIDExResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetSystemID(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String) As <System.Xml.Serialization.XmlElementAttribute("GetSystemIDExResult")> Integer
            Dim results() As Object = Me.Invoke("GetSystemID1", New Object() {ProjectNo, CorporationNo, Phase})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSystemID1(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSystemID1", New Object() {ProjectNo, CorporationNo, Phase}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSystemID1(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSystemID1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String)
            Me.GetSystemID1Async(ProjectNo, CorporationNo, Phase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSystemID1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal userState As Object)
            If (Me.GetSystemID1OperationCompleted Is Nothing) Then
                Me.GetSystemID1OperationCompleted = AddressOf Me.OnGetSystemID1OperationCompleted
            End If
            Me.InvokeAsync("GetSystemID1", New Object() {ProjectNo, CorporationNo, Phase}, Me.GetSystemID1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSystemID1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSystemID1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSystemID1Completed(Me, New GetSystemID1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchProjectCreditQuality1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectCreditQuality", RequestElementName:="FetchProjectCreditQuality", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchProjectCreditQualityResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchProjectCreditQuality(ByVal Condition As String) As <System.Xml.Serialization.XmlElementAttribute("FetchProjectCreditQualityResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectCreditQuality1", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectCreditQuality1(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectCreditQuality1", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectCreditQuality1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCreditQuality1Async(ByVal Condition As String)
            Me.FetchProjectCreditQuality1Async(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCreditQuality1Async(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchProjectCreditQuality1OperationCompleted Is Nothing) Then
                Me.FetchProjectCreditQuality1OperationCompleted = AddressOf Me.OnFetchProjectCreditQuality1OperationCompleted
            End If
            Me.InvokeAsync("FetchProjectCreditQuality1", New Object() {Condition}, Me.FetchProjectCreditQuality1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectCreditQuality1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectCreditQuality1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectCreditQuality1Completed(Me, New FetchProjectCreditQuality1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectAccountDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectAccountDetail(ByVal ProjectAccountDetailSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectAccountDetail", New Object() {ProjectAccountDetailSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectAccountDetail(ByVal ProjectAccountDetailSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectAccountDetail", New Object() {ProjectAccountDetailSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectAccountDetail(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectAccountDetailAsync(ByVal ProjectAccountDetailSet As System.Data.DataSet)
            Me.UpdateProjectAccountDetailAsync(ProjectAccountDetailSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectAccountDetailAsync(ByVal ProjectAccountDetailSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectAccountDetailOperationCompleted Is Nothing) Then
                Me.UpdateProjectAccountDetailOperationCompleted = AddressOf Me.OnUpdateProjectAccountDetailOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectAccountDetail", New Object() {ProjectAccountDetailSet}, Me.UpdateProjectAccountDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectAccountDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectAccountDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectAccountDetailCompleted(Me, New UpdateProjectAccountDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRefundCertificateInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRefundCertificateInfo(ByVal strSQL_Condition_RefundCertificate As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRefundCertificateInfo", New Object() {strSQL_Condition_RefundCertificate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRefundCertificateInfo(ByVal strSQL_Condition_RefundCertificate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRefundCertificateInfo", New Object() {strSQL_Condition_RefundCertificate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRefundCertificateInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRefundCertificateInfoAsync(ByVal strSQL_Condition_RefundCertificate As String)
            Me.GetRefundCertificateInfoAsync(strSQL_Condition_RefundCertificate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRefundCertificateInfoAsync(ByVal strSQL_Condition_RefundCertificate As String, ByVal userState As Object)
            If (Me.GetRefundCertificateInfoOperationCompleted Is Nothing) Then
                Me.GetRefundCertificateInfoOperationCompleted = AddressOf Me.OnGetRefundCertificateInfoOperationCompleted
            End If
            Me.InvokeAsync("GetRefundCertificateInfo", New Object() {strSQL_Condition_RefundCertificate}, Me.GetRefundCertificateInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRefundCertificateInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRefundCertificateInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRefundCertificateInfoCompleted(Me, New GetRefundCertificateInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRefundCertificate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRefundCertificate(ByVal RefundCertificateSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateRefundCertificate", New Object() {RefundCertificateSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateRefundCertificate(ByVal RefundCertificateSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateRefundCertificate", New Object() {RefundCertificateSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateRefundCertificate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRefundCertificateAsync(ByVal RefundCertificateSet As System.Data.DataSet)
            Me.UpdateRefundCertificateAsync(RefundCertificateSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRefundCertificateAsync(ByVal RefundCertificateSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateRefundCertificateOperationCompleted Is Nothing) Then
                Me.UpdateRefundCertificateOperationCompleted = AddressOf Me.OnUpdateRefundCertificateOperationCompleted
            End If
            Me.InvokeAsync("UpdateRefundCertificate", New Object() {RefundCertificateSet}, Me.UpdateRefundCertificateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRefundCertificateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRefundCertificateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRefundCertificateCompleted(Me, New UpdateRefundCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReturnReceiptInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReturnReceiptInfo(ByVal strSQL_Condition_ReturnReceipt As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReturnReceiptInfo", New Object() {strSQL_Condition_ReturnReceipt})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReturnReceiptInfo(ByVal strSQL_Condition_ReturnReceipt As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReturnReceiptInfo", New Object() {strSQL_Condition_ReturnReceipt}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReturnReceiptInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReturnReceiptInfoAsync(ByVal strSQL_Condition_ReturnReceipt As String)
            Me.GetReturnReceiptInfoAsync(strSQL_Condition_ReturnReceipt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReturnReceiptInfoAsync(ByVal strSQL_Condition_ReturnReceipt As String, ByVal userState As Object)
            If (Me.GetReturnReceiptInfoOperationCompleted Is Nothing) Then
                Me.GetReturnReceiptInfoOperationCompleted = AddressOf Me.OnGetReturnReceiptInfoOperationCompleted
            End If
            Me.InvokeAsync("GetReturnReceiptInfo", New Object() {strSQL_Condition_ReturnReceipt}, Me.GetReturnReceiptInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReturnReceiptInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReturnReceiptInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReturnReceiptInfoCompleted(Me, New GetReturnReceiptInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateReturnReceipt", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateReturnReceipt(ByVal ReturnReceiptSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateReturnReceipt", New Object() {ReturnReceiptSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateReturnReceipt(ByVal ReturnReceiptSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateReturnReceipt", New Object() {ReturnReceiptSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateReturnReceipt(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateReturnReceiptAsync(ByVal ReturnReceiptSet As System.Data.DataSet)
            Me.UpdateReturnReceiptAsync(ReturnReceiptSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateReturnReceiptAsync(ByVal ReturnReceiptSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateReturnReceiptOperationCompleted Is Nothing) Then
                Me.UpdateReturnReceiptOperationCompleted = AddressOf Me.OnUpdateReturnReceiptOperationCompleted
            End If
            Me.InvokeAsync("UpdateReturnReceipt", New Object() {ReturnReceiptSet}, Me.UpdateReturnReceiptOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateReturnReceiptOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateReturnReceiptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateReturnReceiptCompleted(Me, New UpdateReturnReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGuarantyStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGuarantyStatus(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetGuarantyStatus", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetGuarantyStatus(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetGuarantyStatus", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetGuarantyStatus(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGuarantyStatusAsync(ByVal Condition As String)
            Me.GetGuarantyStatusAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGuarantyStatusAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetGuarantyStatusOperationCompleted Is Nothing) Then
                Me.GetGuarantyStatusOperationCompleted = AddressOf Me.OnGetGuarantyStatusOperationCompleted
            End If
            Me.InvokeAsync("GetGuarantyStatus", New Object() {Condition}, Me.GetGuarantyStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGuarantyStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGuarantyStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGuarantyStatusCompleted(Me, New GetGuarantyStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGuarantyStatusEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGuarantyStatusEx(ByVal Status As String, ByVal ID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetGuarantyStatusEx", New Object() {Status, ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetGuarantyStatusEx(ByVal Status As String, ByVal ID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetGuarantyStatusEx", New Object() {Status, ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetGuarantyStatusEx(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGuarantyStatusExAsync(ByVal Status As String, ByVal ID As Integer)
            Me.GetGuarantyStatusExAsync(Status, ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGuarantyStatusExAsync(ByVal Status As String, ByVal ID As Integer, ByVal userState As Object)
            If (Me.GetGuarantyStatusExOperationCompleted Is Nothing) Then
                Me.GetGuarantyStatusExOperationCompleted = AddressOf Me.OnGetGuarantyStatusExOperationCompleted
            End If
            Me.InvokeAsync("GetGuarantyStatusEx", New Object() {Status, ID}, Me.GetGuarantyStatusExOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGuarantyStatusExOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGuarantyStatusExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGuarantyStatusExCompleted(Me, New GetGuarantyStatusExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateGuarantyStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateGuarantyStatus(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateGuarantyStatus", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateGuarantyStatus(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateGuarantyStatus", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateGuarantyStatus(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateGuarantyStatusAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateGuarantyStatusAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGuarantyStatusAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateGuarantyStatusOperationCompleted Is Nothing) Then
                Me.UpdateGuarantyStatusOperationCompleted = AddressOf Me.OnUpdateGuarantyStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateGuarantyStatus", New Object() {dstCommit}, Me.UpdateGuarantyStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateGuarantyStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateGuarantyStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateGuarantyStatusCompleted(Me, New UpdateGuarantyStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTerminateReportInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTerminateReportInfo(ByVal strSQL_Condition_TerminateReport As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTerminateReportInfo", New Object() {strSQL_Condition_TerminateReport})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTerminateReportInfo(ByVal strSQL_Condition_TerminateReport As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTerminateReportInfo", New Object() {strSQL_Condition_TerminateReport}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTerminateReportInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTerminateReportInfoAsync(ByVal strSQL_Condition_TerminateReport As String)
            Me.GetTerminateReportInfoAsync(strSQL_Condition_TerminateReport, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTerminateReportInfoAsync(ByVal strSQL_Condition_TerminateReport As String, ByVal userState As Object)
            If (Me.GetTerminateReportInfoOperationCompleted Is Nothing) Then
                Me.GetTerminateReportInfoOperationCompleted = AddressOf Me.OnGetTerminateReportInfoOperationCompleted
            End If
            Me.InvokeAsync("GetTerminateReportInfo", New Object() {strSQL_Condition_TerminateReport}, Me.GetTerminateReportInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTerminateReportInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTerminateReportInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTerminateReportInfoCompleted(Me, New GetTerminateReportInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTerminateReport", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTerminateReport(ByVal TerminateReportSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateTerminateReport", New Object() {TerminateReportSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateTerminateReport(ByVal TerminateReportSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateTerminateReport", New Object() {TerminateReportSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateTerminateReport(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTerminateReportAsync(ByVal TerminateReportSet As System.Data.DataSet)
            Me.UpdateTerminateReportAsync(TerminateReportSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTerminateReportAsync(ByVal TerminateReportSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateTerminateReportOperationCompleted Is Nothing) Then
                Me.UpdateTerminateReportOperationCompleted = AddressOf Me.OnUpdateTerminateReportOperationCompleted
            End If
            Me.InvokeAsync("UpdateTerminateReport", New Object() {TerminateReportSet}, Me.UpdateTerminateReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTerminateReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTerminateReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTerminateReportCompleted(Me, New UpdateTerminateReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectGuaranteeForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectGuaranteeForm(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectGuaranteeForm", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectGuaranteeForm(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectGuaranteeForm", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectGuaranteeForm(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectGuaranteeFormAsync(ByVal Condition As String)
            Me.GetProjectGuaranteeFormAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectGuaranteeFormAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetProjectGuaranteeFormOperationCompleted Is Nothing) Then
                Me.GetProjectGuaranteeFormOperationCompleted = AddressOf Me.OnGetProjectGuaranteeFormOperationCompleted
            End If
            Me.InvokeAsync("GetProjectGuaranteeForm", New Object() {Condition}, Me.GetProjectGuaranteeFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectGuaranteeFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectGuaranteeFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectGuaranteeFormCompleted(Me, New GetProjectGuaranteeFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectGuaranteeForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectGuaranteeForm(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectGuaranteeForm", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectGuaranteeForm(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectGuaranteeForm", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectGuaranteeForm(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectGuaranteeFormAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProjectGuaranteeFormAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectGuaranteeFormAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectGuaranteeFormOperationCompleted Is Nothing) Then
                Me.UpdateProjectGuaranteeFormOperationCompleted = AddressOf Me.OnUpdateProjectGuaranteeFormOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectGuaranteeForm", New Object() {dstCommit}, Me.UpdateProjectGuaranteeFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectGuaranteeFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectGuaranteeFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectGuaranteeFormCompleted(Me, New UpdateProjectGuaranteeFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectGuaranteeFormAdd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectGuaranteeFormAdd(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectGuaranteeFormAdd", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectGuaranteeFormAdd(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectGuaranteeFormAdd", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectGuaranteeFormAdd(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectGuaranteeFormAddAsync(ByVal Condition As String)
            Me.GetProjectGuaranteeFormAddAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectGuaranteeFormAddAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetProjectGuaranteeFormAddOperationCompleted Is Nothing) Then
                Me.GetProjectGuaranteeFormAddOperationCompleted = AddressOf Me.OnGetProjectGuaranteeFormAddOperationCompleted
            End If
            Me.InvokeAsync("GetProjectGuaranteeFormAdd", New Object() {Condition}, Me.GetProjectGuaranteeFormAddOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectGuaranteeFormAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectGuaranteeFormAddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectGuaranteeFormAddCompleted(Me, New GetProjectGuaranteeFormAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectGuaranteeFormAdd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectGuaranteeFormAdd(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectGuaranteeFormAdd", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectGuaranteeFormAdd(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectGuaranteeFormAdd", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectGuaranteeFormAdd(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectGuaranteeFormAddAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProjectGuaranteeFormAddAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectGuaranteeFormAddAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectGuaranteeFormAddOperationCompleted Is Nothing) Then
                Me.UpdateProjectGuaranteeFormAddOperationCompleted = AddressOf Me.OnUpdateProjectGuaranteeFormAddOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectGuaranteeFormAdd", New Object() {dstCommit}, Me.UpdateProjectGuaranteeFormAddOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectGuaranteeFormAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectGuaranteeFormAddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectGuaranteeFormAddCompleted(Me, New UpdateProjectGuaranteeFormAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSchema", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSchema(ByVal TableName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSchema", New Object() {TableName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSchema(ByVal TableName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSchema", New Object() {TableName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSchema(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSchemaAsync(ByVal TableName As String)
            Me.GetSchemaAsync(TableName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSchemaAsync(ByVal TableName As String, ByVal userState As Object)
            If (Me.GetSchemaOperationCompleted Is Nothing) Then
                Me.GetSchemaOperationCompleted = AddressOf Me.OnGetSchemaOperationCompleted
            End If
            Me.InvokeAsync("GetSchema", New Object() {TableName}, Me.GetSchemaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSchemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSchemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSchemaCompleted(Me, New GetSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCorporationAccount(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationAccount", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationAccount(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationAccount", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationAccount(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccountAsync(ByVal Condition As String)
            Me.FetchCorporationAccountAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccountAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchCorporationAccountOperationCompleted Is Nothing) Then
                Me.FetchCorporationAccountOperationCompleted = AddressOf Me.OnFetchCorporationAccountOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationAccount", New Object() {Condition}, Me.FetchCorporationAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationAccountCompleted(Me, New FetchCorporationAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchCorporationAccount1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationAccount2", RequestElementName:="FetchCorporationAccount2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchCorporationAccount2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCorporationAccount(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal ItemType As String, ByVal ItemCode As String) As <System.Xml.Serialization.XmlElementAttribute("FetchCorporationAccount2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationAccount1", New Object() {ProjectNo, CorporationNo, Phase, Month, ItemType, ItemCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationAccount1(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal ItemType As String, ByVal ItemCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationAccount1", New Object() {ProjectNo, CorporationNo, Phase, Month, ItemType, ItemCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationAccount1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccount1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal ItemType As String, ByVal ItemCode As String)
            Me.FetchCorporationAccount1Async(ProjectNo, CorporationNo, Phase, Month, ItemType, ItemCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccount1Async(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal ItemType As String, ByVal ItemCode As String, ByVal userState As Object)
            If (Me.FetchCorporationAccount1OperationCompleted Is Nothing) Then
                Me.FetchCorporationAccount1OperationCompleted = AddressOf Me.OnFetchCorporationAccount1OperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationAccount1", New Object() {ProjectNo, CorporationNo, Phase, Month, ItemType, ItemCode}, Me.FetchCorporationAccount1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationAccount1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationAccount1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationAccount1Completed(Me, New FetchCorporationAccount1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationLawsuitRecord", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCorporationLawsuitRecord(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationLawsuitRecord", New Object() {ProjectNo, CorporationNo, Phase, SerialID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationLawsuitRecord(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationLawsuitRecord", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationLawsuitRecord(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationLawsuitRecordAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer)
            Me.FetchCorporationLawsuitRecordAsync(ProjectNo, CorporationNo, Phase, SerialID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationLawsuitRecordAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal userState As Object)
            If (Me.FetchCorporationLawsuitRecordOperationCompleted Is Nothing) Then
                Me.FetchCorporationLawsuitRecordOperationCompleted = AddressOf Me.OnFetchCorporationLawsuitRecordOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationLawsuitRecord", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, Me.FetchCorporationLawsuitRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationLawsuitRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationLawsuitRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationLawsuitRecordCompleted(Me, New FetchCorporationLawsuitRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationRatepayingRecord", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCorporationRatepayingRecord(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationRatepayingRecord", New Object() {ProjectNo, CorporationNo, Phase, SerialID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationRatepayingRecord(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationRatepayingRecord", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationRatepayingRecord(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationRatepayingRecordAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer)
            Me.FetchCorporationRatepayingRecordAsync(ProjectNo, CorporationNo, Phase, SerialID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationRatepayingRecordAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal userState As Object)
            If (Me.FetchCorporationRatepayingRecordOperationCompleted Is Nothing) Then
                Me.FetchCorporationRatepayingRecordOperationCompleted = AddressOf Me.OnFetchCorporationRatepayingRecordOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationRatepayingRecord", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, Me.FetchCorporationRatepayingRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationRatepayingRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationRatepayingRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationRatepayingRecordCompleted(Me, New FetchCorporationRatepayingRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationBankSaving", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCorporationBankSaving(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationBankSaving", New Object() {ProjectNo, CorporationNo, Phase, SerialID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationBankSaving(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationBankSaving", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationBankSaving(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationBankSavingAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer)
            Me.FetchCorporationBankSavingAsync(ProjectNo, CorporationNo, Phase, SerialID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationBankSavingAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal userState As Object)
            If (Me.FetchCorporationBankSavingOperationCompleted Is Nothing) Then
                Me.FetchCorporationBankSavingOperationCompleted = AddressOf Me.OnFetchCorporationBankSavingOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationBankSaving", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, Me.FetchCorporationBankSavingOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationBankSavingOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationBankSavingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationBankSavingCompleted(Me, New FetchCorporationBankSavingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationBusiness", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCorporationBusiness(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationBusiness", New Object() {ProjectNo, CorporationNo, Phase, Month})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationBusiness(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationBusiness", New Object() {ProjectNo, CorporationNo, Phase, Month}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationBusiness(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationBusinessAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String)
            Me.FetchCorporationBusinessAsync(ProjectNo, CorporationNo, Phase, Month, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationBusinessAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal userState As Object)
            If (Me.FetchCorporationBusinessOperationCompleted Is Nothing) Then
                Me.FetchCorporationBusinessOperationCompleted = AddressOf Me.OnFetchCorporationBusinessOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationBusiness", New Object() {ProjectNo, CorporationNo, Phase, Month}, Me.FetchCorporationBusinessOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationBusinessOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationBusinessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationBusinessCompleted(Me, New FetchCorporationBusinessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationExternalGuarantee", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCorporationExternalGuarantee(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationExternalGuarantee", New Object() {ProjectNo, CorporationNo, Phase, SerialID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationExternalGuarantee(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationExternalGuarantee", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationExternalGuarantee(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationExternalGuaranteeAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer)
            Me.FetchCorporationExternalGuaranteeAsync(ProjectNo, CorporationNo, Phase, SerialID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationExternalGuaranteeAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal userState As Object)
            If (Me.FetchCorporationExternalGuaranteeOperationCompleted Is Nothing) Then
                Me.FetchCorporationExternalGuaranteeOperationCompleted = AddressOf Me.OnFetchCorporationExternalGuaranteeOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationExternalGuarantee", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, Me.FetchCorporationExternalGuaranteeOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationExternalGuaranteeOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationExternalGuaranteeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationExternalGuaranteeCompleted(Me, New FetchCorporationExternalGuaranteeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationLoan", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCorporationLoan(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationLoan", New Object() {ProjectNo, CorporationNo, Phase, SerialID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationLoan(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationLoan", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationLoan(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationLoanAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer)
            Me.FetchCorporationLoanAsync(ProjectNo, CorporationNo, Phase, SerialID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationLoanAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal userState As Object)
            If (Me.FetchCorporationLoanOperationCompleted Is Nothing) Then
                Me.FetchCorporationLoanOperationCompleted = AddressOf Me.OnFetchCorporationLoanOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationLoan", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, Me.FetchCorporationLoanOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationLoanOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationLoanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationLoanCompleted(Me, New FetchCorporationLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationStockStructure", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCorporationStockStructure(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationStockStructure", New Object() {ProjectNo, CorporationNo, Phase, SerialID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationStockStructure(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationStockStructure", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationStockStructure(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationStockStructureAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer)
            Me.FetchCorporationStockStructureAsync(ProjectNo, CorporationNo, Phase, SerialID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationStockStructureAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Integer, ByVal userState As Object)
            If (Me.FetchCorporationStockStructureOperationCompleted Is Nothing) Then
                Me.FetchCorporationStockStructureOperationCompleted = AddressOf Me.OnFetchCorporationStockStructureOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationStockStructure", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, Me.FetchCorporationStockStructureOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationStockStructureOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationStockStructureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationStockStructureCompleted(Me, New FetchCorporationStockStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectCorporationEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchProjectCorporationEx(ByVal ProjectNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectCorporationEx", New Object() {ProjectNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectCorporationEx(ByVal ProjectNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectCorporationEx", New Object() {ProjectNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectCorporationEx(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCorporationExAsync(ByVal ProjectNo As String)
            Me.FetchProjectCorporationExAsync(ProjectNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCorporationExAsync(ByVal ProjectNo As String, ByVal userState As Object)
            If (Me.FetchProjectCorporationExOperationCompleted Is Nothing) Then
                Me.FetchProjectCorporationExOperationCompleted = AddressOf Me.OnFetchProjectCorporationExOperationCompleted
            End If
            Me.InvokeAsync("FetchProjectCorporationEx", New Object() {ProjectNo}, Me.FetchProjectCorporationExOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectCorporationExOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectCorporationExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectCorporationExCompleted(Me, New FetchProjectCorporationExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectCorporation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchProjectCorporation(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationType As String, ByVal Phase As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectCorporation", New Object() {ProjectNo, CorporationNo, CorporationType, Phase})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectCorporation(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationType As String, ByVal Phase As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectCorporation", New Object() {ProjectNo, CorporationNo, CorporationType, Phase}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectCorporation(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCorporationAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationType As String, ByVal Phase As String)
            Me.FetchProjectCorporationAsync(ProjectNo, CorporationNo, CorporationType, Phase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCorporationAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal CorporationType As String, ByVal Phase As String, ByVal userState As Object)
            If (Me.FetchProjectCorporationOperationCompleted Is Nothing) Then
                Me.FetchProjectCorporationOperationCompleted = AddressOf Me.OnFetchProjectCorporationOperationCompleted
            End If
            Me.InvokeAsync("FetchProjectCorporation", New Object() {ProjectNo, CorporationNo, CorporationType, Phase}, Me.FetchProjectCorporationOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectCorporationOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectCorporationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectCorporationCompleted(Me, New FetchProjectCorporationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchProjectCorporation1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchProjectCorporation2", RequestElementName:="FetchProjectCorporation2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchProjectCorporation2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchProjectCorporation(ByVal Condition As String) As <System.Xml.Serialization.XmlElementAttribute("FetchProjectCorporation2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchProjectCorporation1", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchProjectCorporation1(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchProjectCorporation1", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchProjectCorporation1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCorporation1Async(ByVal Condition As String)
            Me.FetchProjectCorporation1Async(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchProjectCorporation1Async(ByVal Condition As String, ByVal userState As Object)
            If (Me.FetchProjectCorporation1OperationCompleted Is Nothing) Then
                Me.FetchProjectCorporation1OperationCompleted = AddressOf Me.OnFetchProjectCorporation1OperationCompleted
            End If
            Me.InvokeAsync("FetchProjectCorporation1", New Object() {Condition}, Me.FetchProjectCorporation1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchProjectCorporation1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchProjectCorporation1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchProjectCorporation1Completed(Me, New FetchProjectCorporation1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationPostalOrder", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCorporationPostalOrder(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Long) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationPostalOrder", New Object() {ProjectNo, CorporationNo, Phase, SerialID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationPostalOrder(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Long, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationPostalOrder", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationPostalOrder(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationPostalOrderAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Long)
            Me.FetchCorporationPostalOrderAsync(ProjectNo, CorporationNo, Phase, SerialID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationPostalOrderAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal SerialID As Long, ByVal userState As Object)
            If (Me.FetchCorporationPostalOrderOperationCompleted Is Nothing) Then
                Me.FetchCorporationPostalOrderOperationCompleted = AddressOf Me.OnFetchCorporationPostalOrderOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationPostalOrder", New Object() {ProjectNo, CorporationNo, Phase, SerialID}, Me.FetchCorporationPostalOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationPostalOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationPostalOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationPostalOrderCompleted(Me, New FetchCorporationPostalOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporationPostalOrder", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporationPostalOrder(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporationPostalOrder", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporationPostalOrder(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporationPostalOrder", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporationPostalOrder(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationPostalOrderAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateCorporationPostalOrderAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationPostalOrderAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporationPostalOrderOperationCompleted Is Nothing) Then
                Me.UpdateCorporationPostalOrderOperationCompleted = AddressOf Me.OnUpdateCorporationPostalOrderOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporationPostalOrder", New Object() {dstCommit}, Me.UpdateCorporationPostalOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporationPostalOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporationPostalOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporationPostalOrderCompleted(Me, New UpdateCorporationPostalOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporationAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporationAccount(ByVal rstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporationAccount", New Object() {rstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporationAccount(ByVal rstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporationAccount", New Object() {rstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporationAccount(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationAccountAsync(ByVal rstCommit As System.Data.DataSet)
            Me.UpdateCorporationAccountAsync(rstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationAccountAsync(ByVal rstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporationAccountOperationCompleted Is Nothing) Then
                Me.UpdateCorporationAccountOperationCompleted = AddressOf Me.OnUpdateCorporationAccountOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporationAccount", New Object() {rstCommit}, Me.UpdateCorporationAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporationAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporationAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporationAccountCompleted(Me, New UpdateCorporationAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporationBankSaving", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporationBankSaving(ByVal rstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporationBankSaving", New Object() {rstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporationBankSaving(ByVal rstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporationBankSaving", New Object() {rstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporationBankSaving(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationBankSavingAsync(ByVal rstCommit As System.Data.DataSet)
            Me.UpdateCorporationBankSavingAsync(rstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationBankSavingAsync(ByVal rstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporationBankSavingOperationCompleted Is Nothing) Then
                Me.UpdateCorporationBankSavingOperationCompleted = AddressOf Me.OnUpdateCorporationBankSavingOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporationBankSaving", New Object() {rstCommit}, Me.UpdateCorporationBankSavingOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporationBankSavingOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporationBankSavingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporationBankSavingCompleted(Me, New UpdateCorporationBankSavingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporationLawsuitRecord", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporationLawsuitRecord(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporationLawsuitRecord", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporationLawsuitRecord(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporationLawsuitRecord", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporationLawsuitRecord(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationLawsuitRecordAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateCorporationLawsuitRecordAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationLawsuitRecordAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporationLawsuitRecordOperationCompleted Is Nothing) Then
                Me.UpdateCorporationLawsuitRecordOperationCompleted = AddressOf Me.OnUpdateCorporationLawsuitRecordOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporationLawsuitRecord", New Object() {dstCommit}, Me.UpdateCorporationLawsuitRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporationLawsuitRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporationLawsuitRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporationLawsuitRecordCompleted(Me, New UpdateCorporationLawsuitRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporationRatepayingRecord", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporationRatepayingRecord(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporationRatepayingRecord", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporationRatepayingRecord(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporationRatepayingRecord", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporationRatepayingRecord(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationRatepayingRecordAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateCorporationRatepayingRecordAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationRatepayingRecordAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporationRatepayingRecordOperationCompleted Is Nothing) Then
                Me.UpdateCorporationRatepayingRecordOperationCompleted = AddressOf Me.OnUpdateCorporationRatepayingRecordOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporationRatepayingRecord", New Object() {dstCommit}, Me.UpdateCorporationRatepayingRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporationRatepayingRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporationRatepayingRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporationRatepayingRecordCompleted(Me, New UpdateCorporationRatepayingRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporationBusiness", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporationBusiness(ByVal rstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporationBusiness", New Object() {rstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporationBusiness(ByVal rstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporationBusiness", New Object() {rstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporationBusiness(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationBusinessAsync(ByVal rstCommit As System.Data.DataSet)
            Me.UpdateCorporationBusinessAsync(rstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationBusinessAsync(ByVal rstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporationBusinessOperationCompleted Is Nothing) Then
                Me.UpdateCorporationBusinessOperationCompleted = AddressOf Me.OnUpdateCorporationBusinessOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporationBusiness", New Object() {rstCommit}, Me.UpdateCorporationBusinessOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporationBusinessOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporationBusinessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporationBusinessCompleted(Me, New UpdateCorporationBusinessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporationExternalGuarantee", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporationExternalGuarantee(ByVal rstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporationExternalGuarantee", New Object() {rstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporationExternalGuarantee(ByVal rstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporationExternalGuarantee", New Object() {rstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporationExternalGuarantee(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationExternalGuaranteeAsync(ByVal rstCommit As System.Data.DataSet)
            Me.UpdateCorporationExternalGuaranteeAsync(rstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationExternalGuaranteeAsync(ByVal rstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporationExternalGuaranteeOperationCompleted Is Nothing) Then
                Me.UpdateCorporationExternalGuaranteeOperationCompleted = AddressOf Me.OnUpdateCorporationExternalGuaranteeOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporationExternalGuarantee", New Object() {rstCommit}, Me.UpdateCorporationExternalGuaranteeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporationExternalGuaranteeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporationExternalGuaranteeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporationExternalGuaranteeCompleted(Me, New UpdateCorporationExternalGuaranteeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporationLoan", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporationLoan(ByVal rstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporationLoan", New Object() {rstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporationLoan(ByVal rstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporationLoan", New Object() {rstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporationLoan(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationLoanAsync(ByVal rstCommit As System.Data.DataSet)
            Me.UpdateCorporationLoanAsync(rstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationLoanAsync(ByVal rstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporationLoanOperationCompleted Is Nothing) Then
                Me.UpdateCorporationLoanOperationCompleted = AddressOf Me.OnUpdateCorporationLoanOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporationLoan", New Object() {rstCommit}, Me.UpdateCorporationLoanOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporationLoanOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporationLoanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporationLoanCompleted(Me, New UpdateCorporationLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporationStockStructure", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporationStockStructure(ByVal rstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporationStockStructure", New Object() {rstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporationStockStructure(ByVal rstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporationStockStructure", New Object() {rstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporationStockStructure(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationStockStructureAsync(ByVal rstCommit As System.Data.DataSet)
            Me.UpdateCorporationStockStructureAsync(rstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationStockStructureAsync(ByVal rstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporationStockStructureOperationCompleted Is Nothing) Then
                Me.UpdateCorporationStockStructureOperationCompleted = AddressOf Me.OnUpdateCorporationStockStructureOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporationStockStructure", New Object() {rstCommit}, Me.UpdateCorporationStockStructureOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporationStockStructureOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporationStockStructureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporationStockStructureCompleted(Me, New UpdateCorporationStockStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectCorporation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectCorporation(ByVal rstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectCorporation", New Object() {rstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectCorporation(ByVal rstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectCorporation", New Object() {rstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectCorporation(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectCorporationAsync(ByVal rstCommit As System.Data.DataSet)
            Me.UpdateProjectCorporationAsync(rstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectCorporationAsync(ByVal rstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectCorporationOperationCompleted Is Nothing) Then
                Me.UpdateProjectCorporationOperationCompleted = AddressOf Me.OnUpdateProjectCorporationOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectCorporation", New Object() {rstCommit}, Me.UpdateProjectCorporationOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectCorporationOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectCorporationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectCorporationCompleted(Me, New UpdateProjectCorporationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBranch", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBranch(ByVal BranchNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBranch", New Object() {BranchNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetBranch(ByVal BranchNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetBranch", New Object() {BranchNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetBranch(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBranchAsync(ByVal BranchNo As String)
            Me.GetBranchAsync(BranchNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBranchAsync(ByVal BranchNo As String, ByVal userState As Object)
            If (Me.GetBranchOperationCompleted Is Nothing) Then
                Me.GetBranchOperationCompleted = AddressOf Me.OnGetBranchOperationCompleted
            End If
            Me.InvokeAsync("GetBranch", New Object() {BranchNo}, Me.GetBranchOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBranchOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBranchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBranchCompleted(Me, New GetBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBranch", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateBranch(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateBranch", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateBranch(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateBranch", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateBranch(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateBranchAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateBranchAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBranchAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateBranchOperationCompleted Is Nothing) Then
                Me.UpdateBranchOperationCompleted = AddressOf Me.OnUpdateBranchOperationCompleted
            End If
            Me.InvokeAsync("UpdateBranch", New Object() {dstCommit}, Me.UpdateBranchOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateBranchOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateBranchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateBranchCompleted(Me, New UpdateBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccount(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAccount", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAccount(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAccount", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAccount(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountAsync(ByVal Condition As String)
            Me.GetAccountAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetAccountOperationCompleted Is Nothing) Then
                Me.GetAccountOperationCompleted = AddressOf Me.OnGetAccountOperationCompleted
            End If
            Me.InvokeAsync("GetAccount", New Object() {Condition}, Me.GetAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountCompleted(Me, New GetAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationAccountCredit", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCorporationAccountCredit() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationAccountCredit", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationAccountCredit(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationAccountCredit", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationAccountCredit(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccountCreditAsync()
            Me.FetchCorporationAccountCreditAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccountCreditAsync(ByVal userState As Object)
            If (Me.FetchCorporationAccountCreditOperationCompleted Is Nothing) Then
                Me.FetchCorporationAccountCreditOperationCompleted = AddressOf Me.OnFetchCorporationAccountCreditOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationAccountCredit", New Object(-1) {}, Me.FetchCorporationAccountCreditOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationAccountCreditOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationAccountCreditCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationAccountCreditCompleted(Me, New FetchCorporationAccountCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationAccountCreditEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCorporationAccountCreditEx(ByVal ProjectNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationAccountCreditEx", New Object() {ProjectNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationAccountCreditEx(ByVal ProjectNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationAccountCreditEx", New Object() {ProjectNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationAccountCreditEx(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccountCreditExAsync(ByVal ProjectNo As String)
            Me.FetchCorporationAccountCreditExAsync(ProjectNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccountCreditExAsync(ByVal ProjectNo As String, ByVal userState As Object)
            If (Me.FetchCorporationAccountCreditExOperationCompleted Is Nothing) Then
                Me.FetchCorporationAccountCreditExOperationCompleted = AddressOf Me.OnFetchCorporationAccountCreditExOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationAccountCreditEx", New Object() {ProjectNo}, Me.FetchCorporationAccountCreditExOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationAccountCreditExOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationAccountCreditExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationAccountCreditExCompleted(Me, New FetchCorporationAccountCreditExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="FetchCorporationAccountCredit1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationAccountCredit2", RequestElementName:="FetchCorporationAccountCredit2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="FetchCorporationAccountCredit2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function FetchCorporationAccountCredit(ByVal ProjectNo As String) As <System.Xml.Serialization.XmlElementAttribute("FetchCorporationAccountCredit2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationAccountCredit1", New Object() {ProjectNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationAccountCredit1(ByVal ProjectNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationAccountCredit1", New Object() {ProjectNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationAccountCredit1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccountCredit1Async(ByVal ProjectNo As String)
            Me.FetchCorporationAccountCredit1Async(ProjectNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccountCredit1Async(ByVal ProjectNo As String, ByVal userState As Object)
            If (Me.FetchCorporationAccountCredit1OperationCompleted Is Nothing) Then
                Me.FetchCorporationAccountCredit1OperationCompleted = AddressOf Me.OnFetchCorporationAccountCredit1OperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationAccountCredit1", New Object() {ProjectNo}, Me.FetchCorporationAccountCredit1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationAccountCredit1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationAccountCredit1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationAccountCredit1Completed(Me, New FetchCorporationAccountCredit1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountEx(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal ItemNo As String, ByVal ItemType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAccountEx", New Object() {ProjectNo, CorporationNo, Phase, Month, ItemNo, ItemType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAccountEx(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal ItemNo As String, ByVal ItemType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAccountEx", New Object() {ProjectNo, CorporationNo, Phase, Month, ItemNo, ItemType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAccountEx(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountExAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal ItemNo As String, ByVal ItemType As String)
            Me.GetAccountExAsync(ProjectNo, CorporationNo, Phase, Month, ItemNo, ItemType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountExAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal Month As String, ByVal ItemNo As String, ByVal ItemType As String, ByVal userState As Object)
            If (Me.GetAccountExOperationCompleted Is Nothing) Then
                Me.GetAccountExOperationCompleted = AddressOf Me.OnGetAccountExOperationCompleted
            End If
            Me.InvokeAsync("GetAccountEx", New Object() {ProjectNo, CorporationNo, Phase, Month, ItemNo, ItemType}, Me.GetAccountExOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountExOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountExCompleted(Me, New GetAccountExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCorporationAccountMonth", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchCorporationAccountMonth(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FetchCorporationAccountMonth", New Object() {ProjectNo, CorporationNo, Phase})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFetchCorporationAccountMonth(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FetchCorporationAccountMonth", New Object() {ProjectNo, CorporationNo, Phase}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFetchCorporationAccountMonth(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccountMonthAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String)
            Me.FetchCorporationAccountMonthAsync(ProjectNo, CorporationNo, Phase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchCorporationAccountMonthAsync(ByVal ProjectNo As String, ByVal CorporationNo As String, ByVal Phase As String, ByVal userState As Object)
            If (Me.FetchCorporationAccountMonthOperationCompleted Is Nothing) Then
                Me.FetchCorporationAccountMonthOperationCompleted = AddressOf Me.OnFetchCorporationAccountMonthOperationCompleted
            End If
            Me.InvokeAsync("FetchCorporationAccountMonth", New Object() {ProjectNo, CorporationNo, Phase}, Me.FetchCorporationAccountMonthOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchCorporationAccountMonthOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCorporationAccountMonthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCorporationAccountMonthCompleted(Me, New FetchCorporationAccountMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAccount(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateAccount", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateAccount(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateAccount", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateAccount(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAccountAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateAccountAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAccountAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateAccountOperationCompleted Is Nothing) Then
                Me.UpdateAccountOperationCompleted = AddressOf Me.OnUpdateAccountOperationCompleted
            End If
            Me.InvokeAsync("UpdateAccount", New Object() {dstCommit}, Me.UpdateAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAccountCompleted(Me, New UpdateAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCorporationType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCorporationType(ByVal CorporationTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCorporationType", New Object() {CorporationTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCorporationType(ByVal CorporationTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCorporationType", New Object() {CorporationTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCorporationType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCorporationTypeAsync(ByVal CorporationTypeNo As String)
            Me.GetCorporationTypeAsync(CorporationTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCorporationTypeAsync(ByVal CorporationTypeNo As String, ByVal userState As Object)
            If (Me.GetCorporationTypeOperationCompleted Is Nothing) Then
                Me.GetCorporationTypeOperationCompleted = AddressOf Me.OnGetCorporationTypeOperationCompleted
            End If
            Me.InvokeAsync("GetCorporationType", New Object() {CorporationTypeNo}, Me.GetCorporationTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCorporationTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCorporationTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCorporationTypeCompleted(Me, New GetCorporationTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporationType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporationType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporationType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporationType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporationType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporationType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateCorporationTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporationTypeOperationCompleted Is Nothing) Then
                Me.UpdateCorporationTypeOperationCompleted = AddressOf Me.OnUpdateCorporationTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporationType", New Object() {dstCommit}, Me.UpdateCorporationTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporationTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporationTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporationTypeCompleted(Me, New UpdateCorporationTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCurrency", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrency(ByVal CurrencyNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCurrency", New Object() {CurrencyNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCurrency(ByVal CurrencyNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCurrency", New Object() {CurrencyNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCurrency(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrencyAsync(ByVal CurrencyNo As String)
            Me.GetCurrencyAsync(CurrencyNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrencyAsync(ByVal CurrencyNo As String, ByVal userState As Object)
            If (Me.GetCurrencyOperationCompleted Is Nothing) Then
                Me.GetCurrencyOperationCompleted = AddressOf Me.OnGetCurrencyOperationCompleted
            End If
            Me.InvokeAsync("GetCurrency", New Object() {CurrencyNo}, Me.GetCurrencyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrencyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrencyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrencyCompleted(Me, New GetCurrencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCurrency", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCurrency(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCurrency", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCurrency(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCurrency", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCurrency(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCurrencyAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateCurrencyAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCurrencyAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCurrencyOperationCompleted Is Nothing) Then
                Me.UpdateCurrencyOperationCompleted = AddressOf Me.OnUpdateCurrencyOperationCompleted
            End If
            Me.InvokeAsync("UpdateCurrency", New Object() {dstCommit}, Me.UpdateCurrencyOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCurrencyOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCurrencyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCurrencyCompleted(Me, New UpdateCurrencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDistrict", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDistrict(ByVal DistrictNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDistrict", New Object() {DistrictNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDistrict(ByVal DistrictNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDistrict", New Object() {DistrictNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDistrict(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDistrictAsync(ByVal DistrictNo As String)
            Me.GetDistrictAsync(DistrictNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDistrictAsync(ByVal DistrictNo As String, ByVal userState As Object)
            If (Me.GetDistrictOperationCompleted Is Nothing) Then
                Me.GetDistrictOperationCompleted = AddressOf Me.OnGetDistrictOperationCompleted
            End If
            Me.InvokeAsync("GetDistrict", New Object() {DistrictNo}, Me.GetDistrictOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDistrictOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDistrictCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDistrictCompleted(Me, New GetDistrictCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDistrict", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDistrict(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateDistrict", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateDistrict(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateDistrict", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateDistrict(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDistrictAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateDistrictAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDistrictAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateDistrictOperationCompleted Is Nothing) Then
                Me.UpdateDistrictOperationCompleted = AddressOf Me.OnUpdateDistrictOperationCompleted
            End If
            Me.InvokeAsync("UpdateDistrict", New Object() {dstCommit}, Me.UpdateDistrictOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDistrictOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDistrictCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDistrictCompleted(Me, New UpdateDistrictCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIndustryType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIndustryType(ByVal IndustryTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetIndustryType", New Object() {IndustryTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetIndustryType(ByVal IndustryTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetIndustryType", New Object() {IndustryTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetIndustryType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIndustryTypeAsync(ByVal IndustryTypeNo As String)
            Me.GetIndustryTypeAsync(IndustryTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIndustryTypeAsync(ByVal IndustryTypeNo As String, ByVal userState As Object)
            If (Me.GetIndustryTypeOperationCompleted Is Nothing) Then
                Me.GetIndustryTypeOperationCompleted = AddressOf Me.OnGetIndustryTypeOperationCompleted
            End If
            Me.InvokeAsync("GetIndustryType", New Object() {IndustryTypeNo}, Me.GetIndustryTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIndustryTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIndustryTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIndustryTypeCompleted(Me, New GetIndustryTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateIndustryType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateIndustryType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateIndustryType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateIndustryType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateIndustryType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateIndustryType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateIndustryTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateIndustryTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateIndustryTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateIndustryTypeOperationCompleted Is Nothing) Then
                Me.UpdateIndustryTypeOperationCompleted = AddressOf Me.OnUpdateIndustryTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateIndustryType", New Object() {dstCommit}, Me.UpdateIndustryTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateIndustryTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateIndustryTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateIndustryTypeCompleted(Me, New UpdateIndustryTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvestForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInvestForm(ByVal InvestFormNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInvestForm", New Object() {InvestFormNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetInvestForm(ByVal InvestFormNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetInvestForm", New Object() {InvestFormNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetInvestForm(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInvestFormAsync(ByVal InvestFormNo As String)
            Me.GetInvestFormAsync(InvestFormNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInvestFormAsync(ByVal InvestFormNo As String, ByVal userState As Object)
            If (Me.GetInvestFormOperationCompleted Is Nothing) Then
                Me.GetInvestFormOperationCompleted = AddressOf Me.OnGetInvestFormOperationCompleted
            End If
            Me.InvokeAsync("GetInvestForm", New Object() {InvestFormNo}, Me.GetInvestFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInvestFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInvestFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInvestFormCompleted(Me, New GetInvestFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateInvestForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateInvestForm(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateInvestForm", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateInvestForm(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateInvestForm", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateInvestForm(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateInvestFormAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateInvestFormAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateInvestFormAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateInvestFormOperationCompleted Is Nothing) Then
                Me.UpdateInvestFormOperationCompleted = AddressOf Me.OnUpdateInvestFormOperationCompleted
            End If
            Me.InvokeAsync("UpdateInvestForm", New Object() {dstCommit}, Me.UpdateInvestFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateInvestFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateInvestFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateInvestFormCompleted(Me, New UpdateInvestFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItem(ByVal ItemNo As String, ByVal ItemTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItem", New Object() {ItemNo, ItemTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetItem(ByVal ItemNo As String, ByVal ItemTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetItem", New Object() {ItemNo, ItemTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetItem(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemAsync(ByVal ItemNo As String, ByVal ItemTypeNo As String)
            Me.GetItemAsync(ItemNo, ItemTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemAsync(ByVal ItemNo As String, ByVal ItemTypeNo As String, ByVal userState As Object)
            If (Me.GetItemOperationCompleted Is Nothing) Then
                Me.GetItemOperationCompleted = AddressOf Me.OnGetItemOperationCompleted
            End If
            Me.InvokeAsync("GetItem", New Object() {ItemNo, ItemTypeNo}, Me.GetItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemCompleted(Me, New GetItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemType(ByVal ItemTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemType", New Object() {ItemTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetItemType(ByVal ItemTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetItemType", New Object() {ItemTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetItemType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemTypeAsync(ByVal ItemTypeNo As String)
            Me.GetItemTypeAsync(ItemTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemTypeAsync(ByVal ItemTypeNo As String, ByVal userState As Object)
            If (Me.GetItemTypeOperationCompleted Is Nothing) Then
                Me.GetItemTypeOperationCompleted = AddressOf Me.OnGetItemTypeOperationCompleted
            End If
            Me.InvokeAsync("GetItemType", New Object() {ItemTypeNo}, Me.GetItemTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemTypeCompleted(Me, New GetItemTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemEx", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemEx(ByVal ItemNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemEx", New Object() {ItemNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetItemEx(ByVal ItemNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetItemEx", New Object() {ItemNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetItemEx(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemExAsync(ByVal ItemNo As String)
            Me.GetItemExAsync(ItemNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemExAsync(ByVal ItemNo As String, ByVal userState As Object)
            If (Me.GetItemExOperationCompleted Is Nothing) Then
                Me.GetItemExOperationCompleted = AddressOf Me.OnGetItemExOperationCompleted
            End If
            Me.InvokeAsync("GetItemEx", New Object() {ItemNo}, Me.GetItemExOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemExOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemExCompleted(Me, New GetItemExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateItem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateItem(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateItem", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateItem(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateItem", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateItem(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateItemAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateItemAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateItemAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateItemOperationCompleted Is Nothing) Then
                Me.UpdateItemOperationCompleted = AddressOf Me.OnUpdateItemOperationCompleted
            End If
            Me.InvokeAsync("UpdateItem", New Object() {dstCommit}, Me.UpdateItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateItemCompleted(Me, New UpdateItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateItemType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateItemType(ByVal dstCommit As System.Data.DataSet) As Integer
            Dim results() As Object = Me.Invoke("UpdateItemType", New Object() {dstCommit})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateItemType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateItemType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateItemType(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateItemTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateItemTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateItemTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateItemTypeOperationCompleted Is Nothing) Then
                Me.UpdateItemTypeOperationCompleted = AddressOf Me.OnUpdateItemTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateItemType", New Object() {dstCommit}, Me.UpdateItemTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateItemTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateItemTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateItemTypeCompleted(Me, New UpdateItemTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLoanType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoanType(ByVal LoanTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLoanType", New Object() {LoanTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLoanType(ByVal LoanTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLoanType", New Object() {LoanTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLoanType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoanTypeAsync(ByVal LoanTypeNo As String)
            Me.GetLoanTypeAsync(LoanTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoanTypeAsync(ByVal LoanTypeNo As String, ByVal userState As Object)
            If (Me.GetLoanTypeOperationCompleted Is Nothing) Then
                Me.GetLoanTypeOperationCompleted = AddressOf Me.OnGetLoanTypeOperationCompleted
            End If
            Me.InvokeAsync("GetLoanType", New Object() {LoanTypeNo}, Me.GetLoanTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoanTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoanTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoanTypeCompleted(Me, New GetLoanTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLoanType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLoanType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateLoanType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateLoanType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateLoanType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateLoanType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLoanTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateLoanTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLoanTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateLoanTypeOperationCompleted Is Nothing) Then
                Me.UpdateLoanTypeOperationCompleted = AddressOf Me.OnUpdateLoanTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateLoanType", New Object() {dstCommit}, Me.UpdateLoanTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLoanTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLoanTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLoanTypeCompleted(Me, New UpdateLoanTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOppositeGuaranteeForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOppositeGuaranteeForm(ByVal FormNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOppositeGuaranteeForm", New Object() {FormNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOppositeGuaranteeForm(ByVal FormNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOppositeGuaranteeForm", New Object() {FormNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOppositeGuaranteeForm(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOppositeGuaranteeFormAsync(ByVal FormNo As String)
            Me.GetOppositeGuaranteeFormAsync(FormNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOppositeGuaranteeFormAsync(ByVal FormNo As String, ByVal userState As Object)
            If (Me.GetOppositeGuaranteeFormOperationCompleted Is Nothing) Then
                Me.GetOppositeGuaranteeFormOperationCompleted = AddressOf Me.OnGetOppositeGuaranteeFormOperationCompleted
            End If
            Me.InvokeAsync("GetOppositeGuaranteeForm", New Object() {FormNo}, Me.GetOppositeGuaranteeFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOppositeGuaranteeFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOppositeGuaranteeFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOppositeGuaranteeFormCompleted(Me, New GetOppositeGuaranteeFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOppositeGuaranteeForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOppositeGuaranteeForm(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateOppositeGuaranteeForm", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateOppositeGuaranteeForm(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateOppositeGuaranteeForm", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateOppositeGuaranteeForm(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOppositeGuaranteeFormAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateOppositeGuaranteeFormAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOppositeGuaranteeFormAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateOppositeGuaranteeFormOperationCompleted Is Nothing) Then
                Me.UpdateOppositeGuaranteeFormOperationCompleted = AddressOf Me.OnUpdateOppositeGuaranteeFormOperationCompleted
            End If
            Me.InvokeAsync("UpdateOppositeGuaranteeForm", New Object() {dstCommit}, Me.UpdateOppositeGuaranteeFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOppositeGuaranteeFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOppositeGuaranteeFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOppositeGuaranteeFormCompleted(Me, New UpdateOppositeGuaranteeFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectAccount(ByVal ProjectNo As String, ByVal SerialID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectAccount", New Object() {ProjectNo, SerialID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectAccount(ByVal ProjectNo As String, ByVal SerialID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectAccount", New Object() {ProjectNo, SerialID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectAccount(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectAccountAsync(ByVal ProjectNo As String, ByVal SerialID As Integer)
            Me.GetProjectAccountAsync(ProjectNo, SerialID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectAccountAsync(ByVal ProjectNo As String, ByVal SerialID As Integer, ByVal userState As Object)
            If (Me.GetProjectAccountOperationCompleted Is Nothing) Then
                Me.GetProjectAccountOperationCompleted = AddressOf Me.OnGetProjectAccountOperationCompleted
            End If
            Me.InvokeAsync("GetProjectAccount", New Object() {ProjectNo, SerialID}, Me.GetProjectAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectAccountCompleted(Me, New GetProjectAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectAccount(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectAccount", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectAccount(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectAccount", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectAccount(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectAccountAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProjectAccountAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectAccountAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectAccountOperationCompleted Is Nothing) Then
                Me.UpdateProjectAccountOperationCompleted = AddressOf Me.OnUpdateProjectAccountOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectAccount", New Object() {dstCommit}, Me.UpdateProjectAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectAccountCompleted(Me, New UpdateProjectAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectDocumentByCondition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectDocumentByCondition(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectDocumentByCondition", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectDocumentByCondition(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectDocumentByCondition", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectDocumentByCondition(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectDocumentByConditionAsync(ByVal Condition As String)
            Me.GetProjectDocumentByConditionAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectDocumentByConditionAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetProjectDocumentByConditionOperationCompleted Is Nothing) Then
                Me.GetProjectDocumentByConditionOperationCompleted = AddressOf Me.OnGetProjectDocumentByConditionOperationCompleted
            End If
            Me.InvokeAsync("GetProjectDocumentByCondition", New Object() {Condition}, Me.GetProjectDocumentByConditionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectDocumentByConditionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectDocumentByConditionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectDocumentByConditionCompleted(Me, New GetProjectDocumentByConditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectDocument(ByVal ProjectNo As String, ByVal Phase As String, ByVal ItemNo As String, ByVal ItemTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectDocument", New Object() {ProjectNo, Phase, ItemNo, ItemTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectDocument(ByVal ProjectNo As String, ByVal Phase As String, ByVal ItemNo As String, ByVal ItemTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectDocument", New Object() {ProjectNo, Phase, ItemNo, ItemTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectDocument(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectDocumentAsync(ByVal ProjectNo As String, ByVal Phase As String, ByVal ItemNo As String, ByVal ItemTypeNo As String)
            Me.GetProjectDocumentAsync(ProjectNo, Phase, ItemNo, ItemTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectDocumentAsync(ByVal ProjectNo As String, ByVal Phase As String, ByVal ItemNo As String, ByVal ItemTypeNo As String, ByVal userState As Object)
            If (Me.GetProjectDocumentOperationCompleted Is Nothing) Then
                Me.GetProjectDocumentOperationCompleted = AddressOf Me.OnGetProjectDocumentOperationCompleted
            End If
            Me.InvokeAsync("GetProjectDocument", New Object() {ProjectNo, Phase, ItemNo, ItemTypeNo}, Me.GetProjectDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectDocumentCompleted(Me, New GetProjectDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectDocument(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectDocument", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectDocument(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectDocument", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectDocument(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectDocumentAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProjectDocumentAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectDocumentAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectDocumentOperationCompleted Is Nothing) Then
                Me.UpdateProjectDocumentOperationCompleted = AddressOf Me.OnUpdateProjectDocumentOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectDocument", New Object() {dstCommit}, Me.UpdateProjectDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectDocumentCompleted(Me, New UpdateProjectDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectTask(ByVal ProjectNo As String, ByVal SerialID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectTask", New Object() {ProjectNo, SerialID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectTask(ByVal ProjectNo As String, ByVal SerialID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectTask", New Object() {ProjectNo, SerialID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectTask(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectTaskAsync(ByVal ProjectNo As String, ByVal SerialID As Integer)
            Me.GetProjectTaskAsync(ProjectNo, SerialID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectTaskAsync(ByVal ProjectNo As String, ByVal SerialID As Integer, ByVal userState As Object)
            If (Me.GetProjectTaskOperationCompleted Is Nothing) Then
                Me.GetProjectTaskOperationCompleted = AddressOf Me.OnGetProjectTaskOperationCompleted
            End If
            Me.InvokeAsync("GetProjectTask", New Object() {ProjectNo, SerialID}, Me.GetProjectTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectTaskCompleted(Me, New GetProjectTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectTask(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectTask", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectTask(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectTask", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectTask(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectTaskAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProjectTaskAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectTaskAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectTaskOperationCompleted Is Nothing) Then
                Me.UpdateProjectTaskOperationCompleted = AddressOf Me.OnUpdateProjectTaskOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectTask", New Object() {dstCommit}, Me.UpdateProjectTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectTaskCompleted(Me, New UpdateProjectTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProprietorshipType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProprietorshipType(ByVal ProprietorshipTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProprietorshipType", New Object() {ProprietorshipTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProprietorshipType(ByVal ProprietorshipTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProprietorshipType", New Object() {ProprietorshipTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProprietorshipType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProprietorshipTypeAsync(ByVal ProprietorshipTypeNo As String)
            Me.GetProprietorshipTypeAsync(ProprietorshipTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProprietorshipTypeAsync(ByVal ProprietorshipTypeNo As String, ByVal userState As Object)
            If (Me.GetProprietorshipTypeOperationCompleted Is Nothing) Then
                Me.GetProprietorshipTypeOperationCompleted = AddressOf Me.OnGetProprietorshipTypeOperationCompleted
            End If
            Me.InvokeAsync("GetProprietorshipType", New Object() {ProprietorshipTypeNo}, Me.GetProprietorshipTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProprietorshipTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProprietorshipTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProprietorshipTypeCompleted(Me, New GetProprietorshipTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProprietorshipType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProprietorshipType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProprietorshipType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProprietorshipType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProprietorshipType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProprietorshipType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProprietorshipTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateProprietorshipTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProprietorshipTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProprietorshipTypeOperationCompleted Is Nothing) Then
                Me.UpdateProprietorshipTypeOperationCompleted = AddressOf Me.OnUpdateProprietorshipTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateProprietorshipType", New Object() {dstCommit}, Me.UpdateProprietorshipTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProprietorshipTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProprietorshipTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProprietorshipTypeCompleted(Me, New UpdateProprietorshipTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRecommendType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRecommendType(ByVal RecommendTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRecommendType", New Object() {RecommendTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRecommendType(ByVal RecommendTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRecommendType", New Object() {RecommendTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRecommendType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRecommendTypeAsync(ByVal RecommendTypeNo As String)
            Me.GetRecommendTypeAsync(RecommendTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRecommendTypeAsync(ByVal RecommendTypeNo As String, ByVal userState As Object)
            If (Me.GetRecommendTypeOperationCompleted Is Nothing) Then
                Me.GetRecommendTypeOperationCompleted = AddressOf Me.OnGetRecommendTypeOperationCompleted
            End If
            Me.InvokeAsync("GetRecommendType", New Object() {RecommendTypeNo}, Me.GetRecommendTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRecommendTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRecommendTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRecommendTypeCompleted(Me, New GetRecommendTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRecommendType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRecommendType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateRecommendType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateRecommendType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateRecommendType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateRecommendType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRecommendTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateRecommendTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRecommendTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateRecommendTypeOperationCompleted Is Nothing) Then
                Me.UpdateRecommendTypeOperationCompleted = AddressOf Me.OnUpdateRecommendTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateRecommendType", New Object() {dstCommit}, Me.UpdateRecommendTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRecommendTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRecommendTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRecommendTypeCompleted(Me, New UpdateRecommendTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRecordType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRecordType(ByVal RecordTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRecordType", New Object() {RecordTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRecordType(ByVal RecordTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRecordType", New Object() {RecordTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRecordType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRecordTypeAsync(ByVal RecordTypeNo As String)
            Me.GetRecordTypeAsync(RecordTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRecordTypeAsync(ByVal RecordTypeNo As String, ByVal userState As Object)
            If (Me.GetRecordTypeOperationCompleted Is Nothing) Then
                Me.GetRecordTypeOperationCompleted = AddressOf Me.OnGetRecordTypeOperationCompleted
            End If
            Me.InvokeAsync("GetRecordType", New Object() {RecordTypeNo}, Me.GetRecordTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRecordTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRecordTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRecordTypeCompleted(Me, New GetRecordTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRecordType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRecordType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateRecordType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateRecordType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateRecordType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateRecordType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRecordTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateRecordTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRecordTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateRecordTypeOperationCompleted Is Nothing) Then
                Me.UpdateRecordTypeOperationCompleted = AddressOf Me.OnUpdateRecordTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateRecordType", New Object() {dstCommit}, Me.UpdateRecordTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRecordTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRecordTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRecordTypeCompleted(Me, New UpdateRecordTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRole(ByVal RoleID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRole", New Object() {RoleID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRole(ByVal RoleID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRole", New Object() {RoleID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRole(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRoleAsync(ByVal RoleID As String)
            Me.GetRoleAsync(RoleID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRoleAsync(ByVal RoleID As String, ByVal userState As Object)
            If (Me.GetRoleOperationCompleted Is Nothing) Then
                Me.GetRoleOperationCompleted = AddressOf Me.OnGetRoleOperationCompleted
            End If
            Me.InvokeAsync("GetRole", New Object() {RoleID}, Me.GetRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRoleCompleted(Me, New GetRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRole(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateRole", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateRole(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateRole", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateRole(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRoleAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateRoleAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRoleAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateRoleOperationCompleted Is Nothing) Then
                Me.UpdateRoleOperationCompleted = AddressOf Me.OnUpdateRoleOperationCompleted
            End If
            Me.InvokeAsync("UpdateRole", New Object() {dstCommit}, Me.UpdateRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRoleCompleted(Me, New UpdateRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateStaffRole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateStaffRole(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateStaffRole", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateStaffRole(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateStaffRole", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateStaffRole(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateStaffRoleAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateStaffRoleAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateStaffRoleAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateStaffRoleOperationCompleted Is Nothing) Then
                Me.UpdateStaffRoleOperationCompleted = AddressOf Me.OnUpdateStaffRoleOperationCompleted
            End If
            Me.InvokeAsync("UpdateStaffRole", New Object() {dstCommit}, Me.UpdateStaffRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateStaffRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateStaffRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateStaffRoleCompleted(Me, New UpdateStaffRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServiceType(ByVal ServiceTypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetServiceType", New Object() {ServiceTypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetServiceType(ByVal ServiceTypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetServiceType", New Object() {ServiceTypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetServiceType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetServiceTypeAsync(ByVal ServiceTypeNo As String)
            Me.GetServiceTypeAsync(ServiceTypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetServiceTypeAsync(ByVal ServiceTypeNo As String, ByVal userState As Object)
            If (Me.GetServiceTypeOperationCompleted Is Nothing) Then
                Me.GetServiceTypeOperationCompleted = AddressOf Me.OnGetServiceTypeOperationCompleted
            End If
            Me.InvokeAsync("GetServiceType", New Object() {ServiceTypeNo}, Me.GetServiceTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetServiceTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetServiceTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetServiceTypeCompleted(Me, New GetServiceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateServiceType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateServiceType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateServiceType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateServiceType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateServiceType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateServiceType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateServiceTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateServiceTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateServiceTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateServiceTypeOperationCompleted Is Nothing) Then
                Me.UpdateServiceTypeOperationCompleted = AddressOf Me.OnUpdateServiceTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateServiceType", New Object() {dstCommit}, Me.UpdateServiceTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateServiceTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateServiceTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateServiceTypeCompleted(Me, New UpdateServiceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskTemplate(ByVal TaskID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTaskTemplate", New Object() {TaskID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTaskTemplate(ByVal TaskID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTaskTemplate", New Object() {TaskID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTaskTemplate(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskTemplateAsync(ByVal TaskID As String)
            Me.GetTaskTemplateAsync(TaskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskTemplateAsync(ByVal TaskID As String, ByVal userState As Object)
            If (Me.GetTaskTemplateOperationCompleted Is Nothing) Then
                Me.GetTaskTemplateOperationCompleted = AddressOf Me.OnGetTaskTemplateOperationCompleted
            End If
            Me.InvokeAsync("GetTaskTemplate", New Object() {TaskID}, Me.GetTaskTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskTemplateCompleted(Me, New GetTaskTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ScanTimingTask", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ScanTimingTask() As String
            Dim results() As Object = Me.Invoke("ScanTimingTask", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginScanTimingTask(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ScanTimingTask", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndScanTimingTask(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ScanTimingTaskAsync()
            Me.ScanTimingTaskAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScanTimingTaskAsync(ByVal userState As Object)
            If (Me.ScanTimingTaskOperationCompleted Is Nothing) Then
                Me.ScanTimingTaskOperationCompleted = AddressOf Me.OnScanTimingTaskOperationCompleted
            End If
            Me.InvokeAsync("ScanTimingTask", New Object(-1) {}, Me.ScanTimingTaskOperationCompleted, userState)
        End Sub
        
        Private Sub OnScanTimingTaskOperationCompleted(ByVal arg As Object)
            If (Not (Me.ScanTimingTaskCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ScanTimingTaskCompleted(Me, New ScanTimingTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaxContractNum", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaxContractNum(ByVal ProjectCode As String) As String
            Dim results() As Object = Me.Invoke("GetMaxContractNum", New Object() {ProjectCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMaxContractNum(ByVal ProjectCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMaxContractNum", New Object() {ProjectCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMaxContractNum(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaxContractNumAsync(ByVal ProjectCode As String)
            Me.GetMaxContractNumAsync(ProjectCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaxContractNumAsync(ByVal ProjectCode As String, ByVal userState As Object)
            If (Me.GetMaxContractNumOperationCompleted Is Nothing) Then
                Me.GetMaxContractNumOperationCompleted = AddressOf Me.OnGetMaxContractNumOperationCompleted
            End If
            Me.InvokeAsync("GetMaxContractNum", New Object() {ProjectCode}, Me.GetMaxContractNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaxContractNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaxContractNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaxContractNumCompleted(Me, New GetMaxContractNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FQueryProjectExpandDate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FQueryProjectExpandDate(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal loan_date_start As String, ByVal loan_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FQueryProjectExpandDate", New Object() {project_code, enterprise_name, service_type, loan_date_start, loan_date_end, manager_a, bank, branch_bank, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginFQueryProjectExpandDate(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal loan_date_start As String, ByVal loan_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FQueryProjectExpandDate", New Object() {project_code, enterprise_name, service_type, loan_date_start, loan_date_end, manager_a, bank, branch_bank, userName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFQueryProjectExpandDate(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FQueryProjectExpandDateAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal loan_date_start As String, ByVal loan_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String)
            Me.FQueryProjectExpandDateAsync(project_code, enterprise_name, service_type, loan_date_start, loan_date_end, manager_a, bank, branch_bank, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FQueryProjectExpandDateAsync(ByVal project_code As String, ByVal enterprise_name As String, ByVal service_type As String, ByVal loan_date_start As String, ByVal loan_date_end As String, ByVal manager_a As String, ByVal bank As String, ByVal branch_bank As String, ByVal userName As String, ByVal userState As Object)
            If (Me.FQueryProjectExpandDateOperationCompleted Is Nothing) Then
                Me.FQueryProjectExpandDateOperationCompleted = AddressOf Me.OnFQueryProjectExpandDateOperationCompleted
            End If
            Me.InvokeAsync("FQueryProjectExpandDate", New Object() {project_code, enterprise_name, service_type, loan_date_start, loan_date_end, manager_a, bank, branch_bank, userName}, Me.FQueryProjectExpandDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnFQueryProjectExpandDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.FQueryProjectExpandDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FQueryProjectExpandDateCompleted(Me, New FQueryProjectExpandDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectExpandDateInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectExpandDateInfo(ByVal strSQL_Condition_ProjectExpandDate As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectExpandDateInfo", New Object() {strSQL_Condition_ProjectExpandDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectExpandDateInfo(ByVal strSQL_Condition_ProjectExpandDate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectExpandDateInfo", New Object() {strSQL_Condition_ProjectExpandDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectExpandDateInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectExpandDateInfoAsync(ByVal strSQL_Condition_ProjectExpandDate As String)
            Me.GetProjectExpandDateInfoAsync(strSQL_Condition_ProjectExpandDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectExpandDateInfoAsync(ByVal strSQL_Condition_ProjectExpandDate As String, ByVal userState As Object)
            If (Me.GetProjectExpandDateInfoOperationCompleted Is Nothing) Then
                Me.GetProjectExpandDateInfoOperationCompleted = AddressOf Me.OnGetProjectExpandDateInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectExpandDateInfo", New Object() {strSQL_Condition_ProjectExpandDate}, Me.GetProjectExpandDateInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectExpandDateInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectExpandDateInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectExpandDateInfoCompleted(Me, New GetProjectExpandDateInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectExpandDate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectExpandDate(ByVal ProjectExpandDateSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectExpandDate", New Object() {ProjectExpandDateSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectExpandDate(ByVal ProjectExpandDateSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectExpandDate", New Object() {ProjectExpandDateSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectExpandDate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectExpandDateAsync(ByVal ProjectExpandDateSet As System.Data.DataSet)
            Me.UpdateProjectExpandDateAsync(ProjectExpandDateSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectExpandDateAsync(ByVal ProjectExpandDateSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectExpandDateOperationCompleted Is Nothing) Then
                Me.UpdateProjectExpandDateOperationCompleted = AddressOf Me.OnUpdateProjectExpandDateOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectExpandDate", New Object() {ProjectExpandDateSet}, Me.UpdateProjectExpandDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectExpandDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectExpandDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectExpandDateCompleted(Me, New UpdateProjectExpandDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectContractCarElementInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectContractCarElementInfo(ByVal strSQL_Condition_ProjectContractCarElement As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectContractCarElementInfo", New Object() {strSQL_Condition_ProjectContractCarElement})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectContractCarElementInfo(ByVal strSQL_Condition_ProjectContractCarElement As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectContractCarElementInfo", New Object() {strSQL_Condition_ProjectContractCarElement}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectContractCarElementInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectContractCarElementInfoAsync(ByVal strSQL_Condition_ProjectContractCarElement As String)
            Me.GetProjectContractCarElementInfoAsync(strSQL_Condition_ProjectContractCarElement, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectContractCarElementInfoAsync(ByVal strSQL_Condition_ProjectContractCarElement As String, ByVal userState As Object)
            If (Me.GetProjectContractCarElementInfoOperationCompleted Is Nothing) Then
                Me.GetProjectContractCarElementInfoOperationCompleted = AddressOf Me.OnGetProjectContractCarElementInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectContractCarElementInfo", New Object() {strSQL_Condition_ProjectContractCarElement}, Me.GetProjectContractCarElementInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectContractCarElementInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectContractCarElementInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectContractCarElementInfoCompleted(Me, New GetProjectContractCarElementInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectContractCarElement", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectContractCarElement(ByVal ProjectContractCarElementSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectContractCarElement", New Object() {ProjectContractCarElementSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectContractCarElement(ByVal ProjectContractCarElementSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectContractCarElement", New Object() {ProjectContractCarElementSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectContractCarElement(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectContractCarElementAsync(ByVal ProjectContractCarElementSet As System.Data.DataSet)
            Me.UpdateProjectContractCarElementAsync(ProjectContractCarElementSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectContractCarElementAsync(ByVal ProjectContractCarElementSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectContractCarElementOperationCompleted Is Nothing) Then
                Me.UpdateProjectContractCarElementOperationCompleted = AddressOf Me.OnUpdateProjectContractCarElementOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectContractCarElement", New Object() {ProjectContractCarElementSet}, Me.UpdateProjectContractCarElementOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectContractCarElementOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectContractCarElementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectContractCarElementCompleted(Me, New UpdateProjectContractCarElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectContractChattelElementInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectContractChattelElementInfo(ByVal strSQL_Condition_ProjectContractChattelElement As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectContractChattelElementInfo", New Object() {strSQL_Condition_ProjectContractChattelElement})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectContractChattelElementInfo(ByVal strSQL_Condition_ProjectContractChattelElement As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectContractChattelElementInfo", New Object() {strSQL_Condition_ProjectContractChattelElement}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectContractChattelElementInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectContractChattelElementInfoAsync(ByVal strSQL_Condition_ProjectContractChattelElement As String)
            Me.GetProjectContractChattelElementInfoAsync(strSQL_Condition_ProjectContractChattelElement, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectContractChattelElementInfoAsync(ByVal strSQL_Condition_ProjectContractChattelElement As String, ByVal userState As Object)
            If (Me.GetProjectContractChattelElementInfoOperationCompleted Is Nothing) Then
                Me.GetProjectContractChattelElementInfoOperationCompleted = AddressOf Me.OnGetProjectContractChattelElementInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectContractChattelElementInfo", New Object() {strSQL_Condition_ProjectContractChattelElement}, Me.GetProjectContractChattelElementInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectContractChattelElementInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectContractChattelElementInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectContractChattelElementInfoCompleted(Me, New GetProjectContractChattelElementInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectContractChattelElement", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectContractChattelElement(ByVal ProjectContractChattelElementSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectContractChattelElement", New Object() {ProjectContractChattelElementSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectContractChattelElement(ByVal ProjectContractChattelElementSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectContractChattelElement", New Object() {ProjectContractChattelElementSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectContractChattelElement(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectContractChattelElementAsync(ByVal ProjectContractChattelElementSet As System.Data.DataSet)
            Me.UpdateProjectContractChattelElementAsync(ProjectContractChattelElementSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectContractChattelElementAsync(ByVal ProjectContractChattelElementSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectContractChattelElementOperationCompleted Is Nothing) Then
                Me.UpdateProjectContractChattelElementOperationCompleted = AddressOf Me.OnUpdateProjectContractChattelElementOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectContractChattelElement", New Object() {ProjectContractChattelElementSet}, Me.UpdateProjectContractChattelElementOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectContractChattelElementOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectContractChattelElementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectContractChattelElementCompleted(Me, New UpdateProjectContractChattelElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectContractEstateElementInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectContractEstateElementInfo(ByVal strSQL_Condition_ProjectContractEstateElement As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectContractEstateElementInfo", New Object() {strSQL_Condition_ProjectContractEstateElement})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectContractEstateElementInfo(ByVal strSQL_Condition_ProjectContractEstateElement As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectContractEstateElementInfo", New Object() {strSQL_Condition_ProjectContractEstateElement}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectContractEstateElementInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectContractEstateElementInfoAsync(ByVal strSQL_Condition_ProjectContractEstateElement As String)
            Me.GetProjectContractEstateElementInfoAsync(strSQL_Condition_ProjectContractEstateElement, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectContractEstateElementInfoAsync(ByVal strSQL_Condition_ProjectContractEstateElement As String, ByVal userState As Object)
            If (Me.GetProjectContractEstateElementInfoOperationCompleted Is Nothing) Then
                Me.GetProjectContractEstateElementInfoOperationCompleted = AddressOf Me.OnGetProjectContractEstateElementInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectContractEstateElementInfo", New Object() {strSQL_Condition_ProjectContractEstateElement}, Me.GetProjectContractEstateElementInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectContractEstateElementInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectContractEstateElementInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectContractEstateElementInfoCompleted(Me, New GetProjectContractEstateElementInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectContractEstateElement", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectContractEstateElement(ByVal ProjectContractEstateElementSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectContractEstateElement", New Object() {ProjectContractEstateElementSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectContractEstateElement(ByVal ProjectContractEstateElementSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectContractEstateElement", New Object() {ProjectContractEstateElementSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectContractEstateElement(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectContractEstateElementAsync(ByVal ProjectContractEstateElementSet As System.Data.DataSet)
            Me.UpdateProjectContractEstateElementAsync(ProjectContractEstateElementSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectContractEstateElementAsync(ByVal ProjectContractEstateElementSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectContractEstateElementOperationCompleted Is Nothing) Then
                Me.UpdateProjectContractEstateElementOperationCompleted = AddressOf Me.OnUpdateProjectContractEstateElementOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectContractEstateElement", New Object() {ProjectContractEstateElementSet}, Me.UpdateProjectContractEstateElementOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectContractEstateElementOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectContractEstateElementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectContractEstateElementCompleted(Me, New UpdateProjectContractEstateElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectContractElementInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectContractElementInfo(ByVal strSQL_Condition_ProjectContractElement As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectContractElementInfo", New Object() {strSQL_Condition_ProjectContractElement})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectContractElementInfo(ByVal strSQL_Condition_ProjectContractElement As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectContractElementInfo", New Object() {strSQL_Condition_ProjectContractElement}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectContractElementInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectContractElementInfoAsync(ByVal strSQL_Condition_ProjectContractElement As String)
            Me.GetProjectContractElementInfoAsync(strSQL_Condition_ProjectContractElement, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectContractElementInfoAsync(ByVal strSQL_Condition_ProjectContractElement As String, ByVal userState As Object)
            If (Me.GetProjectContractElementInfoOperationCompleted Is Nothing) Then
                Me.GetProjectContractElementInfoOperationCompleted = AddressOf Me.OnGetProjectContractElementInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectContractElementInfo", New Object() {strSQL_Condition_ProjectContractElement}, Me.GetProjectContractElementInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectContractElementInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectContractElementInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectContractElementInfoCompleted(Me, New GetProjectContractElementInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectContractElement", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectContractElement(ByVal ProjectContractElementSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectContractElement", New Object() {ProjectContractElementSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectContractElement(ByVal ProjectContractElementSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectContractElement", New Object() {ProjectContractElementSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectContractElement(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectContractElementAsync(ByVal ProjectContractElementSet As System.Data.DataSet)
            Me.UpdateProjectContractElementAsync(ProjectContractElementSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectContractElementAsync(ByVal ProjectContractElementSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectContractElementOperationCompleted Is Nothing) Then
                Me.UpdateProjectContractElementOperationCompleted = AddressOf Me.OnUpdateProjectContractElementOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectContractElement", New Object() {ProjectContractElementSet}, Me.UpdateProjectContractElementOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectContractElementOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectContractElementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectContractElementCompleted(Me, New UpdateProjectContractElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAppraisementInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAppraisementInfo(ByVal strSQL_Condition_Appraisement As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAppraisementInfo", New Object() {strSQL_Condition_Appraisement})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAppraisementInfo(ByVal strSQL_Condition_Appraisement As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAppraisementInfo", New Object() {strSQL_Condition_Appraisement}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAppraisementInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAppraisementInfoAsync(ByVal strSQL_Condition_Appraisement As String)
            Me.GetAppraisementInfoAsync(strSQL_Condition_Appraisement, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAppraisementInfoAsync(ByVal strSQL_Condition_Appraisement As String, ByVal userState As Object)
            If (Me.GetAppraisementInfoOperationCompleted Is Nothing) Then
                Me.GetAppraisementInfoOperationCompleted = AddressOf Me.OnGetAppraisementInfoOperationCompleted
            End If
            Me.InvokeAsync("GetAppraisementInfo", New Object() {strSQL_Condition_Appraisement}, Me.GetAppraisementInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAppraisementInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAppraisementInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAppraisementInfoCompleted(Me, New GetAppraisementInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAppraisement", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAppraisement(ByVal AppraisementSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateAppraisement", New Object() {AppraisementSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateAppraisement(ByVal AppraisementSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateAppraisement", New Object() {AppraisementSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateAppraisement(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAppraisementAsync(ByVal AppraisementSet As System.Data.DataSet)
            Me.UpdateAppraisementAsync(AppraisementSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAppraisementAsync(ByVal AppraisementSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateAppraisementOperationCompleted Is Nothing) Then
                Me.UpdateAppraisementOperationCompleted = AddressOf Me.OnUpdateAppraisementOperationCompleted
            End If
            Me.InvokeAsync("UpdateAppraisement", New Object() {AppraisementSet}, Me.UpdateAppraisementOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAppraisementOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAppraisementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAppraisementCompleted(Me, New UpdateAppraisementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkflowTypeInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWorkflowTypeInfo(ByVal strSQL_Condition_WorkflowType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWorkflowTypeInfo", New Object() {strSQL_Condition_WorkflowType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWorkflowTypeInfo(ByVal strSQL_Condition_WorkflowType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWorkflowTypeInfo", New Object() {strSQL_Condition_WorkflowType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWorkflowTypeInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWorkflowTypeInfoAsync(ByVal strSQL_Condition_WorkflowType As String)
            Me.GetWorkflowTypeInfoAsync(strSQL_Condition_WorkflowType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWorkflowTypeInfoAsync(ByVal strSQL_Condition_WorkflowType As String, ByVal userState As Object)
            If (Me.GetWorkflowTypeInfoOperationCompleted Is Nothing) Then
                Me.GetWorkflowTypeInfoOperationCompleted = AddressOf Me.OnGetWorkflowTypeInfoOperationCompleted
            End If
            Me.InvokeAsync("GetWorkflowTypeInfo", New Object() {strSQL_Condition_WorkflowType}, Me.GetWorkflowTypeInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWorkflowTypeInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWorkflowTypeInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWorkflowTypeInfoCompleted(Me, New GetWorkflowTypeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWorkflowType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWorkflowType(ByVal WorkflowTypeSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWorkflowType", New Object() {WorkflowTypeSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWorkflowType(ByVal WorkflowTypeSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWorkflowType", New Object() {WorkflowTypeSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWorkflowType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWorkflowTypeAsync(ByVal WorkflowTypeSet As System.Data.DataSet)
            Me.UpdateWorkflowTypeAsync(WorkflowTypeSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWorkflowTypeAsync(ByVal WorkflowTypeSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWorkflowTypeOperationCompleted Is Nothing) Then
                Me.UpdateWorkflowTypeOperationCompleted = AddressOf Me.OnUpdateWorkflowTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateWorkflowType", New Object() {WorkflowTypeSet}, Me.UpdateWorkflowTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWorkflowTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWorkflowTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWorkflowTypeCompleted(Me, New UpdateWorkflowTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDdGuarantyStatusInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDdGuarantyStatusInfo(ByVal strSQL_Condition_DdGuarantyStatus As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDdGuarantyStatusInfo", New Object() {strSQL_Condition_DdGuarantyStatus})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDdGuarantyStatusInfo(ByVal strSQL_Condition_DdGuarantyStatus As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDdGuarantyStatusInfo", New Object() {strSQL_Condition_DdGuarantyStatus}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDdGuarantyStatusInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDdGuarantyStatusInfoAsync(ByVal strSQL_Condition_DdGuarantyStatus As String)
            Me.GetDdGuarantyStatusInfoAsync(strSQL_Condition_DdGuarantyStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDdGuarantyStatusInfoAsync(ByVal strSQL_Condition_DdGuarantyStatus As String, ByVal userState As Object)
            If (Me.GetDdGuarantyStatusInfoOperationCompleted Is Nothing) Then
                Me.GetDdGuarantyStatusInfoOperationCompleted = AddressOf Me.OnGetDdGuarantyStatusInfoOperationCompleted
            End If
            Me.InvokeAsync("GetDdGuarantyStatusInfo", New Object() {strSQL_Condition_DdGuarantyStatus}, Me.GetDdGuarantyStatusInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDdGuarantyStatusInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDdGuarantyStatusInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDdGuarantyStatusInfoCompleted(Me, New GetDdGuarantyStatusInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDdGuarantyStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDdGuarantyStatus(ByVal DdGuarantyStatusSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateDdGuarantyStatus", New Object() {DdGuarantyStatusSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateDdGuarantyStatus(ByVal DdGuarantyStatusSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateDdGuarantyStatus", New Object() {DdGuarantyStatusSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateDdGuarantyStatus(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDdGuarantyStatusAsync(ByVal DdGuarantyStatusSet As System.Data.DataSet)
            Me.UpdateDdGuarantyStatusAsync(DdGuarantyStatusSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDdGuarantyStatusAsync(ByVal DdGuarantyStatusSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateDdGuarantyStatusOperationCompleted Is Nothing) Then
                Me.UpdateDdGuarantyStatusOperationCompleted = AddressOf Me.OnUpdateDdGuarantyStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateDdGuarantyStatus", New Object() {DdGuarantyStatusSet}, Me.UpdateDdGuarantyStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDdGuarantyStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDdGuarantyStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDdGuarantyStatusCompleted(Me, New UpdateDdGuarantyStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlarmCode2", RequestElementName:="GetAlarmCode2", RequestNamespace:="http://tempuri.org/", ResponseElementName:="GetAlarmCode2Response", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetAlarmCode(ByVal alarmType As String, ByVal alarmNo As String) As <System.Xml.Serialization.XmlElementAttribute("GetAlarmCode2Result")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAlarmCode", New Object() {alarmType, alarmNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAlarmCode(ByVal alarmType As String, ByVal alarmNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAlarmCode", New Object() {alarmType, alarmNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAlarmCode(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlarmCodeAsync(ByVal alarmType As String, ByVal alarmNo As String)
            Me.GetAlarmCodeAsync(alarmType, alarmNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlarmCodeAsync(ByVal alarmType As String, ByVal alarmNo As String, ByVal userState As Object)
            If (Me.GetAlarmCodeOperationCompleted Is Nothing) Then
                Me.GetAlarmCodeOperationCompleted = AddressOf Me.OnGetAlarmCodeOperationCompleted
            End If
            Me.InvokeAsync("GetAlarmCode", New Object() {alarmType, alarmNo}, Me.GetAlarmCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlarmCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlarmCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlarmCodeCompleted(Me, New GetAlarmCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="GetAlarmCode1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlarmCode", RequestElementName:="GetAlarmCode", RequestNamespace:="http://tempuri.org/", ResponseElementName:="GetAlarmCodeResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetAlarmCode(ByVal Condition As String) As <System.Xml.Serialization.XmlElementAttribute("GetAlarmCodeResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAlarmCode1", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAlarmCode1(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAlarmCode1", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAlarmCode1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlarmCode1Async(ByVal Condition As String)
            Me.GetAlarmCode1Async(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlarmCode1Async(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetAlarmCode1OperationCompleted Is Nothing) Then
                Me.GetAlarmCode1OperationCompleted = AddressOf Me.OnGetAlarmCode1OperationCompleted
            End If
            Me.InvokeAsync("GetAlarmCode1", New Object() {Condition}, Me.GetAlarmCode1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlarmCode1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlarmCode1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlarmCode1Completed(Me, New GetAlarmCode1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAlarmCode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAlarmCode(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateAlarmCode", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateAlarmCode(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateAlarmCode", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateAlarmCode(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAlarmCodeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateAlarmCodeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAlarmCodeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateAlarmCodeOperationCompleted Is Nothing) Then
                Me.UpdateAlarmCodeOperationCompleted = AddressOf Me.OnUpdateAlarmCodeOperationCompleted
            End If
            Me.InvokeAsync("UpdateAlarmCode", New Object() {dstCommit}, Me.UpdateAlarmCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAlarmCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAlarmCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAlarmCodeCompleted(Me, New UpdateAlarmCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWorkType(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWorkType", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWorkType(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWorkType", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWorkType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWorkTypeAsync(ByVal Condition As String)
            Me.GetWorkTypeAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWorkTypeAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetWorkTypeOperationCompleted Is Nothing) Then
                Me.GetWorkTypeOperationCompleted = AddressOf Me.OnGetWorkTypeOperationCompleted
            End If
            Me.InvokeAsync("GetWorkType", New Object() {Condition}, Me.GetWorkTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWorkTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWorkTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWorkTypeCompleted(Me, New GetWorkTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWorkType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWorkType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWorkType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWorkType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWorkType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWorkType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWorkTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateWorkTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWorkTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWorkTypeOperationCompleted Is Nothing) Then
                Me.UpdateWorkTypeOperationCompleted = AddressOf Me.OnUpdateWorkTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateWorkType", New Object() {dstCommit}, Me.UpdateWorkTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWorkTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWorkTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWorkTypeCompleted(Me, New UpdateWorkTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkSubType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetWorkSubType(ByVal typeCode As String, ByVal subTypeCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWorkSubType", New Object() {typeCode, subTypeCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWorkSubType(ByVal typeCode As String, ByVal subTypeCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWorkSubType", New Object() {typeCode, subTypeCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWorkSubType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWorkSubTypeAsync(ByVal typeCode As String, ByVal subTypeCode As String)
            Me.GetWorkSubTypeAsync(typeCode, subTypeCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWorkSubTypeAsync(ByVal typeCode As String, ByVal subTypeCode As String, ByVal userState As Object)
            If (Me.GetWorkSubTypeOperationCompleted Is Nothing) Then
                Me.GetWorkSubTypeOperationCompleted = AddressOf Me.OnGetWorkSubTypeOperationCompleted
            End If
            Me.InvokeAsync("GetWorkSubType", New Object() {typeCode, subTypeCode}, Me.GetWorkSubTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWorkSubTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWorkSubTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWorkSubTypeCompleted(Me, New GetWorkSubTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="GetWorkSubType1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkSubTypeEx", RequestElementName:="GetWorkSubTypeEx", RequestNamespace:="http://tempuri.org/", ResponseElementName:="GetWorkSubTypeExResponse", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function GetWorkSubType(ByVal Condition As String) As <System.Xml.Serialization.XmlElementAttribute("GetWorkSubTypeExResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWorkSubType1", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWorkSubType1(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWorkSubType1", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWorkSubType1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWorkSubType1Async(ByVal Condition As String)
            Me.GetWorkSubType1Async(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWorkSubType1Async(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetWorkSubType1OperationCompleted Is Nothing) Then
                Me.GetWorkSubType1OperationCompleted = AddressOf Me.OnGetWorkSubType1OperationCompleted
            End If
            Me.InvokeAsync("GetWorkSubType1", New Object() {Condition}, Me.GetWorkSubType1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWorkSubType1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWorkSubType1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWorkSubType1Completed(Me, New GetWorkSubType1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWorkSubType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWorkSubType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateWorkSubType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateWorkSubType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateWorkSubType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateWorkSubType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWorkSubTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateWorkSubTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWorkSubTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateWorkSubTypeOperationCompleted Is Nothing) Then
                Me.UpdateWorkSubTypeOperationCompleted = AddressOf Me.OnUpdateWorkSubTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateWorkSubType", New Object() {dstCommit}, Me.UpdateWorkSubTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWorkSubTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWorkSubTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWorkSubTypeCompleted(Me, New UpdateWorkSubTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlarmType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAlarmType(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAlarmType", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAlarmType(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAlarmType", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAlarmType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlarmTypeAsync(ByVal Condition As String)
            Me.GetAlarmTypeAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlarmTypeAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetAlarmTypeOperationCompleted Is Nothing) Then
                Me.GetAlarmTypeOperationCompleted = AddressOf Me.OnGetAlarmTypeOperationCompleted
            End If
            Me.InvokeAsync("GetAlarmType", New Object() {Condition}, Me.GetAlarmTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlarmTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlarmTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlarmTypeCompleted(Me, New GetAlarmTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAlarmType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAlarmType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateAlarmType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateAlarmType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateAlarmType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateAlarmType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAlarmTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateAlarmTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAlarmTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateAlarmTypeOperationCompleted Is Nothing) Then
                Me.UpdateAlarmTypeOperationCompleted = AddressOf Me.OnUpdateAlarmTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateAlarmType", New Object() {dstCommit}, Me.UpdateAlarmTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAlarmTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAlarmTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAlarmTypeCompleted(Me, New UpdateAlarmTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCorporatioRelationType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCorporatioRelationType(ByVal TypeNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCorporatioRelationType", New Object() {TypeNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCorporatioRelationType(ByVal TypeNo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCorporatioRelationType", New Object() {TypeNo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCorporatioRelationType(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCorporatioRelationTypeAsync(ByVal TypeNo As String)
            Me.GetCorporatioRelationTypeAsync(TypeNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCorporatioRelationTypeAsync(ByVal TypeNo As String, ByVal userState As Object)
            If (Me.GetCorporatioRelationTypeOperationCompleted Is Nothing) Then
                Me.GetCorporatioRelationTypeOperationCompleted = AddressOf Me.OnGetCorporatioRelationTypeOperationCompleted
            End If
            Me.InvokeAsync("GetCorporatioRelationType", New Object() {TypeNo}, Me.GetCorporatioRelationTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCorporatioRelationTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCorporatioRelationTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCorporatioRelationTypeCompleted(Me, New GetCorporatioRelationTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporatioRelationType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporatioRelationType(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporatioRelationType", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporatioRelationType(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporatioRelationType", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporatioRelationType(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporatioRelationTypeAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateCorporatioRelationTypeAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporatioRelationTypeAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporatioRelationTypeOperationCompleted Is Nothing) Then
                Me.UpdateCorporatioRelationTypeOperationCompleted = AddressOf Me.OnUpdateCorporatioRelationTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporatioRelationType", New Object() {dstCommit}, Me.UpdateCorporatioRelationTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporatioRelationTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporatioRelationTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporatioRelationTypeCompleted(Me, New UpdateCorporatioRelationTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCooperateOrganization", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCooperateOrganization(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCooperateOrganization", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCooperateOrganization(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCooperateOrganization", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCooperateOrganization(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCooperateOrganizationAsync(ByVal Condition As String)
            Me.GetCooperateOrganizationAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCooperateOrganizationAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetCooperateOrganizationOperationCompleted Is Nothing) Then
                Me.GetCooperateOrganizationOperationCompleted = AddressOf Me.OnGetCooperateOrganizationOperationCompleted
            End If
            Me.InvokeAsync("GetCooperateOrganization", New Object() {Condition}, Me.GetCooperateOrganizationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCooperateOrganizationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCooperateOrganizationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCooperateOrganizationCompleted(Me, New GetCooperateOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCooperateOrganization", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCooperateOrganization(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCooperateOrganization", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCooperateOrganization(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCooperateOrganization", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCooperateOrganization(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCooperateOrganizationAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateCooperateOrganizationAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCooperateOrganizationAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCooperateOrganizationOperationCompleted Is Nothing) Then
                Me.UpdateCooperateOrganizationOperationCompleted = AddressOf Me.OnUpdateCooperateOrganizationOperationCompleted
            End If
            Me.InvokeAsync("UpdateCooperateOrganization", New Object() {dstCommit}, Me.UpdateCooperateOrganizationOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCooperateOrganizationOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCooperateOrganizationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCooperateOrganizationCompleted(Me, New UpdateCooperateOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCooperateOrganizationOpinion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCooperateOrganizationOpinion(ByVal Condition As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCooperateOrganizationOpinion", New Object() {Condition})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCooperateOrganizationOpinion(ByVal Condition As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCooperateOrganizationOpinion", New Object() {Condition}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCooperateOrganizationOpinion(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCooperateOrganizationOpinionAsync(ByVal Condition As String)
            Me.GetCooperateOrganizationOpinionAsync(Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCooperateOrganizationOpinionAsync(ByVal Condition As String, ByVal userState As Object)
            If (Me.GetCooperateOrganizationOpinionOperationCompleted Is Nothing) Then
                Me.GetCooperateOrganizationOpinionOperationCompleted = AddressOf Me.OnGetCooperateOrganizationOpinionOperationCompleted
            End If
            Me.InvokeAsync("GetCooperateOrganizationOpinion", New Object() {Condition}, Me.GetCooperateOrganizationOpinionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCooperateOrganizationOpinionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCooperateOrganizationOpinionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCooperateOrganizationOpinionCompleted(Me, New GetCooperateOrganizationOpinionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCooperateOrganizationOpinion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCooperateOrganizationOpinion(ByVal dstCommit As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCooperateOrganizationOpinion", New Object() {dstCommit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCooperateOrganizationOpinion(ByVal dstCommit As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCooperateOrganizationOpinion", New Object() {dstCommit}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCooperateOrganizationOpinion(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCooperateOrganizationOpinionAsync(ByVal dstCommit As System.Data.DataSet)
            Me.UpdateCooperateOrganizationOpinionAsync(dstCommit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCooperateOrganizationOpinionAsync(ByVal dstCommit As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCooperateOrganizationOpinionOperationCompleted Is Nothing) Then
                Me.UpdateCooperateOrganizationOpinionOperationCompleted = AddressOf Me.OnUpdateCooperateOrganizationOpinionOperationCompleted
            End If
            Me.InvokeAsync("UpdateCooperateOrganizationOpinion", New Object() {dstCommit}, Me.UpdateCooperateOrganizationOpinionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCooperateOrganizationOpinionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCooperateOrganizationOpinionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCooperateOrganizationOpinionCompleted(Me, New UpdateCooperateOrganizationOpinionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHolidayInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHolidayInfo(ByVal strSQL_Condition_Holiday As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetHolidayInfo", New Object() {strSQL_Condition_Holiday})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetHolidayInfo(ByVal strSQL_Condition_Holiday As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetHolidayInfo", New Object() {strSQL_Condition_Holiday}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetHolidayInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHolidayInfoAsync(ByVal strSQL_Condition_Holiday As String)
            Me.GetHolidayInfoAsync(strSQL_Condition_Holiday, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHolidayInfoAsync(ByVal strSQL_Condition_Holiday As String, ByVal userState As Object)
            If (Me.GetHolidayInfoOperationCompleted Is Nothing) Then
                Me.GetHolidayInfoOperationCompleted = AddressOf Me.OnGetHolidayInfoOperationCompleted
            End If
            Me.InvokeAsync("GetHolidayInfo", New Object() {strSQL_Condition_Holiday}, Me.GetHolidayInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHolidayInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHolidayInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHolidayInfoCompleted(Me, New GetHolidayInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateHoliday", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateHoliday(ByVal HolidaySet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateHoliday", New Object() {HolidaySet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateHoliday(ByVal HolidaySet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateHoliday", New Object() {HolidaySet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateHoliday(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateHolidayAsync(ByVal HolidaySet As System.Data.DataSet)
            Me.UpdateHolidayAsync(HolidaySet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateHolidayAsync(ByVal HolidaySet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateHolidayOperationCompleted Is Nothing) Then
                Me.UpdateHolidayOperationCompleted = AddressOf Me.OnUpdateHolidayOperationCompleted
            End If
            Me.InvokeAsync("UpdateHoliday", New Object() {HolidaySet}, Me.UpdateHolidayOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateHolidayOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateHolidayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateHolidayCompleted(Me, New UpdateHolidayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTracePlanInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTracePlanInfo(ByVal strSQL_Condition_TracePlan As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTracePlanInfo", New Object() {strSQL_Condition_TracePlan})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTracePlanInfo(ByVal strSQL_Condition_TracePlan As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTracePlanInfo", New Object() {strSQL_Condition_TracePlan}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTracePlanInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTracePlanInfoAsync(ByVal strSQL_Condition_TracePlan As String)
            Me.GetTracePlanInfoAsync(strSQL_Condition_TracePlan, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTracePlanInfoAsync(ByVal strSQL_Condition_TracePlan As String, ByVal userState As Object)
            If (Me.GetTracePlanInfoOperationCompleted Is Nothing) Then
                Me.GetTracePlanInfoOperationCompleted = AddressOf Me.OnGetTracePlanInfoOperationCompleted
            End If
            Me.InvokeAsync("GetTracePlanInfo", New Object() {strSQL_Condition_TracePlan}, Me.GetTracePlanInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTracePlanInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTracePlanInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTracePlanInfoCompleted(Me, New GetTracePlanInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTracePlan", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTracePlan(ByVal TracePlanSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateTracePlan", New Object() {TracePlanSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateTracePlan(ByVal TracePlanSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateTracePlan", New Object() {TracePlanSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateTracePlan(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTracePlanAsync(ByVal TracePlanSet As System.Data.DataSet)
            Me.UpdateTracePlanAsync(TracePlanSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTracePlanAsync(ByVal TracePlanSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateTracePlanOperationCompleted Is Nothing) Then
                Me.UpdateTracePlanOperationCompleted = AddressOf Me.OnUpdateTracePlanOperationCompleted
            End If
            Me.InvokeAsync("UpdateTracePlan", New Object() {TracePlanSet}, Me.UpdateTracePlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTracePlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTracePlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTracePlanCompleted(Me, New UpdateTracePlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectTaskAttendeeInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectTaskAttendeeInfo(ByVal strSQL_Condition_ProjectTaskAttendee As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectTaskAttendeeInfo", New Object() {strSQL_Condition_ProjectTaskAttendee})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectTaskAttendeeInfo(ByVal strSQL_Condition_ProjectTaskAttendee As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectTaskAttendeeInfo", New Object() {strSQL_Condition_ProjectTaskAttendee}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectTaskAttendeeInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectTaskAttendeeInfoAsync(ByVal strSQL_Condition_ProjectTaskAttendee As String)
            Me.GetProjectTaskAttendeeInfoAsync(strSQL_Condition_ProjectTaskAttendee, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectTaskAttendeeInfoAsync(ByVal strSQL_Condition_ProjectTaskAttendee As String, ByVal userState As Object)
            If (Me.GetProjectTaskAttendeeInfoOperationCompleted Is Nothing) Then
                Me.GetProjectTaskAttendeeInfoOperationCompleted = AddressOf Me.OnGetProjectTaskAttendeeInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectTaskAttendeeInfo", New Object() {strSQL_Condition_ProjectTaskAttendee}, Me.GetProjectTaskAttendeeInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectTaskAttendeeInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectTaskAttendeeInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectTaskAttendeeInfoCompleted(Me, New GetProjectTaskAttendeeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProjectTaskAttendee", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProjectTaskAttendee(ByVal ProjectTaskAttendeeSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProjectTaskAttendee", New Object() {ProjectTaskAttendeeSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProjectTaskAttendee(ByVal ProjectTaskAttendeeSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProjectTaskAttendee", New Object() {ProjectTaskAttendeeSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProjectTaskAttendee(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectTaskAttendeeAsync(ByVal ProjectTaskAttendeeSet As System.Data.DataSet)
            Me.UpdateProjectTaskAttendeeAsync(ProjectTaskAttendeeSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectTaskAttendeeAsync(ByVal ProjectTaskAttendeeSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectTaskAttendeeOperationCompleted Is Nothing) Then
                Me.UpdateProjectTaskAttendeeOperationCompleted = AddressOf Me.OnUpdateProjectTaskAttendeeOperationCompleted
            End If
            Me.InvokeAsync("UpdateProjectTaskAttendee", New Object() {ProjectTaskAttendeeSet}, Me.UpdateProjectTaskAttendeeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectTaskAttendeeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectTaskAttendeeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectTaskAttendeeCompleted(Me, New UpdateProjectTaskAttendeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBankInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBankInfo(ByVal strSQL_Condition_Bank As String, ByVal strSQL_Condition_Branch As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBankInfo", New Object() {strSQL_Condition_Bank, strSQL_Condition_Branch})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetBankInfo(ByVal strSQL_Condition_Bank As String, ByVal strSQL_Condition_Branch As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetBankInfo", New Object() {strSQL_Condition_Bank, strSQL_Condition_Branch}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetBankInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBankInfoAsync(ByVal strSQL_Condition_Bank As String, ByVal strSQL_Condition_Branch As String)
            Me.GetBankInfoAsync(strSQL_Condition_Bank, strSQL_Condition_Branch, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBankInfoAsync(ByVal strSQL_Condition_Bank As String, ByVal strSQL_Condition_Branch As String, ByVal userState As Object)
            If (Me.GetBankInfoOperationCompleted Is Nothing) Then
                Me.GetBankInfoOperationCompleted = AddressOf Me.OnGetBankInfoOperationCompleted
            End If
            Me.InvokeAsync("GetBankInfo", New Object() {strSQL_Condition_Bank, strSQL_Condition_Branch}, Me.GetBankInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBankInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBankInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBankInfoCompleted(Me, New GetBankInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBank", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateBank(ByVal BankSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateBank", New Object() {BankSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateBank(ByVal BankSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateBank", New Object() {BankSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateBank(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateBankAsync(ByVal BankSet As System.Data.DataSet)
            Me.UpdateBankAsync(BankSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBankAsync(ByVal BankSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateBankOperationCompleted Is Nothing) Then
                Me.UpdateBankOperationCompleted = AddressOf Me.OnUpdateBankOperationCompleted
            End If
            Me.InvokeAsync("UpdateBank", New Object() {BankSet}, Me.UpdateBankOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateBankOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateBankCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateBankCompleted(Me, New UpdateBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBankBranch", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateBankBranch(ByVal BranchSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateBankBranch", New Object() {BranchSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateBankBranch(ByVal BranchSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateBankBranch", New Object() {BranchSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateBankBranch(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateBankBranchAsync(ByVal BranchSet As System.Data.DataSet)
            Me.UpdateBankBranchAsync(BranchSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBankBranchAsync(ByVal BranchSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateBankBranchOperationCompleted Is Nothing) Then
                Me.UpdateBankBranchOperationCompleted = AddressOf Me.OnUpdateBankBranchOperationCompleted
            End If
            Me.InvokeAsync("UpdateBankBranch", New Object() {BranchSet}, Me.UpdateBankBranchOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateBankBranchOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateBankBranchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateBankBranchCompleted(Me, New UpdateBankBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBankAndBranch", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateBankAndBranch(ByVal BankAndBranchSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateBankAndBranch", New Object() {BankAndBranchSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateBankAndBranch(ByVal BankAndBranchSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateBankAndBranch", New Object() {BankAndBranchSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateBankAndBranch(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateBankAndBranchAsync(ByVal BankAndBranchSet As System.Data.DataSet)
            Me.UpdateBankAndBranchAsync(BankAndBranchSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateBankAndBranchAsync(ByVal BankAndBranchSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateBankAndBranchOperationCompleted Is Nothing) Then
                Me.UpdateBankAndBranchOperationCompleted = AddressOf Me.OnUpdateBankAndBranchOperationCompleted
            End If
            Me.InvokeAsync("UpdateBankAndBranch", New Object() {BankAndBranchSet}, Me.UpdateBankAndBranchOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateBankAndBranchOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateBankAndBranchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateBankAndBranchCompleted(Me, New UpdateBankAndBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectGuaranteeFormAdditional", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectGuaranteeFormAdditional(ByVal projectCode As String, ByVal itemType As String, ByVal itemCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectGuaranteeFormAdditional", New Object() {projectCode, itemType, itemCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectGuaranteeFormAdditional(ByVal projectCode As String, ByVal itemType As String, ByVal itemCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectGuaranteeFormAdditional", New Object() {projectCode, itemType, itemCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectGuaranteeFormAdditional(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectGuaranteeFormAdditionalAsync(ByVal projectCode As String, ByVal itemType As String, ByVal itemCode As String)
            Me.GetProjectGuaranteeFormAdditionalAsync(projectCode, itemType, itemCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectGuaranteeFormAdditionalAsync(ByVal projectCode As String, ByVal itemType As String, ByVal itemCode As String, ByVal userState As Object)
            If (Me.GetProjectGuaranteeFormAdditionalOperationCompleted Is Nothing) Then
                Me.GetProjectGuaranteeFormAdditionalOperationCompleted = AddressOf Me.OnGetProjectGuaranteeFormAdditionalOperationCompleted
            End If
            Me.InvokeAsync("GetProjectGuaranteeFormAdditional", New Object() {projectCode, itemType, itemCode}, Me.GetProjectGuaranteeFormAdditionalOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectGuaranteeFormAdditionalOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectGuaranteeFormAdditionalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectGuaranteeFormAdditionalCompleted(Me, New GetProjectGuaranteeFormAdditionalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateGuaranteeForm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateGuaranteeForm(ByVal FormSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateGuaranteeForm", New Object() {FormSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateGuaranteeForm(ByVal FormSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateGuaranteeForm", New Object() {FormSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateGuaranteeForm(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateGuaranteeFormAsync(ByVal FormSet As System.Data.DataSet)
            Me.UpdateGuaranteeFormAsync(FormSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGuaranteeFormAsync(ByVal FormSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateGuaranteeFormOperationCompleted Is Nothing) Then
                Me.UpdateGuaranteeFormOperationCompleted = AddressOf Me.OnUpdateGuaranteeFormOperationCompleted
            End If
            Me.InvokeAsync("UpdateGuaranteeForm", New Object() {FormSet}, Me.UpdateGuaranteeFormOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateGuaranteeFormOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateGuaranteeFormCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateGuaranteeFormCompleted(Me, New UpdateGuaranteeFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateGuaranteeFormAdditional", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateGuaranteeFormAdditional(ByVal FormAdditionalSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateGuaranteeFormAdditional", New Object() {FormAdditionalSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateGuaranteeFormAdditional(ByVal FormAdditionalSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateGuaranteeFormAdditional", New Object() {FormAdditionalSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateGuaranteeFormAdditional(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateGuaranteeFormAdditionalAsync(ByVal FormAdditionalSet As System.Data.DataSet)
            Me.UpdateGuaranteeFormAdditionalAsync(FormAdditionalSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGuaranteeFormAdditionalAsync(ByVal FormAdditionalSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateGuaranteeFormAdditionalOperationCompleted Is Nothing) Then
                Me.UpdateGuaranteeFormAdditionalOperationCompleted = AddressOf Me.OnUpdateGuaranteeFormAdditionalOperationCompleted
            End If
            Me.InvokeAsync("UpdateGuaranteeFormAdditional", New Object() {FormAdditionalSet}, Me.UpdateGuaranteeFormAdditionalOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateGuaranteeFormAdditionalOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateGuaranteeFormAdditionalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateGuaranteeFormAdditionalCompleted(Me, New UpdateGuaranteeFormAdditionalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCheckRecordInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCheckRecordInfo(ByVal strSQL_Condition_CheckRecord As String, ByVal strSQL_Condition_CheckAlarm As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCheckRecordInfo", New Object() {strSQL_Condition_CheckRecord, strSQL_Condition_CheckAlarm})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCheckRecordInfo(ByVal strSQL_Condition_CheckRecord As String, ByVal strSQL_Condition_CheckAlarm As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCheckRecordInfo", New Object() {strSQL_Condition_CheckRecord, strSQL_Condition_CheckAlarm}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCheckRecordInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCheckRecordInfoAsync(ByVal strSQL_Condition_CheckRecord As String, ByVal strSQL_Condition_CheckAlarm As String)
            Me.GetCheckRecordInfoAsync(strSQL_Condition_CheckRecord, strSQL_Condition_CheckAlarm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCheckRecordInfoAsync(ByVal strSQL_Condition_CheckRecord As String, ByVal strSQL_Condition_CheckAlarm As String, ByVal userState As Object)
            If (Me.GetCheckRecordInfoOperationCompleted Is Nothing) Then
                Me.GetCheckRecordInfoOperationCompleted = AddressOf Me.OnGetCheckRecordInfoOperationCompleted
            End If
            Me.InvokeAsync("GetCheckRecordInfo", New Object() {strSQL_Condition_CheckRecord, strSQL_Condition_CheckAlarm}, Me.GetCheckRecordInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCheckRecordInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCheckRecordInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCheckRecordInfoCompleted(Me, New GetCheckRecordInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCheckRecordAlarm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCheckRecordAlarm(ByVal CheckRecordAlarmSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCheckRecordAlarm", New Object() {CheckRecordAlarmSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCheckRecordAlarm(ByVal CheckRecordAlarmSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCheckRecordAlarm", New Object() {CheckRecordAlarmSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCheckRecordAlarm(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCheckRecordAlarmAsync(ByVal CheckRecordAlarmSet As System.Data.DataSet)
            Me.UpdateCheckRecordAlarmAsync(CheckRecordAlarmSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCheckRecordAlarmAsync(ByVal CheckRecordAlarmSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCheckRecordAlarmOperationCompleted Is Nothing) Then
                Me.UpdateCheckRecordAlarmOperationCompleted = AddressOf Me.OnUpdateCheckRecordAlarmOperationCompleted
            End If
            Me.InvokeAsync("UpdateCheckRecordAlarm", New Object() {CheckRecordAlarmSet}, Me.UpdateCheckRecordAlarmOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCheckRecordAlarmOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCheckRecordAlarmCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCheckRecordAlarmCompleted(Me, New UpdateCheckRecordAlarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConferenceInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConferenceInfo(ByVal strSQL_Condition_Conference As String, ByVal strSQL_Condition_Conference_Committeeman As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetConferenceInfo", New Object() {strSQL_Condition_Conference, strSQL_Condition_Conference_Committeeman})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetConferenceInfo(ByVal strSQL_Condition_Conference As String, ByVal strSQL_Condition_Conference_Committeeman As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetConferenceInfo", New Object() {strSQL_Condition_Conference, strSQL_Condition_Conference_Committeeman}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetConferenceInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConferenceInfoAsync(ByVal strSQL_Condition_Conference As String, ByVal strSQL_Condition_Conference_Committeeman As String)
            Me.GetConferenceInfoAsync(strSQL_Condition_Conference, strSQL_Condition_Conference_Committeeman, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConferenceInfoAsync(ByVal strSQL_Condition_Conference As String, ByVal strSQL_Condition_Conference_Committeeman As String, ByVal userState As Object)
            If (Me.GetConferenceInfoOperationCompleted Is Nothing) Then
                Me.GetConferenceInfoOperationCompleted = AddressOf Me.OnGetConferenceInfoOperationCompleted
            End If
            Me.InvokeAsync("GetConferenceInfo", New Object() {strSQL_Condition_Conference, strSQL_Condition_Conference_Committeeman}, Me.GetConferenceInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConferenceInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConferenceInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConferenceInfoCompleted(Me, New GetConferenceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateConferenceCommitteeman", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateConferenceCommitteeman(ByVal ConferenceCommitteemanSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateConferenceCommitteeman", New Object() {ConferenceCommitteemanSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateConferenceCommitteeman(ByVal ConferenceCommitteemanSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateConferenceCommitteeman", New Object() {ConferenceCommitteemanSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateConferenceCommitteeman(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateConferenceCommitteemanAsync(ByVal ConferenceCommitteemanSet As System.Data.DataSet)
            Me.UpdateConferenceCommitteemanAsync(ConferenceCommitteemanSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateConferenceCommitteemanAsync(ByVal ConferenceCommitteemanSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateConferenceCommitteemanOperationCompleted Is Nothing) Then
                Me.UpdateConferenceCommitteemanOperationCompleted = AddressOf Me.OnUpdateConferenceCommitteemanOperationCompleted
            End If
            Me.InvokeAsync("UpdateConferenceCommitteeman", New Object() {ConferenceCommitteemanSet}, Me.UpdateConferenceCommitteemanOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateConferenceCommitteemanOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateConferenceCommitteemanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateConferenceCommitteemanCompleted(Me, New UpdateConferenceCommitteemanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConfTrialInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConfTrialInfo(ByVal strSQL_Condition_ConferenceTrial As String, ByVal strSQL_Condition_CommitteemanOpinion As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetConfTrialInfo", New Object() {strSQL_Condition_ConferenceTrial, strSQL_Condition_CommitteemanOpinion})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetConfTrialInfo(ByVal strSQL_Condition_ConferenceTrial As String, ByVal strSQL_Condition_CommitteemanOpinion As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetConfTrialInfo", New Object() {strSQL_Condition_ConferenceTrial, strSQL_Condition_CommitteemanOpinion}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetConfTrialInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConfTrialInfoAsync(ByVal strSQL_Condition_ConferenceTrial As String, ByVal strSQL_Condition_CommitteemanOpinion As String)
            Me.GetConfTrialInfoAsync(strSQL_Condition_ConferenceTrial, strSQL_Condition_CommitteemanOpinion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConfTrialInfoAsync(ByVal strSQL_Condition_ConferenceTrial As String, ByVal strSQL_Condition_CommitteemanOpinion As String, ByVal userState As Object)
            If (Me.GetConfTrialInfoOperationCompleted Is Nothing) Then
                Me.GetConfTrialInfoOperationCompleted = AddressOf Me.OnGetConfTrialInfoOperationCompleted
            End If
            Me.InvokeAsync("GetConfTrialInfo", New Object() {strSQL_Condition_ConferenceTrial, strSQL_Condition_CommitteemanOpinion}, Me.GetConfTrialInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConfTrialInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConfTrialInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConfTrialInfoCompleted(Me, New GetConfTrialInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateConfTrial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateConfTrial(ByVal ConfTrialSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateConfTrial", New Object() {ConfTrialSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateConfTrial(ByVal ConfTrialSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateConfTrial", New Object() {ConfTrialSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateConfTrial(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateConfTrialAsync(ByVal ConfTrialSet As System.Data.DataSet)
            Me.UpdateConfTrialAsync(ConfTrialSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateConfTrialAsync(ByVal ConfTrialSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateConfTrialOperationCompleted Is Nothing) Then
                Me.UpdateConfTrialOperationCompleted = AddressOf Me.OnUpdateConfTrialOperationCompleted
            End If
            Me.InvokeAsync("UpdateConfTrial", New Object() {ConfTrialSet}, Me.UpdateConfTrialOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateConfTrialOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateConfTrialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateConfTrialCompleted(Me, New UpdateConfTrialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCooperateOpinionInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCooperateOpinionInfo(ByVal strSQL_Condition_CooperateOrganization As String, ByVal strSQL_Condition_CooperateOrganizationOpinion As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCooperateOpinionInfo", New Object() {strSQL_Condition_CooperateOrganization, strSQL_Condition_CooperateOrganizationOpinion})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCooperateOpinionInfo(ByVal strSQL_Condition_CooperateOrganization As String, ByVal strSQL_Condition_CooperateOrganizationOpinion As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCooperateOpinionInfo", New Object() {strSQL_Condition_CooperateOrganization, strSQL_Condition_CooperateOrganizationOpinion}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCooperateOpinionInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCooperateOpinionInfoAsync(ByVal strSQL_Condition_CooperateOrganization As String, ByVal strSQL_Condition_CooperateOrganizationOpinion As String)
            Me.GetCooperateOpinionInfoAsync(strSQL_Condition_CooperateOrganization, strSQL_Condition_CooperateOrganizationOpinion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCooperateOpinionInfoAsync(ByVal strSQL_Condition_CooperateOrganization As String, ByVal strSQL_Condition_CooperateOrganizationOpinion As String, ByVal userState As Object)
            If (Me.GetCooperateOpinionInfoOperationCompleted Is Nothing) Then
                Me.GetCooperateOpinionInfoOperationCompleted = AddressOf Me.OnGetCooperateOpinionInfoOperationCompleted
            End If
            Me.InvokeAsync("GetCooperateOpinionInfo", New Object() {strSQL_Condition_CooperateOrganization, strSQL_Condition_CooperateOrganizationOpinion}, Me.GetCooperateOpinionInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCooperateOpinionInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCooperateOpinionInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCooperateOpinionInfoCompleted(Me, New GetCooperateOpinionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCooperateOpinion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCooperateOpinion(ByVal CooperateOpinionSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCooperateOpinion", New Object() {CooperateOpinionSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCooperateOpinion(ByVal CooperateOpinionSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCooperateOpinion", New Object() {CooperateOpinionSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCooperateOpinion(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCooperateOpinionAsync(ByVal CooperateOpinionSet As System.Data.DataSet)
            Me.UpdateCooperateOpinionAsync(CooperateOpinionSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCooperateOpinionAsync(ByVal CooperateOpinionSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCooperateOpinionOperationCompleted Is Nothing) Then
                Me.UpdateCooperateOpinionOperationCompleted = AddressOf Me.OnUpdateCooperateOpinionOperationCompleted
            End If
            Me.InvokeAsync("UpdateCooperateOpinion", New Object() {CooperateOpinionSet}, Me.UpdateCooperateOpinionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCooperateOpinionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCooperateOpinionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCooperateOpinionCompleted(Me, New UpdateCooperateOpinionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCorpDefectInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCorpDefectInfo(ByVal strSQL_Condition_CorpDefect As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCorpDefectInfo", New Object() {strSQL_Condition_CorpDefect})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCorpDefectInfo(ByVal strSQL_Condition_CorpDefect As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCorpDefectInfo", New Object() {strSQL_Condition_CorpDefect}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCorpDefectInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCorpDefectInfoAsync(ByVal strSQL_Condition_CorpDefect As String)
            Me.GetCorpDefectInfoAsync(strSQL_Condition_CorpDefect, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCorpDefectInfoAsync(ByVal strSQL_Condition_CorpDefect As String, ByVal userState As Object)
            If (Me.GetCorpDefectInfoOperationCompleted Is Nothing) Then
                Me.GetCorpDefectInfoOperationCompleted = AddressOf Me.OnGetCorpDefectInfoOperationCompleted
            End If
            Me.InvokeAsync("GetCorpDefectInfo", New Object() {strSQL_Condition_CorpDefect}, Me.GetCorpDefectInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCorpDefectInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCorpDefectInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCorpDefectInfoCompleted(Me, New GetCorpDefectInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorpDefect", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorpDefect(ByVal CorpDefectSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorpDefect", New Object() {CorpDefectSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorpDefect(ByVal CorpDefectSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorpDefect", New Object() {CorpDefectSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorpDefect(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorpDefectAsync(ByVal CorpDefectSet As System.Data.DataSet)
            Me.UpdateCorpDefectAsync(CorpDefectSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorpDefectAsync(ByVal CorpDefectSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorpDefectOperationCompleted Is Nothing) Then
                Me.UpdateCorpDefectOperationCompleted = AddressOf Me.OnUpdateCorpDefectOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorpDefect", New Object() {CorpDefectSet}, Me.UpdateCorpDefectOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorpDefectOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorpDefectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorpDefectCompleted(Me, New UpdateCorpDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectCode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectCode(ByVal corporationCode As String) As String
            Dim results() As Object = Me.Invoke("GetProjectCode", New Object() {corporationCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectCode(ByVal corporationCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectCode", New Object() {corporationCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectCode(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectCodeAsync(ByVal corporationCode As String)
            Me.GetProjectCodeAsync(corporationCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectCodeAsync(ByVal corporationCode As String, ByVal userState As Object)
            If (Me.GetProjectCodeOperationCompleted Is Nothing) Then
                Me.GetProjectCodeOperationCompleted = AddressOf Me.OnGetProjectCodeOperationCompleted
            End If
            Me.InvokeAsync("GetProjectCode", New Object() {corporationCode}, Me.GetProjectCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectCodeCompleted(Me, New GetProjectCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCorporationMaxCode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCorporationMaxCode() As String
            Dim results() As Object = Me.Invoke("GetCorporationMaxCode", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCorporationMaxCode(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCorporationMaxCode", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCorporationMaxCode(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCorporationMaxCodeAsync()
            Me.GetCorporationMaxCodeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCorporationMaxCodeAsync(ByVal userState As Object)
            If (Me.GetCorporationMaxCodeOperationCompleted Is Nothing) Then
                Me.GetCorporationMaxCodeOperationCompleted = AddressOf Me.OnGetCorporationMaxCodeOperationCompleted
            End If
            Me.InvokeAsync("GetCorporationMaxCode", New Object(-1) {}, Me.GetCorporationMaxCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCorporationMaxCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCorporationMaxCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCorporationMaxCodeCompleted(Me, New GetCorporationMaxCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCorporationMaxCode_Guarantee", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCorporationMaxCode_Guarantee() As String
            Dim results() As Object = Me.Invoke("GetCorporationMaxCode_Guarantee", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCorporationMaxCode_Guarantee(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCorporationMaxCode_Guarantee", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCorporationMaxCode_Guarantee(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCorporationMaxCode_GuaranteeAsync()
            Me.GetCorporationMaxCode_GuaranteeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCorporationMaxCode_GuaranteeAsync(ByVal userState As Object)
            If (Me.GetCorporationMaxCode_GuaranteeOperationCompleted Is Nothing) Then
                Me.GetCorporationMaxCode_GuaranteeOperationCompleted = AddressOf Me.OnGetCorporationMaxCode_GuaranteeOperationCompleted
            End If
            Me.InvokeAsync("GetCorporationMaxCode_Guarantee", New Object(-1) {}, Me.GetCorporationMaxCode_GuaranteeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCorporationMaxCode_GuaranteeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCorporationMaxCode_GuaranteeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCorporationMaxCode_GuaranteeCompleted(Me, New GetCorporationMaxCode_GuaranteeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetcorporationInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetcorporationInfo(ByVal strSQL_Condition_Corporation As String, ByVal strSQL_Condition_Consultation As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetcorporationInfo", New Object() {strSQL_Condition_Corporation, strSQL_Condition_Consultation})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetcorporationInfo(ByVal strSQL_Condition_Corporation As String, ByVal strSQL_Condition_Consultation As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetcorporationInfo", New Object() {strSQL_Condition_Corporation, strSQL_Condition_Consultation}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetcorporationInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetcorporationInfoAsync(ByVal strSQL_Condition_Corporation As String, ByVal strSQL_Condition_Consultation As String)
            Me.GetcorporationInfoAsync(strSQL_Condition_Corporation, strSQL_Condition_Consultation, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetcorporationInfoAsync(ByVal strSQL_Condition_Corporation As String, ByVal strSQL_Condition_Consultation As String, ByVal userState As Object)
            If (Me.GetcorporationInfoOperationCompleted Is Nothing) Then
                Me.GetcorporationInfoOperationCompleted = AddressOf Me.OnGetcorporationInfoOperationCompleted
            End If
            Me.InvokeAsync("GetcorporationInfo", New Object() {strSQL_Condition_Corporation, strSQL_Condition_Consultation}, Me.GetcorporationInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetcorporationInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetcorporationInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetcorporationInfoCompleted(Me, New GetcorporationInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorCon", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorCon(ByVal dataSet_Corporation_Consultation As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorCon", New Object() {dataSet_Corporation_Consultation})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorCon(ByVal dataSet_Corporation_Consultation As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorCon", New Object() {dataSet_Corporation_Consultation}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorCon(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorConAsync(ByVal dataSet_Corporation_Consultation As System.Data.DataSet)
            Me.UpdateCorConAsync(dataSet_Corporation_Consultation, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorConAsync(ByVal dataSet_Corporation_Consultation As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorConOperationCompleted Is Nothing) Then
                Me.UpdateCorConOperationCompleted = AddressOf Me.OnUpdateCorConOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorCon", New Object() {dataSet_Corporation_Consultation}, Me.UpdateCorConOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorConOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorConCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorConCompleted(Me, New UpdateCorConCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCorporationAndProjectCorporation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCorporationAndProjectCorporation(ByVal CorporationSet As System.Data.DataSet, ByVal ProjectCorporationSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateCorporationAndProjectCorporation", New Object() {CorporationSet, ProjectCorporationSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateCorporationAndProjectCorporation(ByVal CorporationSet As System.Data.DataSet, ByVal ProjectCorporationSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateCorporationAndProjectCorporation", New Object() {CorporationSet, ProjectCorporationSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateCorporationAndProjectCorporation(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationAndProjectCorporationAsync(ByVal CorporationSet As System.Data.DataSet, ByVal ProjectCorporationSet As System.Data.DataSet)
            Me.UpdateCorporationAndProjectCorporationAsync(CorporationSet, ProjectCorporationSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCorporationAndProjectCorporationAsync(ByVal CorporationSet As System.Data.DataSet, ByVal ProjectCorporationSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateCorporationAndProjectCorporationOperationCompleted Is Nothing) Then
                Me.UpdateCorporationAndProjectCorporationOperationCompleted = AddressOf Me.OnUpdateCorporationAndProjectCorporationOperationCompleted
            End If
            Me.InvokeAsync("UpdateCorporationAndProjectCorporation", New Object() {CorporationSet, ProjectCorporationSet}, Me.UpdateCorporationAndProjectCorporationOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCorporationAndProjectCorporationOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCorporationAndProjectCorporationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCorporationAndProjectCorporationCompleted(Me, New UpdateCorporationAndProjectCorporationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGuarantyInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGuarantyInfo(ByVal strSQL_Condition_OppositeGuarantee As String, ByVal strSQL_Condition_OppositeGuaranteeDetail As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetGuarantyInfo", New Object() {strSQL_Condition_OppositeGuarantee, strSQL_Condition_OppositeGuaranteeDetail})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetGuarantyInfo(ByVal strSQL_Condition_OppositeGuarantee As String, ByVal strSQL_Condition_OppositeGuaranteeDetail As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetGuarantyInfo", New Object() {strSQL_Condition_OppositeGuarantee, strSQL_Condition_OppositeGuaranteeDetail}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetGuarantyInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGuarantyInfoAsync(ByVal strSQL_Condition_OppositeGuarantee As String, ByVal strSQL_Condition_OppositeGuaranteeDetail As String)
            Me.GetGuarantyInfoAsync(strSQL_Condition_OppositeGuarantee, strSQL_Condition_OppositeGuaranteeDetail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGuarantyInfoAsync(ByVal strSQL_Condition_OppositeGuarantee As String, ByVal strSQL_Condition_OppositeGuaranteeDetail As String, ByVal userState As Object)
            If (Me.GetGuarantyInfoOperationCompleted Is Nothing) Then
                Me.GetGuarantyInfoOperationCompleted = AddressOf Me.OnGetGuarantyInfoOperationCompleted
            End If
            Me.InvokeAsync("GetGuarantyInfo", New Object() {strSQL_Condition_OppositeGuarantee, strSQL_Condition_OppositeGuaranteeDetail}, Me.GetGuarantyInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGuarantyInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGuarantyInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGuarantyInfoCompleted(Me, New GetGuarantyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaxGuarantyNum", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaxGuarantyNum(ByVal projectID As String) As Integer
            Dim results() As Object = Me.Invoke("GetMaxGuarantyNum", New Object() {projectID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMaxGuarantyNum(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMaxGuarantyNum", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMaxGuarantyNum(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaxGuarantyNumAsync(ByVal projectID As String)
            Me.GetMaxGuarantyNumAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaxGuarantyNumAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.GetMaxGuarantyNumOperationCompleted Is Nothing) Then
                Me.GetMaxGuarantyNumOperationCompleted = AddressOf Me.OnGetMaxGuarantyNumOperationCompleted
            End If
            Me.InvokeAsync("GetMaxGuarantyNum", New Object() {projectID}, Me.GetMaxGuarantyNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaxGuarantyNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaxGuarantyNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaxGuarantyNumCompleted(Me, New GetMaxGuarantyNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaxSerialID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaxSerialID(ByVal FieldName As String, ByVal TableName As String) As Long
            Dim results() As Object = Me.Invoke("GetMaxSerialID", New Object() {FieldName, TableName})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMaxSerialID(ByVal FieldName As String, ByVal TableName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMaxSerialID", New Object() {FieldName, TableName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMaxSerialID(ByVal asyncResult As System.IAsyncResult) As Long
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaxSerialIDAsync(ByVal FieldName As String, ByVal TableName As String)
            Me.GetMaxSerialIDAsync(FieldName, TableName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaxSerialIDAsync(ByVal FieldName As String, ByVal TableName As String, ByVal userState As Object)
            If (Me.GetMaxSerialIDOperationCompleted Is Nothing) Then
                Me.GetMaxSerialIDOperationCompleted = AddressOf Me.OnGetMaxSerialIDOperationCompleted
            End If
            Me.InvokeAsync("GetMaxSerialID", New Object() {FieldName, TableName}, Me.GetMaxSerialIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaxSerialIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaxSerialIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaxSerialIDCompleted(Me, New GetMaxSerialIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaxAppraisementNum", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaxAppraisementNum(ByVal projectID As String) As Integer
            Dim results() As Object = Me.Invoke("GetMaxAppraisementNum", New Object() {projectID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMaxAppraisementNum(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMaxAppraisementNum", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMaxAppraisementNum(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaxAppraisementNumAsync(ByVal projectID As String)
            Me.GetMaxAppraisementNumAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaxAppraisementNumAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.GetMaxAppraisementNumOperationCompleted Is Nothing) Then
                Me.GetMaxAppraisementNumOperationCompleted = AddressOf Me.OnGetMaxAppraisementNumOperationCompleted
            End If
            Me.InvokeAsync("GetMaxAppraisementNum", New Object() {projectID}, Me.GetMaxAppraisementNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaxAppraisementNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaxAppraisementNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaxAppraisementNumCompleted(Me, New GetMaxAppraisementNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaxCheckRecordNum", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaxCheckRecordNum(ByVal projectID As String) As Integer
            Dim results() As Object = Me.Invoke("GetMaxCheckRecordNum", New Object() {projectID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMaxCheckRecordNum(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMaxCheckRecordNum", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMaxCheckRecordNum(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaxCheckRecordNumAsync(ByVal projectID As String)
            Me.GetMaxCheckRecordNumAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaxCheckRecordNumAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.GetMaxCheckRecordNumOperationCompleted Is Nothing) Then
                Me.GetMaxCheckRecordNumOperationCompleted = AddressOf Me.OnGetMaxCheckRecordNumOperationCompleted
            End If
            Me.InvokeAsync("GetMaxCheckRecordNum", New Object() {projectID}, Me.GetMaxCheckRecordNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaxCheckRecordNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaxCheckRecordNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaxCheckRecordNumCompleted(Me, New GetMaxCheckRecordNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaxConferenceCodeNum", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaxConferenceCodeNum() As Integer
            Dim results() As Object = Me.Invoke("GetMaxConferenceCodeNum", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMaxConferenceCodeNum(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMaxConferenceCodeNum", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMaxConferenceCodeNum(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaxConferenceCodeNumAsync()
            Me.GetMaxConferenceCodeNumAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaxConferenceCodeNumAsync(ByVal userState As Object)
            If (Me.GetMaxConferenceCodeNumOperationCompleted Is Nothing) Then
                Me.GetMaxConferenceCodeNumOperationCompleted = AddressOf Me.OnGetMaxConferenceCodeNumOperationCompleted
            End If
            Me.InvokeAsync("GetMaxConferenceCodeNum", New Object(-1) {}, Me.GetMaxConferenceCodeNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaxConferenceCodeNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaxConferenceCodeNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaxConferenceCodeNumCompleted(Me, New GetMaxConferenceCodeNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateGuaranty", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateGuaranty(ByVal GuarantySet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateGuaranty", New Object() {GuarantySet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateGuaranty(ByVal GuarantySet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateGuaranty", New Object() {GuarantySet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateGuaranty(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateGuarantyAsync(ByVal GuarantySet As System.Data.DataSet)
            Me.UpdateGuarantyAsync(GuarantySet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGuarantyAsync(ByVal GuarantySet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateGuarantyOperationCompleted Is Nothing) Then
                Me.UpdateGuarantyOperationCompleted = AddressOf Me.OnUpdateGuarantyOperationCompleted
            End If
            Me.InvokeAsync("UpdateGuaranty", New Object() {GuarantySet}, Me.UpdateGuarantyOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateGuarantyOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateGuarantyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateGuarantyCompleted(Me, New UpdateGuarantyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIntentLetterInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIntentLetterInfo(ByVal strSQL_Condition_IntentLetter As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetIntentLetterInfo", New Object() {strSQL_Condition_IntentLetter})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetIntentLetterInfo(ByVal strSQL_Condition_IntentLetter As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetIntentLetterInfo", New Object() {strSQL_Condition_IntentLetter}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetIntentLetterInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIntentLetterInfoAsync(ByVal strSQL_Condition_IntentLetter As String)
            Me.GetIntentLetterInfoAsync(strSQL_Condition_IntentLetter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIntentLetterInfoAsync(ByVal strSQL_Condition_IntentLetter As String, ByVal userState As Object)
            If (Me.GetIntentLetterInfoOperationCompleted Is Nothing) Then
                Me.GetIntentLetterInfoOperationCompleted = AddressOf Me.OnGetIntentLetterInfoOperationCompleted
            End If
            Me.InvokeAsync("GetIntentLetterInfo", New Object() {strSQL_Condition_IntentLetter}, Me.GetIntentLetterInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIntentLetterInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIntentLetterInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIntentLetterInfoCompleted(Me, New GetIntentLetterInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateIntentLetter", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateIntentLetter(ByVal IntentLetterSet As System.Data.DataSet, ByVal ProjectSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateIntentLetter", New Object() {IntentLetterSet, ProjectSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateIntentLetter(ByVal IntentLetterSet As System.Data.DataSet, ByVal ProjectSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateIntentLetter", New Object() {IntentLetterSet, ProjectSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateIntentLetter(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateIntentLetterAsync(ByVal IntentLetterSet As System.Data.DataSet, ByVal ProjectSet As System.Data.DataSet)
            Me.UpdateIntentLetterAsync(IntentLetterSet, ProjectSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateIntentLetterAsync(ByVal IntentLetterSet As System.Data.DataSet, ByVal ProjectSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateIntentLetterOperationCompleted Is Nothing) Then
                Me.UpdateIntentLetterOperationCompleted = AddressOf Me.OnUpdateIntentLetterOperationCompleted
            End If
            Me.InvokeAsync("UpdateIntentLetter", New Object() {IntentLetterSet, ProjectSet}, Me.UpdateIntentLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateIntentLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateIntentLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateIntentLetterCompleted(Me, New UpdateIntentLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvestigationInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInvestigationInfo(ByVal strSQL_Condition_Investigation As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInvestigationInfo", New Object() {strSQL_Condition_Investigation})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetInvestigationInfo(ByVal strSQL_Condition_Investigation As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetInvestigationInfo", New Object() {strSQL_Condition_Investigation}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetInvestigationInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInvestigationInfoAsync(ByVal strSQL_Condition_Investigation As String)
            Me.GetInvestigationInfoAsync(strSQL_Condition_Investigation, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInvestigationInfoAsync(ByVal strSQL_Condition_Investigation As String, ByVal userState As Object)
            If (Me.GetInvestigationInfoOperationCompleted Is Nothing) Then
                Me.GetInvestigationInfoOperationCompleted = AddressOf Me.OnGetInvestigationInfoOperationCompleted
            End If
            Me.InvokeAsync("GetInvestigationInfo", New Object() {strSQL_Condition_Investigation}, Me.GetInvestigationInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInvestigationInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInvestigationInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInvestigationInfoCompleted(Me, New GetInvestigationInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateInvestigation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateInvestigation(ByVal InvestigationSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateInvestigation", New Object() {InvestigationSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateInvestigation(ByVal InvestigationSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateInvestigation", New Object() {InvestigationSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateInvestigation(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateInvestigationAsync(ByVal InvestigationSet As System.Data.DataSet)
            Me.UpdateInvestigationAsync(InvestigationSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateInvestigationAsync(ByVal InvestigationSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateInvestigationOperationCompleted Is Nothing) Then
                Me.UpdateInvestigationOperationCompleted = AddressOf Me.OnUpdateInvestigationOperationCompleted
            End If
            Me.InvokeAsync("UpdateInvestigation", New Object() {InvestigationSet}, Me.UpdateInvestigationOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateInvestigationOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateInvestigationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateInvestigationCompleted(Me, New UpdateInvestigationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLoanNoticeInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoanNoticeInfo(ByVal strSQL_Condition_LoanNotice As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLoanNoticeInfo", New Object() {strSQL_Condition_LoanNotice})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLoanNoticeInfo(ByVal strSQL_Condition_LoanNotice As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLoanNoticeInfo", New Object() {strSQL_Condition_LoanNotice}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLoanNoticeInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoanNoticeInfoAsync(ByVal strSQL_Condition_LoanNotice As String)
            Me.GetLoanNoticeInfoAsync(strSQL_Condition_LoanNotice, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoanNoticeInfoAsync(ByVal strSQL_Condition_LoanNotice As String, ByVal userState As Object)
            If (Me.GetLoanNoticeInfoOperationCompleted Is Nothing) Then
                Me.GetLoanNoticeInfoOperationCompleted = AddressOf Me.OnGetLoanNoticeInfoOperationCompleted
            End If
            Me.InvokeAsync("GetLoanNoticeInfo", New Object() {strSQL_Condition_LoanNotice}, Me.GetLoanNoticeInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoanNoticeInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoanNoticeInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoanNoticeInfoCompleted(Me, New GetLoanNoticeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLoanNotice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLoanNotice(ByVal LoanNoticeSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateLoanNotice", New Object() {LoanNoticeSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateLoanNotice(ByVal LoanNoticeSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateLoanNotice", New Object() {LoanNoticeSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateLoanNotice(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLoanNoticeAsync(ByVal LoanNoticeSet As System.Data.DataSet)
            Me.UpdateLoanNoticeAsync(LoanNoticeSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLoanNoticeAsync(ByVal LoanNoticeSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateLoanNoticeOperationCompleted Is Nothing) Then
                Me.UpdateLoanNoticeOperationCompleted = AddressOf Me.OnUpdateLoanNoticeOperationCompleted
            End If
            Me.InvokeAsync("UpdateLoanNotice", New Object() {LoanNoticeSet}, Me.UpdateLoanNoticeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLoanNoticeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLoanNoticeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLoanNoticeCompleted(Me, New UpdateLoanNoticeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProcessInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProcessInfo(ByVal strSQL_Condition_Process As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProcessInfo", New Object() {strSQL_Condition_Process})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProcessInfo(ByVal strSQL_Condition_Process As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProcessInfo", New Object() {strSQL_Condition_Process}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProcessInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProcessInfoAsync(ByVal strSQL_Condition_Process As String)
            Me.GetProcessInfoAsync(strSQL_Condition_Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProcessInfoAsync(ByVal strSQL_Condition_Process As String, ByVal userState As Object)
            If (Me.GetProcessInfoOperationCompleted Is Nothing) Then
                Me.GetProcessInfoOperationCompleted = AddressOf Me.OnGetProcessInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProcessInfo", New Object() {strSQL_Condition_Process}, Me.GetProcessInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProcessInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProcessInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProcessInfoCompleted(Me, New GetProcessInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProcess(ByVal ProcessSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProcess", New Object() {ProcessSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProcess(ByVal ProcessSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProcess", New Object() {ProcessSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProcess(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProcessAsync(ByVal ProcessSet As System.Data.DataSet)
            Me.UpdateProcessAsync(ProcessSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProcessAsync(ByVal ProcessSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProcessOperationCompleted Is Nothing) Then
                Me.UpdateProcessOperationCompleted = AddressOf Me.OnUpdateProcessOperationCompleted
            End If
            Me.InvokeAsync("UpdateProcess", New Object() {ProcessSet}, Me.UpdateProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProcessCompleted(Me, New UpdateProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectInfo(ByVal strSQL_Condition_Project As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectInfo", New Object() {strSQL_Condition_Project})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectInfo(ByVal strSQL_Condition_Project As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectInfo", New Object() {strSQL_Condition_Project}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectInfoAsync(ByVal strSQL_Condition_Project As String)
            Me.GetProjectInfoAsync(strSQL_Condition_Project, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectInfoAsync(ByVal strSQL_Condition_Project As String, ByVal userState As Object)
            If (Me.GetProjectInfoOperationCompleted Is Nothing) Then
                Me.GetProjectInfoOperationCompleted = AddressOf Me.OnGetProjectInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectInfo", New Object() {strSQL_Condition_Project}, Me.GetProjectInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectInfoCompleted(Me, New GetProjectInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProject", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProject(ByVal ProjectSet As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateProject", New Object() {ProjectSet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateProject(ByVal ProjectSet As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateProject", New Object() {ProjectSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateProject(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectAsync(ByVal ProjectSet As System.Data.DataSet)
            Me.UpdateProjectAsync(ProjectSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProjectAsync(ByVal ProjectSet As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateProjectOperationCompleted Is Nothing) Then
                Me.UpdateProjectOperationCompleted = AddressOf Me.OnUpdateProjectOperationCompleted
            End If
            Me.InvokeAsync("UpdateProject", New Object() {ProjectSet}, Me.UpdateProjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProjectCompleted(Me, New UpdateProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaxProjectAccountDetailNum", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaxProjectAccountDetailNum(ByVal projectID As String) As Integer
            Dim results() As Object = Me.Invoke("GetMaxProjectAccountDetailNum", New Object() {projectID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMaxProjectAccountDetailNum(ByVal projectID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMaxProjectAccountDetailNum", New Object() {projectID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMaxProjectAccountDetailNum(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaxProjectAccountDetailNumAsync(ByVal projectID As String)
            Me.GetMaxProjectAccountDetailNumAsync(projectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaxProjectAccountDetailNumAsync(ByVal projectID As String, ByVal userState As Object)
            If (Me.GetMaxProjectAccountDetailNumOperationCompleted Is Nothing) Then
                Me.GetMaxProjectAccountDetailNumOperationCompleted = AddressOf Me.OnGetMaxProjectAccountDetailNumOperationCompleted
            End If
            Me.InvokeAsync("GetMaxProjectAccountDetailNum", New Object() {projectID}, Me.GetMaxProjectAccountDetailNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaxProjectAccountDetailNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaxProjectAccountDetailNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaxProjectAccountDetailNumCompleted(Me, New GetMaxProjectAccountDetailNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProjectAccountDetailInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProjectAccountDetailInfo(ByVal strSQL_Condition_ProjectAccountDetail As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProjectAccountDetailInfo", New Object() {strSQL_Condition_ProjectAccountDetail})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetProjectAccountDetailInfo(ByVal strSQL_Condition_ProjectAccountDetail As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetProjectAccountDetailInfo", New Object() {strSQL_Condition_ProjectAccountDetail}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetProjectAccountDetailInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProjectAccountDetailInfoAsync(ByVal strSQL_Condition_ProjectAccountDetail As String)
            Me.GetProjectAccountDetailInfoAsync(strSQL_Condition_ProjectAccountDetail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProjectAccountDetailInfoAsync(ByVal strSQL_Condition_ProjectAccountDetail As String, ByVal userState As Object)
            If (Me.GetProjectAccountDetailInfoOperationCompleted Is Nothing) Then
                Me.GetProjectAccountDetailInfoOperationCompleted = AddressOf Me.OnGetProjectAccountDetailInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProjectAccountDetailInfo", New Object() {strSQL_Condition_ProjectAccountDetail}, Me.GetProjectAccountDetailInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProjectAccountDetailInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProjectAccountDetailInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProjectAccountDetailInfoCompleted(Me, New GetProjectAccountDetailInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteProjectFinanceAnalyseCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteProjectFinanceAnalyseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteProjectFinanceAnalyseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub updateProcessExCompletedEventHandler(ByVal sender As Object, ByVal e As updateProcessExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updateProcessExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub updateProcessEx1CompletedEventHandler(ByVal sender As Object, ByVal e As updateProcessEx1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updateProcessEx1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPostAndJobResponsibilityInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetPostAndJobResponsibilityInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPostAndJobResponsibilityInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdatePostAndJobResponsibilityCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePostAndJobResponsibilityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePostAndJobResponsibilityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserPostInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserPostInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserPostInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateUserPostCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUserPostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUserPostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetJobPeriodInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobPeriodInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobPeriodInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateJobPeriodCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateJobPeriodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateJobPeriodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWorkingHoursCompletedEventHandler(ByVal sender As Object, ByVal e As GetWorkingHoursCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWorkingHoursCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMoneyInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMoneyInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMoneyInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateMoneyCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMoneyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMoneyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryOppGuarantInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryOppGuarantInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryOppGuarantInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetGuarantingCorporationListCompletedEventHandler(ByVal sender As Object, ByVal e As GetGuarantingCorporationListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGuarantingCorporationListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchConfernceRoomCompletedEventHandler(ByVal sender As Object, ByVal e As FetchConfernceRoomCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchConfernceRoomCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateConfernceRoomCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateConfernceRoomCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateConfernceRoomCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryStatisticsCompensationCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryStatisticsCompensationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryStatisticsCompensationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryStatisticsGEProprietorshipCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryStatisticsGEProprietorshipCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryStatisticsGEProprietorshipCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryStatisticsRegionCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryStatisticsRegionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryStatisticsRegionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryStatisticsCounterguaranteeByMonthCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryStatisticsCounterguaranteeByMonthCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryStatisticsCounterguaranteeByMonthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryStatisticsCounterguaranteeByYearCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryStatisticsCounterguaranteeByYearCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryStatisticsCounterguaranteeByYearCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryStatisticsPMServiceCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryStatisticsPMServiceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryStatisticsPMServiceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PStatisticsByTypeCompletedEventHandler(ByVal sender As Object, ByVal e As PStatisticsByTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PStatisticsByTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PStatisticsByTypeExCompletedEventHandler(ByVal sender As Object, ByVal e As PStatisticsByTypeExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PStatisticsByTypeExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryWorkLogCompletedEventHandler(ByVal sender As Object, ByVal e As PQueryWorkLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryWorkLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryStatisticsGECraftCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryStatisticsGECraftCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryStatisticsGECraftCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryStatisticsMarketingACompletedEventHandler(ByVal sender As Object, ByVal e As PQueryStatisticsMarketingACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryStatisticsMarketingACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryStatisticsMarketingBCompletedEventHandler(ByVal sender As Object, ByVal e As PQueryStatisticsMarketingBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryStatisticsMarketingBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryStatisticsMarketingCCompletedEventHandler(ByVal sender As Object, ByVal e As PQueryStatisticsMarketingCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryStatisticsMarketingCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSysTimeCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectSignatureInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectSignatureInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectSignatureInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectSignatureCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectSignatureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectSignatureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSignaturePlanInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetSignaturePlanInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSignaturePlanInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateSignaturePlanCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSignaturePlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSignaturePlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWfTaskTemplateInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWfTaskTemplateInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWfTaskTemplateInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWfTaskTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWfTaskTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWfTaskTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWfTaskTransferTemplateInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWfTaskTransferTemplateInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWfTaskTransferTemplateInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWfTaskTransferTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWfTaskTransferTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWfTaskTransferTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWfTaskRoleTemplateInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWfTaskRoleTemplateInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWfTaskRoleTemplateInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWfTaskRoleTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWfTaskRoleTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWfTaskRoleTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWfTimingTaskTemplateInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWfTimingTaskTemplateInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWfTimingTaskTemplateInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWfTimingTaskTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWfTimingTaskTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWfTimingTaskTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteProjectCreditQuantityCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteProjectCreditQuantityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteProjectCreditQuantityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FStatisticsFeeCompletedEventHandler(ByVal sender As Object, ByVal e As FStatisticsFeeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FStatisticsFeeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetGuaranteeLetterCompletedEventHandler(ByVal sender As Object, ByVal e As GetGuaranteeLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGuaranteeLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetGuaranteeLetter1CompletedEventHandler(ByVal sender As Object, ByVal e As GetGuaranteeLetter1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGuaranteeLetter1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateGuaranteeLetterCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateGuaranteeLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateGuaranteeLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetGuaranteeLetterTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetGuaranteeLetterTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGuaranteeLetterTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateGuaranteeLetterTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateGuaranteeLetterTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateGuaranteeLetterTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetGuaranteeLetterUsageCompletedEventHandler(ByVal sender As Object, ByVal e As GetGuaranteeLetterUsageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGuaranteeLetterUsageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateGuaranteeLetterUsageCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateGuaranteeLetterUsageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateGuaranteeLetterUsageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetReimburseTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetReimburseTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReimburseTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateReimburseTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateReimburseTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateReimburseTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMaterialCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaterialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaterialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMaterial1CompletedEventHandler(ByVal sender As Object, ByVal e As GetMaterial1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaterial1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DuplicateMaterialCompletedEventHandler(ByVal sender As Object, ByVal e As DuplicateMaterialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DuplicateMaterialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateMaterialCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMaterialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMaterialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryStatisticsRecommendProjectByMonthCompletedEventHandler(ByVal sender As Object, ByVal e As PQueryStatisticsRecommendProjectByMonthCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryStatisticsRecommendProjectByMonthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryStatisticsRecommendProjectByYearCompletedEventHandler(ByVal sender As Object, ByVal e As PQueryStatisticsRecommendProjectByYearCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryStatisticsRecommendProjectByYearCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryStatisticsRecommendProjectCompletedEventHandler(ByVal sender As Object, ByVal e As PQueryStatisticsRecommendProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryStatisticsRecommendProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Usp_ListIsFirstLoanStatCompletedEventHandler(ByVal sender As Object, ByVal e As Usp_ListIsFirstLoanStatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Usp_ListIsFirstLoanStatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Usp_GetUnDealProjectCompletedEventHandler(ByVal sender As Object, ByVal e As Usp_GetUnDealProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Usp_GetUnDealProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Usp_GetGuaranteeProjectCompletedEventHandler(ByVal sender As Object, ByVal e As Usp_GetGuaranteeProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Usp_GetGuaranteeProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Usp_GetAfterGuaranteeRecordCompletedEventHandler(ByVal sender As Object, ByVal e As Usp_GetAfterGuaranteeRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Usp_GetAfterGuaranteeRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Usp_ListConsultationCompletedEventHandler(ByVal sender As Object, ByVal e As Usp_ListConsultationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Usp_ListConsultationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectCounterClaimInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectCounterClaimInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectCounterClaimInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectCounterClaimCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectCounterClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectCounterClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQryUnsignProjectCompletedEventHandler(ByVal sender As Object, ByVal e As FQryUnsignProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQryUnsignProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub Usp_ListGuaranteeFormCompletedEventHandler(ByVal sender As Object, ByVal e As Usp_ListGuaranteeFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Usp_ListGuaranteeFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTOrganizationInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetTOrganizationInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTOrganizationInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateTOrganizationCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTOrganizationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTOrganizationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectOrganizationCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectOrganizationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectOrganizationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectOrganizationCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectOrganizationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectOrganizationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectAppraisementCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectAppraisementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectAppraisementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCorporationAttendeePersonCompletedEventHandler(ByVal sender As Object, ByVal e As GetCorporationAttendeePersonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCorporationAttendeePersonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetDefaultPersonCompletedEventHandler(ByVal sender As Object, ByVal e As GetDefaultPersonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDefaultPersonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryProjectRequiteCompletedEventHandler(ByVal sender As Object, ByVal e As PQueryProjectRequiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryProjectRequiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryIntentLetterCompletedEventHandler(ByVal sender As Object, ByVal e As PQueryIntentLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryIntentLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryIntentLetterInfoCompletedEventHandler(ByVal sender As Object, ByVal e As PQueryIntentLetterInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryIntentLetterInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PCopyOppGuaranteeCompletedEventHandler(ByVal sender As Object, ByVal e As PCopyOppGuaranteeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PCopyOppGuaranteeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetGuarantyInfoExCompletedEventHandler(ByVal sender As Object, ByVal e As GetGuarantyInfoExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGuarantyInfoExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectResponsibleInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectResponsibleInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectResponsibleInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectResponsibleCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectResponsibleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectResponsibleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryOppEvaluateCompletedEventHandler(ByVal sender As Object, ByVal e As PQueryOppEvaluateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryOppEvaluateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWfProjectMessagesInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWfProjectMessagesInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWfProjectMessagesInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWfProjectMessagesCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWfProjectMessagesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWfProjectMessagesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWfProjectTaskTransferInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWfProjectTaskTransferInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWfProjectTaskTransferInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWfProjectTaskTransferCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWfProjectTaskTransferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWfProjectTaskTransferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWfProjectTimingTaskInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWfProjectTimingTaskInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWfProjectTimingTaskInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWfProjectTimingTaskCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWfProjectTimingTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWfProjectTimingTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWfProjectTrackInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWfProjectTrackInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWfProjectTrackInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWfProjectTrackCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWfProjectTrackCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWfProjectTrackCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWfProjectTaskInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWfProjectTaskInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWfProjectTaskInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWfProjectTaskCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWfProjectTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWfProjectTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddMsgCompletedEventHandler(ByVal sender As Object, ByVal e As AddMsgCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMsgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectFinanceAnalyseCompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectFinanceAnalyseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectFinanceAnalyseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectFinanceAnalyse1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectFinanceAnalyse1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectFinanceAnalyse1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CreateProjectFinanceAnalyseCompletedEventHandler(ByVal sender As Object, ByVal e As CreateProjectFinanceAnalyseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateProjectFinanceAnalyseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectFinanceAnalyseIntegrationCompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectFinanceAnalyseIntegrationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectFinanceAnalyseIntegrationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchFinanceAnalyseIndexCompletedEventHandler(ByVal sender As Object, ByVal e As FetchFinanceAnalyseIndexCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchFinanceAnalyseIndexCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchFinanceAnalyseIndex1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchFinanceAnalyseIndex1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchFinanceAnalyseIndex1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectCreditQualityCompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectCreditQualityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectCreditQualityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CreateProjectCreditQualityCompletedEventHandler(ByVal sender As Object, ByVal e As CreateProjectCreditQualityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateProjectCreditQualityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectCreditQualityCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectCreditQualityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectCreditQualityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCreditQualityStandardCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCreditQualityStandardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCreditQualityStandardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCreditQualityStandard1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchCreditQualityStandard1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCreditQualityStandard1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCreditQualityIndexCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCreditQualityIndexCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCreditQualityIndexCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCreditQualityIndex1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchCreditQualityIndex1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCreditQualityIndex1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectCreditQuantityCompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectCreditQuantityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectCreditQuantityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectCreditQuantity1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectCreditQuantity1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectCreditQuantity1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DuplicateCreditAppraiseCompletedEventHandler(ByVal sender As Object, ByVal e As DuplicateCreditAppraiseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DuplicateCreditAppraiseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DuplicateCreditAppraise1CompletedEventHandler(ByVal sender As Object, ByVal e As DuplicateCreditAppraise1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DuplicateCreditAppraise1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CreateProjectCreditQuantityCompletedEventHandler(ByVal sender As Object, ByVal e As CreateProjectCreditQuantityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateProjectCreditQuantityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CreateProjectCreditQuantity1CompletedEventHandler(ByVal sender As Object, ByVal e As CreateProjectCreditQuantity1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateProjectCreditQuantity1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCreditQuantityStandardCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCreditQuantityStandardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCreditQuantityStandardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCreditQuantityStandard1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchCreditQuantityStandard1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCreditQuantityStandard1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCreditQuantityIndexCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCreditQuantityIndexCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCreditQuantityIndexCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCreditQuantityIndex1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchCreditQuantityIndex1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCreditQuantityIndex1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCreditQuantityIndexCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCreditQuantityIndexCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCreditQuantityIndexCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCreditQuantityStandardCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCreditQuantityStandardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCreditQuantityStandardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCreditQualityIndexCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCreditQualityIndexCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCreditQualityIndexCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCreditQualityStandardCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCreditQualityStandardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCreditQualityStandardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCreditAppraiseSystemCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCreditAppraiseSystemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCreditAppraiseSystemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCreditAppraiseSystemCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCreditAppraiseSystemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCreditAppraiseSystemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCreditIndexTypeCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCreditIndexTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCreditIndexTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCreditIndexTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCreditIndexTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCreditIndexTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectCreditCompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectCreditCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectCreditCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectCredit1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectCredit1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectCredit1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CreateProjectCreditCompletedEventHandler(ByVal sender As Object, ByVal e As CreateProjectCreditCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateProjectCreditCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCommonQueryInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCommonQueryInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCommonQueryInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCommonStatisticsInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCommonStatisticsInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCommonStatisticsInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectSearchInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectSearchInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectSearchInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetFinanceReviewDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetFinanceReviewDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFinanceReviewDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetFinanceReviewData1CompletedEventHandler(ByVal sender As Object, ByVal e As GetFinanceReviewData1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFinanceReviewData1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectInfoExCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectInfoExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectInfoExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetReGuaranteeProjectInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetReGuaranteeProjectInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReGuaranteeProjectInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryProjectInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryProjectInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryProjectInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryProjectInfo1CompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryProjectInfo1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryProjectInfo1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMeetProjectCompletedEventHandler(ByVal sender As Object, ByVal e As GetMeetProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMeetProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetOverdueProjectListCompletedEventHandler(ByVal sender As Object, ByVal e As GetOverdueProjectListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOverdueProjectListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryFirstProjectCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryFirstProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryFirstProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryCorporationAttendeeCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryCorporationAttendeeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryCorporationAttendeeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryPauseProjectCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryPauseProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryPauseProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMaturityProjectReviewCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaturityProjectReviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaturityProjectReviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetOnVouchProjectReviewCompletedEventHandler(ByVal sender As Object, ByVal e As GetOnVouchProjectReviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOnVouchProjectReviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectAssignReviewCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectAssignReviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectAssignReviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTerminateProjectReviewCompletedEventHandler(ByVal sender As Object, ByVal e As GetTerminateProjectReviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTerminateProjectReviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetRefundDebtProjectListCompletedEventHandler(ByVal sender As Object, ByVal e As GetRefundDebtProjectListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRefundDebtProjectListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetNeedMeetProjectInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetNeedMeetProjectInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNeedMeetProjectInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWfTaskStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetWfTaskStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWfTaskStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryStatisticsAssuranceInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryStatisticsAssuranceInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryStatisticsAssuranceInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryStatisticsRegionInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryStatisticsRegionInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryStatisticsRegionInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryStatisticsBankInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryStatisticsBankInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryStatisticsBankInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryStatisticsIndustryInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryStatisticsIndustryInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryStatisticsIndustryInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryStatisticsServiceTypeInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryStatisticsServiceTypeInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryStatisticsServiceTypeInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectScheduleInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectScheduleInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectScheduleInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ImportFinanceDataCompletedEventHandler(ByVal sender As Object, ByVal e As ImportFinanceDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportFinanceDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteAntiAssureCompanyCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteAntiAssureCompanyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteAntiAssureCompanyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DelProjectCompletedEventHandler(ByVal sender As Object, ByVal e As DelProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTaskProjectListCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskProjectListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskProjectListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTaskProjectList1CompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskProjectList1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskProjectList1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetConferenceProjectListCompletedEventHandler(ByVal sender As Object, ByVal e As GetConferenceProjectListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConferenceProjectListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchFinancialAnalysisInfoCompletedEventHandler(ByVal sender As Object, ByVal e As FetchFinancialAnalysisInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchFinancialAnalysisInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetNeedSignatureProjectInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetNeedSignatureProjectInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNeedSignatureProjectInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchOppositeGuaranteeAssurerCompletedEventHandler(ByVal sender As Object, ByVal e As FetchOppositeGuaranteeAssurerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchOppositeGuaranteeAssurerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectGuaranteeFormCompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectGuaranteeFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectGuaranteeFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAcceptVouchDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetAcceptVouchDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAcceptVouchDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTaskListInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskListInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskListInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetReviewListInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetReviewListInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReviewListInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetDraftOutContractListInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetDraftOutContractListInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDraftOutContractListInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCapitialEvaluatedListInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCapitialEvaluatedListInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCapitialEvaluatedListInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetManagerAppraiseListInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetManagerAppraiseListInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetManagerAppraiseListInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTeamAppraiseListInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetTeamAppraiseListInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTeamAppraiseListInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetRefundProcessCompletedEventHandler(ByVal sender As Object, ByVal e As GetRefundProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRefundProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryAcceptProjectCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryAcceptProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryAcceptProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryPresentingProjectCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryPresentingProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryPresentingProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryAllocateProjectCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryAllocateProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryAllocateProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryLoanProjectCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryLoanProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryLoanProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQuerySignProjectCompletedEventHandler(ByVal sender As Object, ByVal e As FQuerySignProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQuerySignProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PQueryFirstTrialProjectCompletedEventHandler(ByVal sender As Object, ByVal e As PQueryFirstTrialProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PQueryFirstTrialProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryCreditProjectCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryCreditProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryCreditProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryRecantProjectCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryRecantProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryRecantProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryProcessingProjectCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryProcessingProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryProcessingProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryRegionProjectCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryRegionProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryRegionProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryRequiteProjectCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryRequiteProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryRequiteProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryChargeStatisticsCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryChargeStatisticsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryChargeStatisticsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateTaskTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTaskTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTaskTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetOppositeGuaranteeAssurerInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetOppositeGuaranteeAssurerInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOppositeGuaranteeAssurerInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateOppositeGuaranteeAssurerCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOppositeGuaranteeAssurerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOppositeGuaranteeAssurerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTechnologyTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetTechnologyTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTechnologyTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateTechnologyTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTechnologyTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTechnologyTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTerminateTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetTerminateTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTerminateTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateTerminateTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTerminateTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTerminateTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateUserCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWorkLogInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWorkLogInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWorkLogInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWorkLogCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWorkLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWorkLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectEndCaseInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectEndCaseInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectEndCaseInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectEndCaseCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectEndCaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectEndCaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetRiskClassCompletedEventHandler(ByVal sender As Object, ByVal e As GetRiskClassCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRiskClassCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateRiskClassCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRiskClassCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRiskClassCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPhaseCompletedEventHandler(ByVal sender As Object, ByVal e As GetPhaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPhaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdatePhaseCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePhaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePhaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTeamCompletedEventHandler(ByVal sender As Object, ByVal e As GetTeamCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTeamCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetStaffTeamCompletedEventHandler(ByVal sender As Object, ByVal e As GetStaffTeamCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStaffTeamCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateTeamCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTeamCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTeamCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateStaffTeamCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateStaffTeamCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateStaffTeamCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetStaffCompletedEventHandler(ByVal sender As Object, ByVal e As GetStaffCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStaffCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetStaffRoleCompletedEventHandler(ByVal sender As Object, ByVal e As GetStaffRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStaffRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetStaffByRoleIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetStaffByRoleIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStaffByRoleIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetStaffEXCompletedEventHandler(ByVal sender As Object, ByVal e As GetStaffEXCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStaffEXCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateStaffCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateStaffCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateStaffCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectOpinionBySerialIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectOpinionBySerialIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectOpinionBySerialIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectOpinionByProjectNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectOpinionByProjectNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectOpinionByProjectNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectOpinionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectOpinionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectOpinionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectOpinionAndProjectAccountDetailCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectOpinionAndProjectAccountDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectOpinionAndProjectAccountDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectFileByConditionCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectFileByConditionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectFileByConditionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectFileImageByConditionCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectFileImageByConditionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectFileImageByConditionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectFileCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetRelationIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetRelationIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRelationIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectFileImageCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectFileImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectFileImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectFileCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectFileImageCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectFileImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectFileImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetFileTemplateByConditionCompletedEventHandler(ByVal sender As Object, ByVal e As GetFileTemplateByConditionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFileTemplateByConditionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetFileTemplateExCompletedEventHandler(ByVal sender As Object, ByVal e As GetFileTemplateExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFileTemplateExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateFileTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFileTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFileTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetLoanFormCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoanFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoanFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateLoanFormCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLoanFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLoanFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWfProjectTaskAttendeeInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWfProjectTaskAttendeeInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWfProjectTaskAttendeeInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWfProjectTaskAttendeeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWfProjectTaskAttendeeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWfProjectTaskAttendeeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTransConditionCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransConditionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransConditionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectTaskTransferInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectTaskTransferInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectTaskTransferInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CreateProcessCompletedEventHandler(ByVal sender As Object, ByVal e As CreateProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CreateProcess1CompletedEventHandler(ByVal sender As Object, ByVal e As CreateProcess1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateProcess1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub suspendProcessCompletedEventHandler(ByVal sender As Object, ByVal e As suspendProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class suspendProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub resumeProcessCompletedEventHandler(ByVal sender As Object, ByVal e As resumeProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class resumeProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub isSuspendProcessCompletedEventHandler(ByVal sender As Object, ByVal e As isSuspendProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isSuspendProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub finishedTaskCompletedEventHandler(ByVal sender As Object, ByVal e As finishedTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class finishedTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub finishedTask1CompletedEventHandler(ByVal sender As Object, ByVal e As finishedTask1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class finishedTask1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub RefreshConferenceCompletedEventHandler(ByVal sender As Object, ByVal e As RefreshConferenceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RefreshConferenceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FinishedReviewConferencePlanCompletedEventHandler(ByVal sender As Object, ByVal e As FinishedReviewConferencePlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FinishedReviewConferencePlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CancelReviewConferencePlanCompletedEventHandler(ByVal sender As Object, ByVal e As CancelReviewConferencePlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelReviewConferencePlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CancelReviewConferencePlanProjectCompletedEventHandler(ByVal sender As Object, ByVal e As CancelReviewConferencePlanProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelReviewConferencePlanProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CancelSignaturePlanCompletedEventHandler(ByVal sender As Object, ByVal e As CancelSignaturePlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelSignaturePlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CancelSignaturePlanProjectCompletedEventHandler(ByVal sender As Object, ByVal e As CancelSignaturePlanProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelSignaturePlanProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ReMeetingPlanCompletedEventHandler(ByVal sender As Object, ByVal e As ReMeetingPlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReMeetingPlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ReLoanApplicationCompletedEventHandler(ByVal sender As Object, ByVal e As ReLoanApplicationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReLoanApplicationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FinishedSignaturePlanCompletedEventHandler(ByVal sender As Object, ByVal e As FinishedSignaturePlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FinishedSignaturePlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub rollbackTaskCompletedEventHandler(ByVal sender As Object, ByVal e As rollbackTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class rollbackTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub cancelProcessCompletedEventHandler(ByVal sender As Object, ByVal e As cancelProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SplitPrjoectCompletedEventHandler(ByVal sender As Object, ByVal e As SplitPrjoectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SplitPrjoectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub deleteProcessCompletedEventHandler(ByVal sender As Object, ByVal e As deleteProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class deleteProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub modifiyProcessCompletedEventHandler(ByVal sender As Object, ByVal e As modifiyProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class modifiyProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub consignTaskCompletedEventHandler(ByVal sender As Object, ByVal e As consignTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class consignTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CancelconsignTaskCompletedEventHandler(ByVal sender As Object, ByVal e As CancelconsignTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelconsignTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub StartTaskByManualCompletedEventHandler(ByVal sender As Object, ByVal e As StartTaskByManualCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartTaskByManualCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub LookUpMessageCompletedEventHandler(ByVal sender As Object, ByVal e As LookUpMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LookUpMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateMessageCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub LookUpWorkingCompletedEventHandler(ByVal sender As Object, ByVal e As LookUpWorkingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LookUpWorkingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub LookUpWorkingExCompletedEventHandler(ByVal sender As Object, ByVal e As LookUpWorkingExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LookUpWorkingExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAllBusinessTasksCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllBusinessTasksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllBusinessTasksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub LookUpStatusCompletedEventHandler(ByVal sender As Object, ByVal e As LookUpStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LookUpStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetRefundTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetRefundTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRefundTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateRefundTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRefundTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRefundTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetLoanProvideFormCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoanProvideFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoanProvideFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateLoanProvideFormCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLoanProvideFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLoanProvideFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetLoanChargeMannerCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoanChargeMannerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoanChargeMannerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateLoanChargeMannerCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLoanChargeMannerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLoanChargeMannerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSystemIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetSystemIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSystemIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSystemID1CompletedEventHandler(ByVal sender As Object, ByVal e As GetSystemID1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSystemID1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectCreditQuality1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectCreditQuality1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectCreditQuality1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectAccountDetailCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectAccountDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectAccountDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetRefundCertificateInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetRefundCertificateInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRefundCertificateInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateRefundCertificateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRefundCertificateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRefundCertificateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetReturnReceiptInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetReturnReceiptInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReturnReceiptInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateReturnReceiptCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateReturnReceiptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateReturnReceiptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetGuarantyStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetGuarantyStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGuarantyStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetGuarantyStatusExCompletedEventHandler(ByVal sender As Object, ByVal e As GetGuarantyStatusExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGuarantyStatusExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateGuarantyStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateGuarantyStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateGuarantyStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTerminateReportInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetTerminateReportInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTerminateReportInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateTerminateReportCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTerminateReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTerminateReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectGuaranteeFormCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectGuaranteeFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectGuaranteeFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectGuaranteeFormCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectGuaranteeFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectGuaranteeFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectGuaranteeFormAddCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectGuaranteeFormAddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectGuaranteeFormAddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectGuaranteeFormAddCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectGuaranteeFormAddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectGuaranteeFormAddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSchemaCompletedEventHandler(ByVal sender As Object, ByVal e As GetSchemaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSchemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationAccountCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationAccount1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationAccount1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationAccount1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationLawsuitRecordCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationLawsuitRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationLawsuitRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationRatepayingRecordCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationRatepayingRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationRatepayingRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationBankSavingCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationBankSavingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationBankSavingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationBusinessCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationBusinessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationBusinessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationExternalGuaranteeCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationExternalGuaranteeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationExternalGuaranteeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationLoanCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationLoanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationLoanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationStockStructureCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationStockStructureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationStockStructureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectCorporationExCompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectCorporationExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectCorporationExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectCorporationCompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectCorporationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectCorporationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchProjectCorporation1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchProjectCorporation1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchProjectCorporation1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationPostalOrderCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationPostalOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationPostalOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporationPostalOrderCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporationPostalOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporationPostalOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporationAccountCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporationAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporationAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporationBankSavingCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporationBankSavingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporationBankSavingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporationLawsuitRecordCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporationLawsuitRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporationLawsuitRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporationRatepayingRecordCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporationRatepayingRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporationRatepayingRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporationBusinessCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporationBusinessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporationBusinessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporationExternalGuaranteeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporationExternalGuaranteeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporationExternalGuaranteeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporationLoanCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporationLoanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporationLoanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporationStockStructureCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporationStockStructureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporationStockStructureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectCorporationCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectCorporationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectCorporationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetBranchCompletedEventHandler(ByVal sender As Object, ByVal e As GetBranchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBranchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateBranchCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateBranchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateBranchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAccountCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationAccountCreditCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationAccountCreditCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationAccountCreditCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationAccountCreditExCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationAccountCreditExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationAccountCreditExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationAccountCredit1CompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationAccountCredit1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationAccountCredit1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAccountExCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FetchCorporationAccountMonthCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCorporationAccountMonthCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCorporationAccountMonthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateAccountCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCorporationTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCorporationTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCorporationTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporationTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporationTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporationTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCurrencyCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrencyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrencyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCurrencyCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCurrencyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCurrencyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetDistrictCompletedEventHandler(ByVal sender As Object, ByVal e As GetDistrictCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDistrictCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateDistrictCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDistrictCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDistrictCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetIndustryTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetIndustryTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIndustryTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateIndustryTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateIndustryTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateIndustryTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetInvestFormCompletedEventHandler(ByVal sender As Object, ByVal e As GetInvestFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInvestFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateInvestFormCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateInvestFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateInvestFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetItemTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetItemExCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateItemCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateItemTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateItemTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateItemTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetLoanTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoanTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoanTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateLoanTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLoanTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLoanTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetOppositeGuaranteeFormCompletedEventHandler(ByVal sender As Object, ByVal e As GetOppositeGuaranteeFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOppositeGuaranteeFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateOppositeGuaranteeFormCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOppositeGuaranteeFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOppositeGuaranteeFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectAccountCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectAccountCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectDocumentByConditionCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectDocumentByConditionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectDocumentByConditionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectTaskCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectTaskCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProprietorshipTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetProprietorshipTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProprietorshipTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProprietorshipTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProprietorshipTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProprietorshipTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetRecommendTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetRecommendTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRecommendTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateRecommendTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRecommendTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRecommendTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetRecordTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetRecordTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRecordTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateRecordTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRecordTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRecordTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetRoleCompletedEventHandler(ByVal sender As Object, ByVal e As GetRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateRoleCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateStaffRoleCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateStaffRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateStaffRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetServiceTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetServiceTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetServiceTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateServiceTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateServiceTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateServiceTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTaskTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ScanTimingTaskCompletedEventHandler(ByVal sender As Object, ByVal e As ScanTimingTaskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ScanTimingTaskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMaxContractNumCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaxContractNumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaxContractNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub FQueryProjectExpandDateCompletedEventHandler(ByVal sender As Object, ByVal e As FQueryProjectExpandDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FQueryProjectExpandDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectExpandDateInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectExpandDateInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectExpandDateInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectExpandDateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectExpandDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectExpandDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectContractCarElementInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectContractCarElementInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectContractCarElementInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectContractCarElementCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectContractCarElementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectContractCarElementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectContractChattelElementInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectContractChattelElementInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectContractChattelElementInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectContractChattelElementCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectContractChattelElementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectContractChattelElementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectContractEstateElementInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectContractEstateElementInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectContractEstateElementInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectContractEstateElementCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectContractEstateElementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectContractEstateElementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectContractElementInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectContractElementInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectContractElementInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectContractElementCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectContractElementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectContractElementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAppraisementInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAppraisementInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAppraisementInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateAppraisementCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAppraisementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAppraisementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWorkflowTypeInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWorkflowTypeInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWorkflowTypeInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWorkflowTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWorkflowTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWorkflowTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetDdGuarantyStatusInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetDdGuarantyStatusInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDdGuarantyStatusInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateDdGuarantyStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDdGuarantyStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDdGuarantyStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAlarmCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetAlarmCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlarmCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAlarmCode1CompletedEventHandler(ByVal sender As Object, ByVal e As GetAlarmCode1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlarmCode1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateAlarmCodeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAlarmCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAlarmCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWorkTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetWorkTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWorkTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWorkTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWorkTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWorkTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWorkSubTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetWorkSubTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWorkSubTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWorkSubType1CompletedEventHandler(ByVal sender As Object, ByVal e As GetWorkSubType1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWorkSubType1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWorkSubTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWorkSubTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWorkSubTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAlarmTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetAlarmTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlarmTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateAlarmTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAlarmTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAlarmTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCorporatioRelationTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCorporatioRelationTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCorporatioRelationTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporatioRelationTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporatioRelationTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporatioRelationTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCooperateOrganizationCompletedEventHandler(ByVal sender As Object, ByVal e As GetCooperateOrganizationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCooperateOrganizationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCooperateOrganizationCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCooperateOrganizationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCooperateOrganizationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCooperateOrganizationOpinionCompletedEventHandler(ByVal sender As Object, ByVal e As GetCooperateOrganizationOpinionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCooperateOrganizationOpinionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCooperateOrganizationOpinionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCooperateOrganizationOpinionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCooperateOrganizationOpinionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetHolidayInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetHolidayInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHolidayInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateHolidayCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateHolidayCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateHolidayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTracePlanInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetTracePlanInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTracePlanInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateTracePlanCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTracePlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTracePlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectTaskAttendeeInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectTaskAttendeeInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectTaskAttendeeInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectTaskAttendeeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectTaskAttendeeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectTaskAttendeeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetBankInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetBankInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBankInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateBankCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateBankCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateBankCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateBankBranchCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateBankBranchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateBankBranchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateBankAndBranchCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateBankAndBranchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateBankAndBranchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectGuaranteeFormAdditionalCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectGuaranteeFormAdditionalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectGuaranteeFormAdditionalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateGuaranteeFormCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateGuaranteeFormCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateGuaranteeFormCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateGuaranteeFormAdditionalCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateGuaranteeFormAdditionalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateGuaranteeFormAdditionalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCheckRecordInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCheckRecordInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCheckRecordInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCheckRecordAlarmCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCheckRecordAlarmCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCheckRecordAlarmCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetConferenceInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetConferenceInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConferenceInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateConferenceCommitteemanCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateConferenceCommitteemanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateConferenceCommitteemanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetConfTrialInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetConfTrialInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConfTrialInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateConfTrialCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateConfTrialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateConfTrialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCooperateOpinionInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCooperateOpinionInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCooperateOpinionInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCooperateOpinionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCooperateOpinionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCooperateOpinionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCorpDefectInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCorpDefectInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCorpDefectInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorpDefectCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorpDefectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorpDefectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCorporationMaxCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCorporationMaxCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCorporationMaxCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCorporationMaxCode_GuaranteeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCorporationMaxCode_GuaranteeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCorporationMaxCode_GuaranteeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetcorporationInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetcorporationInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetcorporationInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorConCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorConCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorConCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCorporationAndProjectCorporationCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCorporationAndProjectCorporationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCorporationAndProjectCorporationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetGuarantyInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetGuarantyInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGuarantyInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMaxGuarantyNumCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaxGuarantyNumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaxGuarantyNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMaxSerialIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaxSerialIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaxSerialIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMaxAppraisementNumCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaxAppraisementNumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaxAppraisementNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMaxCheckRecordNumCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaxCheckRecordNumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaxCheckRecordNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMaxConferenceCodeNumCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaxConferenceCodeNumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaxConferenceCodeNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateGuarantyCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateGuarantyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateGuarantyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetIntentLetterInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetIntentLetterInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIntentLetterInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateIntentLetterCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateIntentLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateIntentLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetInvestigationInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetInvestigationInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInvestigationInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateInvestigationCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateInvestigationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateInvestigationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetLoanNoticeInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoanNoticeInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoanNoticeInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateLoanNoticeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLoanNoticeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLoanNoticeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProcessInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProcessInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProcessInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProcessCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateProjectCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMaxProjectAccountDetailNumCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaxProjectAccountDetailNumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaxProjectAccountDetailNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProjectAccountDetailInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProjectAccountDetailInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProjectAccountDetailInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
